basePath: /SEMP/v2/monitor
consumes:
- application/json
definitions:
  About:
    properties: {}
    type: object
  AboutApi:
    properties:
      platform:
        description: The platform running the SEMP API.
        type: string
      sempVersion:
        description: The version of the SEMP API.
        type: string
    required:
    - platform
    - sempVersion
    type: object
  AboutApiCollections:
    properties: {}
    type: object
  AboutApiLinks:
    properties:
      uri:
        description: The URI of this API Description object.
        type: string
    type: object
  AboutApiResponse:
    properties:
      collections:
        $ref: '#/definitions/AboutApiCollections'
      data:
        $ref: '#/definitions/AboutApi'
      links:
        $ref: '#/definitions/AboutApiLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  AboutCollections:
    properties: {}
    type: object
  AboutLinks:
    properties:
      uri:
        description: The URI of this About object.
        type: string
      userUri:
        description: The URI of this About's User object. Available since 2.11.
        type: string
    type: object
  AboutResponse:
    properties:
      collections:
        $ref: '#/definitions/AboutCollections'
      data:
        $ref: '#/definitions/About'
      links:
        $ref: '#/definitions/AboutLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  AboutUser:
    properties:
      globalAccessLevel:
        description: 'The global access level of the User. The allowed values and
          their meaning are:


          <pre>

          "admin" - Full administrative access.

          "none" - No access.

          "read-only" - Read only access.

          "read-write" - Read and write access.

          </pre>

          '
        enum:
        - admin
        - none
        - read-only
        - read-write
        type: string
      username:
        description: The username of the User. Available since 2.17.
        type: string
    type: object
  AboutUserCollections:
    properties:
      msgVpns:
        $ref: '#/definitions/AboutUserCollectionsMsgvpns'
    type: object
  AboutUserCollectionsMsgvpns:
    properties:
      count:
        description: The total number of objects in the msgVpns collection.
        format: int64
        type: integer
    type: object
  AboutUserLinks:
    properties:
      msgVpnsUri:
        description: The URI of this User's collection of User Message VPN objects.
        type: string
      uri:
        description: The URI of this User object.
        type: string
    type: object
  AboutUserMsgVpn:
    properties:
      accessLevel:
        description: 'The Message VPN access level of the User. The allowed values
          and their meaning are:


          <pre>

          "none" - No access.

          "read-only" - Read only access.

          "read-write" - Read and write access.

          </pre>

          '
        enum:
        - none
        - read-only
        - read-write
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  AboutUserMsgVpnCollections:
    properties: {}
    type: object
  AboutUserMsgVpnLinks:
    properties:
      uri:
        description: The URI of this User Message VPN object.
        type: string
    type: object
  AboutUserMsgVpnResponse:
    properties:
      collections:
        $ref: '#/definitions/AboutUserMsgVpnCollections'
      data:
        $ref: '#/definitions/AboutUserMsgVpn'
      links:
        $ref: '#/definitions/AboutUserMsgVpnLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  AboutUserMsgVpnsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/AboutUserMsgVpnCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/AboutUserMsgVpn'
        type: array
      links:
        items:
          $ref: '#/definitions/AboutUserMsgVpnLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  AboutUserResponse:
    properties:
      collections:
        $ref: '#/definitions/AboutUserCollections'
      data:
        $ref: '#/definitions/AboutUser'
      links:
        $ref: '#/definitions/AboutUserLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  Broker:
    properties:
      authClientCertRevocationCheckMode:
        description: 'The client certificate revocation checking mode used when a
          client authenticates with a client certificate. The allowed values and their
          meaning are:


          <pre>

          "none" - Do not perform any certificate revocation checking.

          "ocsp" - Use the Open Certificate Status Protcol (OCSP) for certificate
          revocation checking.

          "crl" - Use Certificate Revocation Lists (CRL) for certificate revocation
          checking.

          "ocsp-crl" - Use OCSP first, but if OCSP fails to return an unambiguous
          result, then check via CRL.

          </pre>

          '
        enum:
        - none
        - ocsp
        - crl
        - ocsp-crl
        type: string
      averageRxByteRate:
        description: The one minute average of the message rate received by the Broker,
          in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      averageRxCompressedByteRate:
        description: The one minute average of the compressed message rate received
          by the Broker, in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received by the Broker,
          in messages per second (msg/sec). Available since 2.14.
        format: int64
        type: integer
      averageRxUncompressedByteRate:
        description: The one minute average of the uncompressed message rate received
          by the Broker, in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted by the
          Broker, in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      averageTxCompressedByteRate:
        description: The one minute average of the compressed message rate transmitted
          by the Broker, in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted by the
          Broker, in messages per second (msg/sec). Available since 2.14.
        format: int64
        type: integer
      averageTxUncompressedByteRate:
        description: The one minute average of the uncompressed message rate transmitted
          by the Broker, in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      cspfVersion:
        description: The current CSPF version. Available since 2.17.
        format: int32
        type: integer
      rxByteCount:
        description: The amount of messages received from clients by the Broker, in
          bytes (B). Available since 2.14.
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received by the Broker, in bytes per
          second (B/sec). Available since 2.14.
        format: int64
        type: integer
      rxCompressedByteCount:
        description: The amount of compressed messages received by the Broker, in
          bytes (B). Available since 2.14.
        format: int64
        type: integer
      rxCompressedByteRate:
        description: The current compressed message rate received by the Broker, in
          bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      rxCompressionRatio:
        description: The compression ratio for messages received by the Broker. Available
          since 2.14.
        type: string
      rxMsgCount:
        description: The number of messages received from clients by the Broker. Available
          since 2.14.
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received by the Broker, in messages
          per second (msg/sec). Available since 2.14.
        format: int64
        type: integer
      rxUncompressedByteCount:
        description: The amount of uncompressed messages received by the Broker, in
          bytes (B). Available since 2.14.
        format: int64
        type: integer
      rxUncompressedByteRate:
        description: The current uncompressed message rate received by the Broker,
          in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      serviceAmqpEnabled:
        description: Enable or disable the AMQP service. When disabled new AMQP Clients
          may not connect through the global or per-VPN AMQP listen-ports, and all
          currently connected AMQP Clients are immediately disconnected. Available
          since 2.17.
        type: boolean
      serviceAmqpTlsListenPort:
        description: TCP port number that AMQP clients can use to connect to the broker
          using raw TCP over TLS. Available since 2.17.
        format: int64
        type: integer
      serviceEventConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      serviceHealthCheckEnabled:
        description: Enable or disable the health-check service. Available since 2.17.
        type: boolean
      serviceHealthCheckListenPort:
        description: The port number for the health-check service. The port must be
          unique across the message backbone. The health-check service must be disabled
          to change the port. Available since 2.17.
        format: int64
        type: integer
      serviceMateLinkEnabled:
        description: Enable or disable the mate-link service. Available since 2.17.
        type: boolean
      serviceMateLinkListenPort:
        description: The port number for the mate-link service. The port must be unique
          across the message backbone. The mate-link service must be disabled to change
          the port. Available since 2.17.
        format: int64
        type: integer
      serviceMqttEnabled:
        description: Enable or disable the MQTT service. When disabled new MQTT Clients
          may not connect through the per-VPN MQTT listen-ports, and all currently
          connected MQTT Clients are immediately disconnected. Available since 2.17.
        type: boolean
      serviceMsgBackboneEnabled:
        description: Enable or disable the msg-backbone service. When disabled new
          Clients may not connect through global or per-VPN listen-ports, and all
          currently connected Clients are immediately disconnected. Available since
          2.17.
        type: boolean
      serviceRedundancyEnabled:
        description: Enable or disable the redundancy service. Available since 2.17.
        type: boolean
      serviceRedundancyFirstListenPort:
        description: The first listen-port used for the redundancy service. Redundancy
          uses this port and the subsequent 2 ports. These port must be unique across
          the message backbone. The redundancy service must be disabled to change
          this port. Available since 2.17.
        format: int64
        type: integer
      serviceRestEventOutgoingConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      serviceRestIncomingEnabled:
        description: Enable or disable the REST service incoming connections on the
          router. Available since 2.17.
        type: boolean
      serviceRestOutgoingEnabled:
        description: Enable or disable the REST service outgoing connections on the
          router. Available since 2.17.
        type: boolean
      serviceSempPlainTextEnabled:
        description: Enable or disable plain-text SEMP service. Available since 2.17.
        type: boolean
      serviceSempPlainTextListenPort:
        description: The TCP port for plain-text SEMP client connections. Available
          since 2.17.
        format: int64
        type: integer
      serviceSempTlsEnabled:
        description: Enable or disable TLS SEMP service. Available since 2.17.
        type: boolean
      serviceSempTlsListenPort:
        description: The TCP port for TLS SEMP client connections. Available since
          2.17.
        format: int64
        type: integer
      serviceSmfCompressionListenPort:
        description: TCP port number that SMF clients can use to connect to the broker
          using raw compression TCP. Available since 2.17.
        format: int64
        type: integer
      serviceSmfEnabled:
        description: Enable or disable the SMF service. When disabled new SMF Clients
          may not connect through the global listen-ports, and all currently connected
          SMF Clients are immediately disconnected. Available since 2.17.
        type: boolean
      serviceSmfEventConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      serviceSmfPlainTextListenPort:
        description: TCP port number that SMF clients can use to connect to the broker
          using raw TCP. Available since 2.17.
        format: int64
        type: integer
      serviceSmfRoutingControlListenPort:
        description: TCP port number that SMF clients can use to connect to the broker
          using raw routing control TCP. Available since 2.17.
        format: int64
        type: integer
      serviceSmfTlsListenPort:
        description: TCP port number that SMF clients can use to connect to the broker
          using raw TCP over TLS. Available since 2.17.
        format: int64
        type: integer
      serviceTlsEventConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      serviceWebTransportEnabled:
        description: Enable or disable the web-transport service. When disabled new
          web-transport Clients may not connect through the global listen-ports, and
          all currently connected web-transport Clients are immediately disconnected.
          Available since 2.17.
        type: boolean
      serviceWebTransportPlainTextListenPort:
        description: The TCP port for plain-text WEB client connections. Available
          since 2.17.
        format: int64
        type: integer
      serviceWebTransportTlsListenPort:
        description: The TCP port for TLS WEB client connections. Available since
          2.17.
        format: int64
        type: integer
      serviceWebTransportWebUrlSuffix:
        description: Used to specify the Web URL suffix that will be used by Web clients
          when communicating with the broker. Available since 2.17.
        type: string
      tlsBlockVersion11Enabled:
        description: Indicates whether TLS version 1.1 connections are blocked. When
          blocked, all existing incoming and outgoing TLS 1.1 connections with Clients,
          SEMP users, and LDAP servers remain connected while new connections are
          blocked. Note that support for TLS 1.1 will eventually be discontinued,
          at which time TLS 1.1 connections will be blocked regardless of this setting.
        type: boolean
      tlsCipherSuiteManagementDefaultList:
        description: The colon-separated list of default cipher suites for TLS management
          connections.
        type: string
      tlsCipherSuiteManagementList:
        description: The colon-separated list of cipher suites used for TLS management
          connections (e.g. SEMP, LDAP). The value "default" implies all supported
          suites ordered from most secure to least secure.
        type: string
      tlsCipherSuiteManagementSupportedList:
        description: The colon-separated list of supported cipher suites for TLS management
          connections.
        type: string
      tlsCipherSuiteMsgBackboneDefaultList:
        description: The colon-separated list of default cipher suites for TLS data
          connections.
        type: string
      tlsCipherSuiteMsgBackboneList:
        description: The colon-separated list of cipher suites used for TLS data connections
          (e.g. client pub/sub). The value "default" implies all supported suites
          ordered from most secure to least secure.
        type: string
      tlsCipherSuiteMsgBackboneSupportedList:
        description: The colon-separated list of supported cipher suites for TLS data
          connections.
        type: string
      tlsCipherSuiteSecureShellDefaultList:
        description: The colon-separated list of default cipher suites for TLS secure
          shell connections.
        type: string
      tlsCipherSuiteSecureShellList:
        description: The colon-separated list of cipher suites used for TLS secure
          shell connections (e.g. SSH, SFTP, SCP). The value "default" implies all
          supported suites ordered from most secure to least secure.
        type: string
      tlsCipherSuiteSecureShellSupportedList:
        description: The colon-separated list of supported cipher suites for TLS secure
          shell connections.
        type: string
      tlsCrimeExploitProtectionEnabled:
        description: Indicates whether protection against the CRIME exploit is enabled.
          When enabled, TLS+compressed messaging performance is degraded. This protection
          should only be disabled if sufficient ACL and authentication features are
          being employed such that a potential attacker does not have sufficient access
          to trigger the exploit.
        type: boolean
      tlsTicketLifetime:
        description: The TLS ticket lifetime in seconds. When a client connects with
          TLS, a session with a session ticket is created using the TLS ticket lifetime
          which determines how long the client has to resume the session.
        format: int32
        type: integer
      tlsVersionSupportedList:
        description: The comma-separated list of supported TLS versions.
        type: string
      txByteCount:
        description: The amount of messages transmitted to clients by the Broker,
          in bytes (B). Available since 2.14.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted by the Broker, in bytes
          per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      txCompressedByteCount:
        description: The amount of compressed messages transmitted by the Broker,
          in bytes (B). Available since 2.14.
        format: int64
        type: integer
      txCompressedByteRate:
        description: The current compressed message rate transmitted by the Broker,
          in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
      txCompressionRatio:
        description: The compression ratio for messages transmitted by the Broker.
          Available since 2.14.
        type: string
      txMsgCount:
        description: The number of messages transmitted to clients by the Broker.
          Available since 2.14.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted by the Broker, in messages
          per second (msg/sec). Available since 2.14.
        format: int64
        type: integer
      txUncompressedByteCount:
        description: The amount of uncompressed messages transmitted by the Broker,
          in bytes (B). Available since 2.14.
        format: int64
        type: integer
      txUncompressedByteRate:
        description: The current uncompressed message rate transmitted by the Broker,
          in bytes per second (B/sec). Available since 2.14.
        format: int64
        type: integer
    type: object
  BrokerCollections:
    properties:
      certAuthorities:
        $ref: '#/definitions/BrokerCollectionsCertauthorities'
      dmrClusters:
        $ref: '#/definitions/BrokerCollectionsDmrclusters'
      msgVpns:
        $ref: '#/definitions/BrokerCollectionsMsgvpns'
      virtualHostnames:
        $ref: '#/definitions/BrokerCollectionsVirtualhostnames'
    type: object
  BrokerCollectionsCertauthorities:
    properties:
      count:
        description: The total number of objects in the certAuthorities collection.
        format: int64
        type: integer
    type: object
  BrokerCollectionsDmrclusters:
    properties:
      count:
        description: The total number of objects in the dmrClusters collection. Available
          since 2.11.
        format: int64
        type: integer
    type: object
  BrokerCollectionsMsgvpns:
    properties:
      count:
        description: The total number of objects in the msgVpns collection. Available
          since 2.11.
        format: int64
        type: integer
    type: object
  BrokerCollectionsVirtualhostnames:
    properties:
      count:
        description: The total number of objects in the virtualHostnames collection.
          Available since 2.17.
        format: int64
        type: integer
    type: object
  BrokerLinks:
    properties:
      aboutUri:
        description: The URI of this Broker's About object.
        type: string
      certAuthoritiesUri:
        description: The URI of this Broker's collection of Certificate Authority
          objects.
        type: string
      dmrClustersUri:
        description: The URI of this Broker's collection of Cluster objects. Available
          since 2.11.
        type: string
      msgVpnsUri:
        description: The URI of this Broker's collection of Message VPN objects. Available
          since 2.11.
        type: string
      uri:
        description: The URI of this Broker object.
        type: string
      virtualHostnamesUri:
        description: The URI of this Broker's collection of Virtual Hostname objects.
          Available since 2.17.
        type: string
    type: object
  BrokerResponse:
    properties:
      collections:
        $ref: '#/definitions/BrokerCollections'
      data:
        $ref: '#/definitions/Broker'
      links:
        $ref: '#/definitions/BrokerLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  CertAuthoritiesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/CertAuthorityCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/CertAuthority'
        type: array
      links:
        items:
          $ref: '#/definitions/CertAuthorityLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  CertAuthority:
    properties:
      certAuthorityName:
        description: The name of the Certificate Authority.
        type: string
      certContent:
        description: The PEM formatted content for the trusted root certificate of
          a Certificate Authority. Available since 2.17.
        type: string
      crlDayList:
        description: The scheduled CRL refresh day(s), specified as "daily" or a comma-separated
          list of days. Days must be specified as "Sun", "Mon", "Tue", "Wed", "Thu",
          "Fri", or "Sat", with no spaces, and in sorted order from Sunday to Saturday.
        type: string
      crlLastDownloadTime:
        description: The timestamp of the last successful CRL download. This value
          represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      crlLastFailureReason:
        description: The reason for the last CRL failure.
        type: string
      crlLastFailureTime:
        description: The timestamp of the last CRL failure. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      crlNextDownloadTime:
        description: The scheduled time of the next CRL download. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      crlTimeList:
        description: The scheduled CRL refresh time(s), specified as "hourly" or a
          comma-separated list of 24-hour times in the form hh:mm, or h:mm. There
          must be no spaces, and times must be in sorted order from 0:00 to 23:59.
        type: string
      crlUp:
        description: Indicates whether CRL revocation checking is operationally up.
        type: boolean
      crlUrl:
        description: The URL for the CRL source. This is a required attribute for
          CRL to be operational and the URL must be complete with http:// included.
        type: string
      ocspLastFailureReason:
        description: The reason for the last OCSP failure.
        type: string
      ocspLastFailureTime:
        description: The timestamp of the last OCSP failure. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      ocspLastFailureUrl:
        description: The URL involved in the last OCSP failure.
        type: string
      ocspNonResponderCertEnabled:
        description: Indicates whether a non-responder certificate is allowed to sign
          an OCSP response. Typically used with an OCSP override URL in cases where
          a single certificate is used to sign client certificates and OCSP responses.
        type: boolean
      ocspOverrideUrl:
        description: The OCSP responder URL to use for overriding the one supplied
          in the client certificate. The URL must be complete with http:// included.
        type: string
      ocspTimeout:
        description: The timeout in seconds to receive a response from the OCSP responder
          after sending a request or making the initial connection attempt.
        format: int64
        type: integer
      revocationCheckEnabled:
        description: Indicates whether Certificate Authority revocation checking is
          enabled.
        type: boolean
    type: object
  CertAuthorityCollections:
    properties:
      ocspTlsTrustedCommonNames:
        $ref: '#/definitions/CertAuthorityCollectionsOcsptlstrustedcommonnames'
    type: object
  CertAuthorityCollectionsOcsptlstrustedcommonnames:
    properties:
      count:
        description: The total number of objects in the ocspTlsTrustedCommonNames
          collection.
        format: int64
        type: integer
    type: object
  CertAuthorityLinks:
    properties:
      ocspTlsTrustedCommonNamesUri:
        description: The URI of this Certificate Authority's collection of OCSP Responder
          Trusted Common Name objects.
        type: string
      uri:
        description: The URI of this Certificate Authority object.
        type: string
    type: object
  CertAuthorityOcspTlsTrustedCommonName:
    properties:
      certAuthorityName:
        description: The name of the Certificate Authority.
        type: string
      ocspTlsTrustedCommonName:
        description: The expected Trusted Common Name of the OCSP responder remote
          certificate.
        type: string
    type: object
  CertAuthorityOcspTlsTrustedCommonNameCollections:
    properties: {}
    type: object
  CertAuthorityOcspTlsTrustedCommonNameLinks:
    properties:
      uri:
        description: The URI of this OCSP Responder Trusted Common Name object.
        type: string
    type: object
  CertAuthorityOcspTlsTrustedCommonNameResponse:
    properties:
      collections:
        $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNameCollections'
      data:
        $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonName'
      links:
        $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  CertAuthorityOcspTlsTrustedCommonNamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonName'
        type: array
      links:
        items:
          $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  CertAuthorityResponse:
    properties:
      collections:
        $ref: '#/definitions/CertAuthorityCollections'
      data:
        $ref: '#/definitions/CertAuthority'
      links:
        $ref: '#/definitions/CertAuthorityLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrCluster:
    properties:
      authenticationBasicEnabled:
        description: Indicates whether basic authentication is enabled for Cluster
          Links.
        type: boolean
      authenticationBasicType:
        description: 'The type of basic authentication to use for Cluster Links. The
          allowed values and their meaning are:


          <pre>

          "internal" - Use locally configured password.

          "none" - No authentication.

          </pre>

          '
        enum:
        - internal
        - none
        type: string
      authenticationClientCertEnabled:
        description: Indicates whether client certificate authentication is enabled
          for Cluster Links.
        type: boolean
      directOnlyEnabled:
        description: Indicates whether this cluster only supports direct messaging.
          If true, guaranteed messages will not be transmitted through the cluster.
        type: boolean
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      enabled:
        description: Indicates whether the Cluster is enabled.
        type: boolean
      failureReason:
        description: The failure reason for the Cluster being down.
        type: string
      nodeName:
        description: The name of this node in the Cluster. This is the name that this
          broker (or redundant group of brokers) is know by to other nodes in the
          Cluster. The name is chosen automatically to be either this broker's Router
          Name or Mate Router Name, depending on which Active Standby Role (primary
          or backup) this broker plays in its redundancy group.
        type: string
      tlsServerCertEnforceTrustedCommonNameEnabled:
        description: Indicates whether the common name provided by the remote broker
          is enforced against the list of trusted common names configured for the
          Link. If enabled, the certificate's common name must match one of the trusted
          common names for the Link to be accepted.
        type: boolean
      tlsServerCertMaxChainDepth:
        description: The maximum allowed depth of a certificate chain. The depth of
          a chain is defined as the number of signing CA certificates that are present
          in the chain back to a trusted self-signed root CA certificate.
        format: int64
        type: integer
      tlsServerCertValidateDateEnabled:
        description: Indicates whether validation of the "Not Before" and "Not After"
          validity dates in the certificate is enabled. When disabled, the certificate
          is accepted even if the certificate is not valid based on these dates.
        type: boolean
      up:
        description: Indicates whether the Cluster is operationally up.
        type: boolean
      uptime:
        description: The amount of time in seconds since the Cluster was up.
        format: int64
        type: integer
    type: object
  DmrClusterCollections:
    properties:
      links:
        $ref: '#/definitions/DmrClusterCollectionsLinks'
      topologyIssues:
        $ref: '#/definitions/DmrClusterCollectionsTopologyissues'
    type: object
  DmrClusterCollectionsLinks:
    properties:
      count:
        description: The total number of objects in the links collection.
        format: int64
        type: integer
    type: object
  DmrClusterCollectionsTopologyissues:
    properties:
      count:
        description: The total number of objects in the topologyIssues collection.
        format: int64
        type: integer
    type: object
  DmrClusterLink:
    properties:
      authenticationScheme:
        description: 'The authentication scheme to be used by the Link which initiates
          connections to the remote node. The allowed values and their meaning are:


          <pre>

          "basic" - Basic Authentication Scheme (via username and password).

          "client-certificate" - Client Certificate Authentication Scheme (via certificate
          file or content).

          </pre>

          '
        enum:
        - basic
        - client-certificate
        type: string
      clientProfileName:
        description: The name of the Client Profile used by the Link.
        type: string
      clientProfileQueueControl1MaxDepth:
        description: The maximum depth of the "Control 1" (C-1) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      clientProfileQueueControl1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Control 1" (C-1) priority queue, regardless of the `clientProfileQueueControl1MaxDepth`
          value.
        format: int32
        type: integer
      clientProfileQueueDirect1MaxDepth:
        description: The maximum depth of the "Direct 1" (D-1) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      clientProfileQueueDirect1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 1" (D-1) priority queue, regardless of the `clientProfileQueueDirect1MaxDepth`
          value.
        format: int32
        type: integer
      clientProfileQueueDirect2MaxDepth:
        description: The maximum depth of the "Direct 2" (D-2) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      clientProfileQueueDirect2MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 2" (D-2) priority queue, regardless of the `clientProfileQueueDirect2MaxDepth`
          value.
        format: int32
        type: integer
      clientProfileQueueDirect3MaxDepth:
        description: The maximum depth of the "Direct 3" (D-3) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      clientProfileQueueDirect3MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 3" (D-3) priority queue, regardless of the `clientProfileQueueDirect3MaxDepth`
          value.
        format: int32
        type: integer
      clientProfileQueueGuaranteed1MaxDepth:
        description: The maximum depth of the "Guaranteed 1" (G-1) priority queue,
          in work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      clientProfileQueueGuaranteed1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Guaranteed 1" (G-3) priority queue, regardless of the `clientProfileQueueGuaranteed1MaxDepth`
          value.
        format: int32
        type: integer
      clientProfileTcpCongestionWindowSize:
        description: The TCP initial congestion window size, in multiples of the TCP
          Maximum Segment Size (MSS). Changing the value from its default of 2 results
          in non-compliance with RFC 2581. Contact Solace Support before changing
          this value.
        format: int64
        type: integer
      clientProfileTcpKeepaliveCount:
        description: The number of TCP keepalive retransmissions to be carried out
          before declaring that the remote end is not available.
        format: int64
        type: integer
      clientProfileTcpKeepaliveIdleTime:
        description: The amount of time a connection must remain idle before TCP begins
          sending keepalive probes, in seconds.
        format: int64
        type: integer
      clientProfileTcpKeepaliveInterval:
        description: The amount of time between TCP keepalive retransmissions when
          no acknowledgement is received, in seconds.
        format: int64
        type: integer
      clientProfileTcpMaxSegmentSize:
        description: The TCP maximum segment size, in kilobytes. Changes are applied
          to all existing connections.
        format: int64
        type: integer
      clientProfileTcpMaxWindowSize:
        description: The TCP maximum window size, in kilobytes. Changes are applied
          to all existing connections.
        format: int64
        type: integer
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      egressFlowWindowSize:
        description: The number of outstanding guaranteed messages that can be sent
          over the Link before acknowledgement is received by the sender.
        format: int64
        type: integer
      enabled:
        description: Indicates whether the Link is enabled. When disabled, subscription
          sets of this and the remote node are not kept up-to-date, and messages are
          not exchanged with the remote node. Published guaranteed messages will be
          queued up for future delivery based on current subscription sets.
        type: boolean
      failureReason:
        description: The failure reason for the Link being down.
        type: string
      initiator:
        description: 'The initiator of the Link''s TCP connections. The allowed values
          and their meaning are:


          <pre>

          "lexical" - The "higher" node-name initiates.

          "local" - The local node initiates.

          "remote" - The remote node initiates.

          </pre>

          '
        enum:
        - lexical
        - local
        - remote
        type: string
      queueDeadMsgQueue:
        description: The name of the Dead Message Queue (DMQ) used by the Queue for
          discarded messages.
        type: string
      queueEventSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      queueMaxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow for the Queue.
        format: int64
        type: integer
      queueMaxMsgSpoolUsage:
        description: The maximum message spool usage by the Queue (quota), in megabytes
          (MB).
        format: int64
        type: integer
      queueMaxRedeliveryCount:
        description: The maximum number of times the Queue will attempt redelivery
          of a message prior to it being discarded or moved to the DMQ. A value of
          0 means to retry forever.
        format: int64
        type: integer
      queueMaxTtl:
        description: The maximum time in seconds a message can stay in the Queue when
          `queueRespectTtlEnabled` is `true`. A message expires when the lesser of
          the sender assigned time-to-live (TTL) in the message and the `queueMaxTtl`
          configured for the Queue, is exceeded. A value of 0 disables expiry.
        format: int64
        type: integer
      queueRejectMsgToSenderOnDiscardBehavior:
        description: 'Determines when to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs cause the message
          to not be delivered to any destination and Transacted Session commits to
          fail. The allowed values and their meaning are:


          <pre>

          "always" - Always return a negative acknowledgment (NACK) to the sending
          client on message discard.

          "when-queue-enabled" - Only return a negative acknowledgment (NACK) to the
          sending client on message discard when the Queue is enabled.

          "never" - Never return a negative acknowledgment (NACK) to the sending client
          on message discard.

          </pre>

          '
        enum:
        - always
        - when-queue-enabled
        - never
        type: string
      queueRespectTtlEnabled:
        description: Indicates whether the the time-to-live (TTL) for messages in
          the Queue is respected. When enabled, expired messages are discarded or
          moved to the DMQ.
        type: boolean
      remoteClusterName:
        description: The cluster name of the remote node. Available since 2.17.
        type: string
      remoteNodeName:
        description: The name of the node at the remote end of the Link.
        type: string
      span:
        description: 'The span of the Link, either internal or external. Internal
          Links connect nodes within the same Cluster. External Links connect nodes
          within different Clusters. The allowed values and their meaning are:


          <pre>

          "internal" - Link to same cluster.

          "external" - Link to other cluster.

          </pre>

          '
        enum:
        - internal
        - external
        type: string
      transportCompressedEnabled:
        description: Indicates whether compression is enabled on the Link.
        type: boolean
      transportTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled on the Link.
        type: boolean
      up:
        description: Indicates whether the Link is operationally up.
        type: boolean
      uptime:
        description: The amount of time in seconds since the Link was up.
        format: int64
        type: integer
    type: object
  DmrClusterLinkChannel:
    properties:
      bridgeName:
        description: The name of the Bridge used by the Channel.
        type: string
      clientName:
        description: The name of the Client used by the Channel.
        type: string
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      establisher:
        description: Indicates whether the local node established the Channel.
        type: boolean
      failureReason:
        description: The failure reason for the Channel being down.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      queueName:
        description: The name of the Queue used by the Channel.
        type: string
      remoteAddress:
        description: The FQDN or IP address (and optional port) of the remote node.
        type: string
      remoteNodeName:
        description: The name of the node at the remote end of the Link.
        type: string
      up:
        description: Indicates whether the Channel is operationally up.
        type: boolean
      uptime:
        description: The amount of time in seconds since the Channel was up.
        format: int64
        type: integer
    type: object
  DmrClusterLinkChannelCollections:
    properties: {}
    type: object
  DmrClusterLinkChannelLinks:
    properties:
      uri:
        description: The URI of this Cluster Link Channels object.
        type: string
    type: object
  DmrClusterLinkChannelResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterLinkChannelCollections'
      data:
        $ref: '#/definitions/DmrClusterLinkChannel'
      links:
        $ref: '#/definitions/DmrClusterLinkChannelLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkChannelsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterLinkChannelCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrClusterLinkChannel'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterLinkChannelLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkCollections:
    properties:
      channels:
        $ref: '#/definitions/DmrClusterLinkCollectionsChannels'
      remoteAddresses:
        $ref: '#/definitions/DmrClusterLinkCollectionsRemoteaddresses'
      tlsTrustedCommonNames:
        $ref: '#/definitions/DmrClusterLinkCollectionsTlstrustedcommonnames'
    type: object
  DmrClusterLinkCollectionsChannels:
    properties:
      count:
        description: The total number of objects in the channels collection.
        format: int64
        type: integer
    type: object
  DmrClusterLinkCollectionsRemoteaddresses:
    properties:
      count:
        description: The total number of objects in the remoteAddresses collection.
        format: int64
        type: integer
    type: object
  DmrClusterLinkCollectionsTlstrustedcommonnames:
    properties:
      count:
        description: The total number of objects in the tlsTrustedCommonNames collection.
        format: int64
        type: integer
    type: object
  DmrClusterLinkLinks:
    properties:
      channelsUri:
        description: The URI of this Link's collection of Cluster Link Channels objects.
        type: string
      remoteAddressesUri:
        description: The URI of this Link's collection of Remote Address objects.
        type: string
      tlsTrustedCommonNamesUri:
        description: The URI of this Link's collection of Trusted Common Name objects.
        type: string
      uri:
        description: The URI of this Link object.
        type: string
    type: object
  DmrClusterLinkRemoteAddress:
    properties:
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      remoteAddress:
        description: 'The FQDN or IP address (and optional port) of the remote node.
          If a port is not provided, it will vary based on the transport encoding:
          55555 (plain-text), 55443 (encrypted), or 55003 (compressed).'
        type: string
      remoteNodeName:
        description: The name of the node at the remote end of the Link.
        type: string
    type: object
  DmrClusterLinkRemoteAddressCollections:
    properties: {}
    type: object
  DmrClusterLinkRemoteAddressLinks:
    properties:
      uri:
        description: The URI of this Remote Address object.
        type: string
    type: object
  DmrClusterLinkRemoteAddressResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterLinkRemoteAddressCollections'
      data:
        $ref: '#/definitions/DmrClusterLinkRemoteAddress'
      links:
        $ref: '#/definitions/DmrClusterLinkRemoteAddressLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkRemoteAddressesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterLinkRemoteAddressCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrClusterLinkRemoteAddress'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterLinkRemoteAddressLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterLinkCollections'
      data:
        $ref: '#/definitions/DmrClusterLink'
      links:
        $ref: '#/definitions/DmrClusterLinkLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkTlsTrustedCommonName:
    properties:
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      remoteNodeName:
        description: The name of the node at the remote end of the Link.
        type: string
      tlsTrustedCommonName:
        description: The expected trusted common name of the remote certificate.
        type: string
    type: object
  DmrClusterLinkTlsTrustedCommonNameCollections:
    properties: {}
    type: object
  DmrClusterLinkTlsTrustedCommonNameLinks:
    properties:
      uri:
        description: The URI of this Trusted Common Name object.
        type: string
    type: object
  DmrClusterLinkTlsTrustedCommonNameResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNameCollections'
      data:
        $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonName'
      links:
        $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinkTlsTrustedCommonNamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonName'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterLinks:
    properties:
      linksUri:
        description: The URI of this Cluster's collection of Link objects.
        type: string
      topologyIssuesUri:
        description: The URI of this Cluster's collection of Cluster Topology Issue
          objects.
        type: string
      uri:
        description: The URI of this Cluster object.
        type: string
    type: object
  DmrClusterLinksResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterLinkCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrClusterLink'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterLinkLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterCollections'
      data:
        $ref: '#/definitions/DmrCluster'
      links:
        $ref: '#/definitions/DmrClusterLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterTopologyIssue:
    properties:
      dmrClusterName:
        description: The name of the Cluster.
        type: string
      topologyIssue:
        description: The topology issue discovered in the Cluster. A topology issue
          indicates incorrect or inconsistent configuration within the DMR network.
          Such issues will cause messages to be misdelivered or lost.
        type: string
    type: object
  DmrClusterTopologyIssueCollections:
    properties: {}
    type: object
  DmrClusterTopologyIssueLinks:
    properties:
      uri:
        description: The URI of this Cluster Topology Issue object.
        type: string
    type: object
  DmrClusterTopologyIssueResponse:
    properties:
      collections:
        $ref: '#/definitions/DmrClusterTopologyIssueCollections'
      data:
        $ref: '#/definitions/DmrClusterTopologyIssue'
      links:
        $ref: '#/definitions/DmrClusterTopologyIssueLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClusterTopologyIssuesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterTopologyIssueCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrClusterTopologyIssue'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterTopologyIssueLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  DmrClustersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/DmrClusterCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/DmrCluster'
        type: array
      links:
        items:
          $ref: '#/definitions/DmrClusterLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  EventThreshold:
    properties:
      clearPercent:
        description: The clear threshold for the value of this counter as a percentage
          of its maximum value. Falling below this value will trigger a corresponding
          event.
        format: int64
        type: integer
      clearValue:
        description: The clear threshold for the absolute value of this counter. Falling
          below this value will trigger a corresponding event.
        format: int64
        type: integer
      setPercent:
        description: The set threshold for the value of this counter as a percentage
          of its maximum value. Exceeding this value will trigger a corresponding
          event.
        format: int64
        type: integer
      setValue:
        description: The set threshold for the absolute value of this counter. Exceeding
          this value will trigger a corresponding event.
        format: int64
        type: integer
    type: object
  EventThresholdByPercent:
    properties:
      clearPercent:
        description: The clear threshold for the value of this counter as a percentage
          of its maximum value. Falling below this value will trigger a corresponding
          event.
        format: int64
        type: integer
      setPercent:
        description: The set threshold for the value of this counter as a percentage
          of its maximum value. Exceeding this value will trigger a corresponding
          event.
        format: int64
        type: integer
    type: object
  EventThresholdByValue:
    properties:
      clearValue:
        description: The clear threshold for the absolute value of this counter or
          rate. Falling below this value will trigger a corresponding event.
        format: int64
        type: integer
      setValue:
        description: The set threshold for the absolute value of this counter or rate.
          Exceeding this value will trigger a corresponding event.
        format: int64
        type: integer
    type: object
  MsgVpn:
    properties:
      alias:
        description: The name of another Message VPN which this Message VPN is an
          alias for. Available since 2.14.
        type: string
      authenticationBasicEnabled:
        description: Indicates whether basic authentication is enabled for clients
          connecting to the Message VPN.
        type: boolean
      authenticationBasicProfileName:
        description: The name of the RADIUS or LDAP Profile to use for basic authentication.
        type: string
      authenticationBasicRadiusDomain:
        description: The RADIUS domain to use for basic authentication.
        type: string
      authenticationBasicType:
        description: 'The type of basic authentication to use for clients connecting
          to the Message VPN. The allowed values and their meaning are:


          <pre>

          "internal" - Internal database. Authentication is against Client Usernames.

          "ldap" - LDAP authentication. An LDAP profile name must be provided.

          "radius" - RADIUS authentication. A RADIUS profile name must be provided.

          "none" - No authentication. Anonymous login allowed.

          </pre>

          '
        enum:
        - internal
        - ldap
        - radius
        - none
        type: string
      authenticationClientCertAllowApiProvidedUsernameEnabled:
        description: Indicates whether a client is allowed to specify a Client Username
          via the API connect method. When disabled, the certificate CN (Common Name)
          is always used.
        type: boolean
      authenticationClientCertEnabled:
        description: Indicates whether client certificate authentication is enabled
          in the Message VPN.
        type: boolean
      authenticationClientCertMaxChainDepth:
        description: The maximum depth for a client certificate chain. The depth of
          a chain is defined as the number of signing CA certificates that are present
          in the chain back to a trusted self-signed root CA certificate.
        format: int64
        type: integer
      authenticationClientCertRevocationCheckMode:
        description: 'The desired behavior for client certificate revocation checking.
          The allowed values and their meaning are:


          <pre>

          "allow-all" - Allow the client to authenticate, the result of client certificate
          revocation check is ignored.

          "allow-unknown" - Allow the client to authenticate even if the revocation
          status of his certificate cannot be determined.

          "allow-valid" - Allow the client to authenticate only when the revocation
          check returned an explicit positive response.

          </pre>

          '
        enum:
        - allow-all
        - allow-unknown
        - allow-valid
        type: string
      authenticationClientCertUsernameSource:
        description: 'The field from the client certificate to use as the client username.
          The allowed values and their meaning are:


          <pre>

          "common-name" - The username is extracted from the certificate''s Common
          Name.

          "subject-alternate-name-msupn" - The username is extracted from the certificate''s
          Other Name type of the Subject Alternative Name and must have the msUPN
          signature.

          </pre>

          '
        enum:
        - common-name
        - subject-alternate-name-msupn
        type: string
      authenticationClientCertValidateDateEnabled:
        description: Indicates whether the "Not Before" and "Not After" validity dates
          in the client certificate are checked.
        type: boolean
      authenticationKerberosAllowApiProvidedUsernameEnabled:
        description: Indicates whether a client is allowed to specify a Client Username
          via the API connect method. When disabled, the Kerberos Principal name is
          always used.
        type: boolean
      authenticationKerberosEnabled:
        description: Indicates whether Kerberos authentication is enabled in the Message
          VPN.
        type: boolean
      authenticationOauthDefaultProviderName:
        description: The name of the provider to use when the client does not supply
          a provider name. Available since 2.13.
        type: string
      authenticationOauthEnabled:
        description: Indicates whether OAuth authentication is enabled. Available
          since 2.13.
        type: boolean
      authorizationLdapGroupMembershipAttributeName:
        description: The name of the attribute that is retrieved from the LDAP server
          as part of the LDAP search when authorizing a client connecting to the Message
          VPN.
        type: string
      authorizationLdapTrimClientUsernameDomainEnabled:
        description: Indicates whether client-username domain trimming for LDAP lookups
          of client connections is enabled. Available since 2.13.
        type: boolean
      authorizationProfileName:
        description: The name of the LDAP Profile to use for client authorization.
        type: string
      authorizationType:
        description: 'The type of authorization to use for clients connecting to the
          Message VPN. The allowed values and their meaning are:


          <pre>

          "ldap" - LDAP authorization.

          "internal" - Internal authorization.

          </pre>

          '
        enum:
        - ldap
        - internal
        type: string
      averageRxByteRate:
        description: The one minute average of the message rate received by the Message
          VPN, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageRxCompressedByteRate:
        description: The one minute average of the compressed message rate received
          by the Message VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received by the Message
          VPN, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      averageRxUncompressedByteRate:
        description: The one minute average of the uncompressed message rate received
          by the Message VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted by the
          Message VPN, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageTxCompressedByteRate:
        description: The one minute average of the compressed message rate transmitted
          by the Message VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted by the
          Message VPN, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      averageTxUncompressedByteRate:
        description: The one minute average of the uncompressed message rate transmitted
          by the Message VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      bridgingTlsServerCertEnforceTrustedCommonNameEnabled:
        description: Indicates whether the Common Name (CN) in the server certificate
          from the remote broker is validated for the Bridge.
        type: boolean
      bridgingTlsServerCertMaxChainDepth:
        description: The maximum depth for a server certificate chain. The depth of
          a chain is defined as the number of signing CA certificates that are present
          in the chain back to a trusted self-signed root CA certificate.
        format: int64
        type: integer
      bridgingTlsServerCertValidateDateEnabled:
        description: Indicates whether the "Not Before" and "Not After" validity dates
          in the server certificate are checked.
        type: boolean
      configSyncLocalKey:
        description: The key for the config sync table of the local Message VPN. Available
          since 2.12.
        type: string
      configSyncLocalLastResult:
        description: The result of the last operation on the config sync table of
          the local Message VPN. Available since 2.12.
        type: string
      configSyncLocalRole:
        description: "The role of the config sync table of the local Message VPN.\
          \ The allowed values and their meaning are:\n\n<pre>\n\"unknown\" - The\
          \ role is unknown.\n\"primary\" - Acts as the primary source of config data.\n\
          \"replica\" - Acts as a replica of the primary config data.\n</pre>\n Available\
          \ since 2.12."
        type: string
      configSyncLocalState:
        description: "The state of the config sync table of the local Message VPN.\
          \ The allowed values and their meaning are:\n\n<pre>\n\"unknown\" - The\
          \ state is unknown.\n\"in-sync\" - The config data is synchronized between\
          \ Message VPNs.\n\"reconciling\" - The config data is reconciling between\
          \ Message VPNs.\n\"blocked\" - The config data is blocked from reconciling\
          \ due to an error.\n\"out-of-sync\" - The config data is out of sync between\
          \ Message VPNs.\n\"down\" - The state is down due to configuration.\n</pre>\n\
          \ Available since 2.12."
        type: string
      configSyncLocalTimeInState:
        description: The amount of time in seconds the config sync table of the local
          Message VPN has been in the current state. Available since 2.12.
        format: int32
        type: integer
      controlRxByteCount:
        description: The amount of client control messages received from clients by
          the Message VPN, in bytes (B). Available since 2.13.
        format: int64
        type: integer
      controlRxMsgCount:
        description: The number of client control messages received from clients by
          the Message VPN. Available since 2.13.
        format: int64
        type: integer
      controlTxByteCount:
        description: The amount of client control messages transmitted to clients
          by the Message VPN, in bytes (B). Available since 2.13.
        format: int64
        type: integer
      controlTxMsgCount:
        description: The number of client control messages transmitted to clients
          by the Message VPN. Available since 2.13.
        format: int64
        type: integer
      counter:
        $ref: '#/definitions/MsgVpnCounter'
      dataRxByteCount:
        description: The amount of client data messages received from clients by the
          Message VPN, in bytes (B). Available since 2.13.
        format: int64
        type: integer
      dataRxMsgCount:
        description: The number of client data messages received from clients by the
          Message VPN. Available since 2.13.
        format: int64
        type: integer
      dataTxByteCount:
        description: The amount of client data messages transmitted to clients by
          the Message VPN, in bytes (B). Available since 2.13.
        format: int64
        type: integer
      dataTxMsgCount:
        description: The number of client data messages transmitted to clients by
          the Message VPN. Available since 2.13.
        format: int64
        type: integer
      discardedRxMsgCount:
        description: The number of messages discarded during reception by the Message
          VPN. Available since 2.13.
        format: int32
        type: integer
      discardedTxMsgCount:
        description: The number of messages discarded during transmission by the Message
          VPN. Available since 2.13.
        format: int32
        type: integer
      distributedCacheManagementEnabled:
        description: Indicates whether managing of cache instances over the message
          bus is enabled in the Message VPN.
        type: boolean
      dmrEnabled:
        description: Indicates whether Dynamic Message Routing (DMR) is enabled for
          the Message VPN.
        type: boolean
      enabled:
        description: Indicates whether the Message VPN is enabled.
        type: boolean
      eventConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventEgressFlowCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventEgressMsgRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      eventEndpointCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventIngressFlowCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventIngressMsgRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      eventLargeMsgThreshold:
        description: Exceeding this message size in kilobytes (KB) triggers a corresponding
          Event in the Message VPN.
        format: int64
        type: integer
      eventLogTag:
        description: The value of the prefix applied to all published Events in the
          Message VPN.
        type: string
      eventMsgSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      eventPublishClientEnabled:
        description: Indicates whether client Events are published in the Message
          VPN.
        type: boolean
      eventPublishMsgVpnEnabled:
        description: Indicates whether Message VPN Events are published in the Message
          VPN.
        type: boolean
      eventPublishSubscriptionMode:
        description: 'The mode of subscription Events published in the Message VPN.
          The allowed values and their meaning are:


          <pre>

          "off" - Disable client level event message publishing.

          "on-with-format-v1" - Enable client level event message publishing with
          format v1.

          "on-with-no-unsubscribe-events-on-disconnect-format-v1" - As "on-with-format-v1",
          but unsubscribe events are not generated when a client disconnects. Unsubscribe
          events are still raised when a client explicitly unsubscribes from its subscriptions.

          "on-with-format-v2" - Enable client level event message publishing with
          format v2.

          "on-with-no-unsubscribe-events-on-disconnect-format-v2" - As "on-with-format-v2",
          but unsubscribe events are not generated when a client disconnects. Unsubscribe
          events are still raised when a client explicitly unsubscribes from its subscriptions.

          </pre>

          '
        enum:
        - 'off'
        - on-with-format-v1
        - on-with-no-unsubscribe-events-on-disconnect-format-v1
        - on-with-format-v2
        - on-with-no-unsubscribe-events-on-disconnect-format-v2
        type: string
      eventPublishTopicFormatMqttEnabled:
        description: Indicates whether Message VPN Events are published in the MQTT
          format.
        type: boolean
      eventPublishTopicFormatSmfEnabled:
        description: Indicates whether Message VPN Events are published in the SMF
          format.
        type: boolean
      eventServiceAmqpConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceMqttConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceRestIncomingConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceSmfConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceWebConnectionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventSubscriptionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventTransactedSessionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventTransactionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      exportSubscriptionsEnabled:
        description: Indicates whether exports of subscriptions to other routers in
          the network over neighbour links is enabled in the Message VPN.
        type: boolean
      failureReason:
        description: The reason for the Message VPN failure.
        type: string
      jndiEnabled:
        description: Indicates whether the JNDI access for clients is enabled in the
          Message VPN.
        type: boolean
      loginRxMsgCount:
        description: The number of login request messages received by the Message
          VPN. Available since 2.13.
        format: int64
        type: integer
      loginTxMsgCount:
        description: The number of login response messages transmitted by the Message
          VPN. Available since 2.13.
        format: int64
        type: integer
      maxConnectionCount:
        description: The maximum number of client connections to the Message VPN.
        format: int64
        type: integer
      maxEffectiveEndpointCount:
        description: The effective maximum number of Queues and Topic Endpoints allowed
          in the Message VPN.
        format: int32
        type: integer
      maxEffectiveRxFlowCount:
        description: The effective maximum number of receive flows allowed in the
          Message VPN.
        format: int32
        type: integer
      maxEffectiveSubscriptionCount:
        description: The effective maximum number of subscriptions allowed in the
          Message VPN.
        format: int64
        type: integer
      maxEffectiveTransactedSessionCount:
        description: The effective maximum number of transacted sessions allowed in
          the Message VPN.
        format: int32
        type: integer
      maxEffectiveTransactionCount:
        description: The effective maximum number of transactions allowed in the Message
          VPN.
        format: int32
        type: integer
      maxEffectiveTxFlowCount:
        description: The effective maximum number of transmit flows allowed in the
          Message VPN.
        format: int32
        type: integer
      maxEgressFlowCount:
        description: The maximum number of transmit flows that can be created in the
          Message VPN.
        format: int64
        type: integer
      maxEndpointCount:
        description: The maximum number of Queues and Topic Endpoints that can be
          created in the Message VPN.
        format: int64
        type: integer
      maxIngressFlowCount:
        description: The maximum number of receive flows that can be created in the
          Message VPN.
        format: int64
        type: integer
      maxMsgSpoolUsage:
        description: The maximum message spool usage by the Message VPN, in megabytes.
        format: int64
        type: integer
      maxSubscriptionCount:
        description: The maximum number of local client subscriptions (both primary
          and backup) that can be added to the Message VPN.
        format: int64
        type: integer
      maxTransactedSessionCount:
        description: The maximum number of transacted sessions that can be created
          in the Message VPN.
        format: int64
        type: integer
      maxTransactionCount:
        description: The maximum number of transactions that can be created in the
          Message VPN.
        format: int64
        type: integer
      mqttRetainMaxMemory:
        description: The maximum total memory usage of the MQTT Retain feature for
          this Message VPN, in MB. If the maximum memory is reached, any arriving
          retain messages that require more memory are discarded. A value of -1 indicates
          that the memory is bounded only by the global max memory limit. A value
          of 0 prevents MQTT Retain from becoming operational.
        format: int32
        type: integer
      msgReplayActiveCount:
        description: The number of message replays that are currently active in the
          Message VPN.
        format: int32
        type: integer
      msgReplayFailedCount:
        description: The number of message replays that are currently failed in the
          Message VPN.
        format: int32
        type: integer
      msgReplayInitializingCount:
        description: The number of message replays that are currently initializing
          in the Message VPN.
        format: int32
        type: integer
      msgReplayPendingCompleteCount:
        description: The number of message replays that are pending complete in the
          Message VPN.
        format: int32
        type: integer
      msgSpoolMsgCount:
        description: The current number of messages spooled (persisted in the Message
          Spool) in the Message VPN. Available since 2.14.
        format: int64
        type: integer
      msgSpoolRxMsgCount:
        description: The number of guaranteed messages received by the Message VPN.
          Available since 2.13.
        format: int64
        type: integer
      msgSpoolTxMsgCount:
        description: The number of guaranteed messages transmitted by the Message
          VPN. One message to multiple clients is counted as one message. Available
          since 2.13.
        format: int64
        type: integer
      msgSpoolUsage:
        description: The current message spool usage by the Message VPN, in bytes
          (B).
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      rate:
        $ref: '#/definitions/MsgVpnRate'
      replicationAckPropagationIntervalMsgCount:
        description: The acknowledgement (ACK) propagation interval for the replication
          Bridge, in number of replicated messages. Available since 2.12.
        format: int64
        type: integer
      replicationActiveAckPropTxMsgCount:
        description: The number of acknowledgement messages propagated to the replication
          standby remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveAsyncQueuedMsgCount:
        description: The number of async messages queued to the replication standby
          remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveLocallyConsumedMsgCount:
        description: The number of messages consumed in the replication active local
          Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveMateFlowCongestedPeakTime:
        description: The peak amount of time in seconds the message flow has been
          congested to the replication standby remote Message VPN. Available since
          2.12.
        format: int32
        type: integer
      replicationActiveMateFlowNotCongestedPeakTime:
        description: The peak amount of time in seconds the message flow has not been
          congested to the replication standby remote Message VPN. Available since
          2.12.
        format: int32
        type: integer
      replicationActivePromotedQueuedMsgCount:
        description: The number of promoted messages queued to the replication standby
          remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveReconcileRequestRxMsgCount:
        description: The number of reconcile request messages received from the replication
          standby remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveSyncEligiblePeakTime:
        description: The peak amount of time in seconds sync replication has been
          eligible to the replication standby remote Message VPN. Available since
          2.12.
        format: int32
        type: integer
      replicationActiveSyncIneligiblePeakTime:
        description: The peak amount of time in seconds sync replication has been
          ineligible to the replication standby remote Message VPN. Available since
          2.12.
        format: int32
        type: integer
      replicationActiveSyncQueuedAsAsyncMsgCount:
        description: The number of sync messages queued as async to the replication
          standby remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveSyncQueuedMsgCount:
        description: The number of sync messages queued to the replication standby
          remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationActiveTransitionToSyncIneligibleCount:
        description: The number of sync replication ineligible transitions to the
          replication standby remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationBridgeAuthenticationBasicClientUsername:
        description: The Client Username the replication Bridge uses to login to the
          remote Message VPN. Available since 2.12.
        type: string
      replicationBridgeAuthenticationScheme:
        description: "The authentication scheme for the replication Bridge in the\
          \ Message VPN. The allowed values and their meaning are:\n\n<pre>\n\"basic\"\
          \ - Basic Authentication Scheme (via username and password).\n\"client-certificate\"\
          \ - Client Certificate Authentication Scheme (via certificate file or content).\n\
          </pre>\n Available since 2.12."
        enum:
        - basic
        - client-certificate
        type: string
      replicationBridgeBoundToQueue:
        description: Indicates whether the local replication Bridge is bound to the
          Queue in the remote Message VPN. Available since 2.12.
        type: boolean
      replicationBridgeCompressedDataEnabled:
        description: Indicates whether compression is used for the replication Bridge.
          Available since 2.12.
        type: boolean
      replicationBridgeEgressFlowWindowSize:
        description: The size of the window used for guaranteed messages published
          to the replication Bridge, in messages. Available since 2.12.
        format: int64
        type: integer
      replicationBridgeName:
        description: The name of the local replication Bridge in the Message VPN.
          Available since 2.12.
        type: string
      replicationBridgeRetryDelay:
        description: The number of seconds that must pass before retrying the replication
          Bridge connection. Available since 2.12.
        format: int64
        type: integer
      replicationBridgeTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for the replication
          Bridge connection. Available since 2.12.
        type: boolean
      replicationBridgeUnidirectionalClientProfileName:
        description: The Client Profile for the unidirectional replication Bridge
          in the Message VPN. It is used only for the TCP parameters. Available since
          2.12.
        type: string
      replicationBridgeUp:
        description: Indicates whether the local replication Bridge is operationally
          up in the Message VPN. Available since 2.12.
        type: boolean
      replicationEnabled:
        description: Indicates whether replication is enabled for the Message VPN.
          Available since 2.12.
        type: boolean
      replicationQueueBound:
        description: Indicates whether the remote replication Bridge is bound to the
          Queue in the Message VPN. Available since 2.12.
        type: boolean
      replicationQueueMaxMsgSpoolUsage:
        description: The maximum message spool usage by the replication Bridge local
          Queue (quota), in megabytes. Available since 2.12.
        format: int64
        type: integer
      replicationQueueRejectMsgToSenderOnDiscardEnabled:
        description: Indicates whether messages discarded on this replication Bridge
          Queue are rejected back to the sender. Available since 2.12.
        type: boolean
      replicationRejectMsgWhenSyncIneligibleEnabled:
        description: Indicates whether guaranteed messages published to synchronously
          replicated Topics are rejected back to the sender when synchronous replication
          becomes ineligible. Available since 2.12.
        type: boolean
      replicationRemoteBridgeName:
        description: The name of the remote replication Bridge in the Message VPN.
          Available since 2.12.
        type: string
      replicationRemoteBridgeUp:
        description: Indicates whether the remote replication Bridge is operationally
          up in the Message VPN. Available since 2.12.
        type: boolean
      replicationRole:
        description: "The replication role for the Message VPN. The allowed values\
          \ and their meaning are:\n\n<pre>\n\"active\" - Assume the Active role in\
          \ replication for the Message VPN.\n\"standby\" - Assume the Standby role\
          \ in replication for the Message VPN.\n</pre>\n Available since 2.12."
        enum:
        - active
        - standby
        type: string
      replicationStandbyAckPropOutOfSeqRxMsgCount:
        description: The number of acknowledgement messages received out of sequence
          from the replication active remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyAckPropRxMsgCount:
        description: The number of acknowledgement messages received from the replication
          active remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyReconcileRequestTxMsgCount:
        description: The number of reconcile request messages transmitted to the replication
          active remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyRxMsgCount:
        description: The number of messages received from the replication active remote
          Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyTransactionRequestCount:
        description: The number of transaction requests received from the replication
          active remote Message VPN. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyTransactionRequestFailureCount:
        description: The number of transaction requests received from the replication
          active remote Message VPN that failed. Available since 2.12.
        format: int64
        type: integer
      replicationStandbyTransactionRequestSuccessCount:
        description: The number of transaction requests received from the replication
          active remote Message VPN that succeeded. Available since 2.12.
        format: int64
        type: integer
      replicationSyncEligible:
        description: Indicates whether sync replication is eligible in the Message
          VPN. Available since 2.12.
        type: boolean
      replicationTransactionMode:
        description: "Indicates whether synchronous or asynchronous replication mode\
          \ is used for all transactions within the Message VPN. The allowed values\
          \ and their meaning are:\n\n<pre>\n\"sync\" - Messages are acknowledged\
          \ when replicated (spooled remotely).\n\"async\" - Messages are acknowledged\
          \ when pending replication (spooled locally).\n</pre>\n Available since\
          \ 2.12."
        enum:
        - sync
        - async
        type: string
      restTlsServerCertEnforceTrustedCommonNameEnabled:
        description: Indicates whether the Common Name (CN) in the server certificate
          from the remote REST Consumer is validated. Deprecated since 2.17. Common
          Name validation has been replaced by Server Certificate Name validation.
        type: boolean
      restTlsServerCertMaxChainDepth:
        description: The maximum depth for a REST Consumer server certificate chain.
          The depth of a chain is defined as the number of signing CA certificates
          that are present in the chain back to a trusted self-signed root CA certificate.
        format: int64
        type: integer
      restTlsServerCertValidateDateEnabled:
        description: Indicates whether the "Not Before" and "Not After" validity dates
          in the REST Consumer server certificate are checked.
        type: boolean
      restTlsServerCertValidateNameEnabled:
        description: Enable or disable the TLS authentication mechanism of verifying
          the name used to connect to the remote REST Consumer. If enabled, the name
          used to connect to the remote REST Consumer is checked against the names
          specified in the certificate returned by the remote router. Common Name
          validation is not performed if Server Certificate Name Validation is enabled,
          even if Common Name validation is also enabled. Available since 2.17.
        type: boolean
      rxByteCount:
        description: The amount of messages received from clients by the Message VPN,
          in bytes (B). Available since 2.12.
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received by the Message VPN, in bytes
          per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      rxCompressedByteCount:
        description: The amount of compressed messages received by the Message VPN,
          in bytes (B). Available since 2.12.
        format: int64
        type: integer
      rxCompressedByteRate:
        description: The current compressed message rate received by the Message VPN,
          in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      rxCompressionRatio:
        description: The compression ratio for messages received by the message VPN.
          Available since 2.12.
        type: string
      rxMsgCount:
        description: The number of messages received from clients by the Message VPN.
          Available since 2.12.
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received by the Message VPN, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      rxUncompressedByteCount:
        description: The amount of uncompressed messages received by the Message VPN,
          in bytes (B). Available since 2.12.
        format: int64
        type: integer
      rxUncompressedByteRate:
        description: The current uncompressed message rate received by the Message
          VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      sempOverMsgBusAdminClientEnabled:
        description: Indicates whether the "admin" level "client" commands are enabled
          for SEMP over the message bus in the Message VPN.
        type: boolean
      sempOverMsgBusAdminDistributedCacheEnabled:
        description: Indicates whether the "admin" level "Distributed Cache" commands
          are enabled for SEMP over the message bus in the Message VPN.
        type: boolean
      sempOverMsgBusAdminEnabled:
        description: Indicates whether the "admin" level commands are enabled for
          SEMP over the message bus in the Message VPN.
        type: boolean
      sempOverMsgBusEnabled:
        description: Indicates whether SEMP over the message bus is enabled in the
          Message VPN.
        type: boolean
      sempOverMsgBusShowEnabled:
        description: Indicates whether the "show" level commands are enabled for SEMP
          over the message bus in the Message VPN.
        type: boolean
      serviceAmqpMaxConnectionCount:
        description: The maximum number of AMQP client connections that can be simultaneously
          connected to the Message VPN. This value may be higher than supported by
          the platform.
        format: int64
        type: integer
      serviceAmqpPlainTextCompressed:
        description: Indicates whether the AMQP Service is compressed in the Message
          VPN.
        type: boolean
      serviceAmqpPlainTextEnabled:
        description: Indicates whether the AMQP Service is enabled in the Message
          VPN.
        type: boolean
      serviceAmqpPlainTextFailureReason:
        description: The reason for the AMQP Service failure in the Message VPN.
        type: string
      serviceAmqpPlainTextListenPort:
        description: The port number for plain-text AMQP clients that connect to the
          Message VPN. The port must be unique across the message backbone. A value
          of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceAmqpPlainTextUp:
        description: Indicates whether the AMQP Service is operationally up in the
          Message VPN.
        type: boolean
      serviceAmqpTlsCompressed:
        description: Indicates whether the TLS related AMQP Service is compressed
          in the Message VPN.
        type: boolean
      serviceAmqpTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for AMQP clients
          in the Message VPN.
        type: boolean
      serviceAmqpTlsFailureReason:
        description: The reason for the TLS related AMQP Service failure in the Message
          VPN.
        type: string
      serviceAmqpTlsListenPort:
        description: The port number for AMQP clients that connect to the Message
          VPN over TLS. The port must be unique across the message backbone. A value
          of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceAmqpTlsUp:
        description: Indicates whether the TLS related AMQP Service is operationally
          up in the Message VPN.
        type: boolean
      serviceMqttMaxConnectionCount:
        description: The maximum number of MQTT client connections that can be simultaneously
          connected to the Message VPN.
        format: int64
        type: integer
      serviceMqttPlainTextCompressed:
        description: Indicates whether the MQTT Service is compressed in the Message
          VPN.
        type: boolean
      serviceMqttPlainTextEnabled:
        description: Indicates whether the MQTT Service is enabled in the Message
          VPN.
        type: boolean
      serviceMqttPlainTextFailureReason:
        description: The reason for the MQTT Service failure in the Message VPN.
        type: string
      serviceMqttPlainTextListenPort:
        description: The port number for plain-text MQTT clients that connect to the
          Message VPN. The port must be unique across the message backbone. A value
          of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceMqttPlainTextUp:
        description: Indicates whether the MQTT Service is operationally up in the
          Message VPN.
        type: boolean
      serviceMqttTlsCompressed:
        description: Indicates whether the TLS related MQTT Service is compressed
          in the Message VPN.
        type: boolean
      serviceMqttTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for MQTT clients
          in the Message VPN.
        type: boolean
      serviceMqttTlsFailureReason:
        description: The reason for the TLS related MQTT Service failure in the Message
          VPN.
        type: string
      serviceMqttTlsListenPort:
        description: The port number for MQTT clients that connect to the Message
          VPN over TLS. The port must be unique across the message backbone. A value
          of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceMqttTlsUp:
        description: Indicates whether the TLS related MQTT Service is operationally
          up in the Message VPN.
        type: boolean
      serviceMqttTlsWebSocketCompressed:
        description: Indicates whether the TLS related Web transport MQTT Service
          is compressed in the Message VPN.
        type: boolean
      serviceMqttTlsWebSocketEnabled:
        description: Indicates whether encryption (TLS) is enabled for MQTT Web clients
          in the Message VPN.
        type: boolean
      serviceMqttTlsWebSocketFailureReason:
        description: The reason for the TLS related Web transport MQTT Service failure
          in the Message VPN.
        type: string
      serviceMqttTlsWebSocketListenPort:
        description: The port number for MQTT clients that connect to the Message
          VPN using WebSocket over TLS. The port must be unique across the message
          backbone. A value of 0 means that the listen-port is unassigned and cannot
          be enabled.
        format: int64
        type: integer
      serviceMqttTlsWebSocketUp:
        description: Indicates whether the TLS related Web transport MQTT Service
          is operationally up in the Message VPN.
        type: boolean
      serviceMqttWebSocketCompressed:
        description: Indicates whether the Web transport related MQTT Service is compressed
          in the Message VPN.
        type: boolean
      serviceMqttWebSocketEnabled:
        description: Indicates whether the Web transport for the SMF Service is enabled
          in the Message VPN.
        type: boolean
      serviceMqttWebSocketFailureReason:
        description: The reason for the Web transport related MQTT Service failure
          in the Message VPN.
        type: string
      serviceMqttWebSocketListenPort:
        description: The port number for plain-text MQTT clients that connect to the
          Message VPN using WebSocket. The port must be unique across the message
          backbone. A value of 0 means that the listen-port is unassigned and cannot
          be enabled.
        format: int64
        type: integer
      serviceMqttWebSocketUp:
        description: Indicates whether the Web transport related MQTT Service is operationally
          up in the Message VPN.
        type: boolean
      serviceRestIncomingMaxConnectionCount:
        description: The maximum number of REST incoming client connections that can
          be simultaneously connected to the Message VPN. This value may be higher
          than supported by the platform.
        format: int64
        type: integer
      serviceRestIncomingPlainTextCompressed:
        description: Indicates whether the incoming REST Service is compressed in
          the Message VPN.
        type: boolean
      serviceRestIncomingPlainTextEnabled:
        description: Indicates whether the REST Service is enabled in the Message
          VPN for incoming clients.
        type: boolean
      serviceRestIncomingPlainTextFailureReason:
        description: The reason for the incoming REST Service failure in the Message
          VPN.
        type: string
      serviceRestIncomingPlainTextListenPort:
        description: The port number for incoming plain-text REST clients that connect
          to the Message VPN. The port must be unique across the message backbone.
          A value of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceRestIncomingPlainTextUp:
        description: Indicates whether the incoming REST Service is operationally
          up in the Message VPN.
        type: boolean
      serviceRestIncomingTlsCompressed:
        description: Indicates whether the TLS related incoming REST Service is compressed
          in the Message VPN.
        type: boolean
      serviceRestIncomingTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for incoming REST
          clients in the Message VPN.
        type: boolean
      serviceRestIncomingTlsFailureReason:
        description: The reason for the TLS related incoming REST Service failure
          in the Message VPN.
        type: string
      serviceRestIncomingTlsListenPort:
        description: The port number for incoming REST clients that connect to the
          Message VPN over TLS. The port must be unique across the message backbone.
          A value of 0 means that the listen-port is unassigned and cannot be enabled.
        format: int64
        type: integer
      serviceRestIncomingTlsUp:
        description: Indicates whether the TLS related incoming REST Service is operationally
          up in the Message VPN.
        type: boolean
      serviceRestMode:
        description: 'The REST service mode for incoming REST clients that connect
          to the Message VPN. The allowed values and their meaning are:


          <pre>

          "gateway" - Act as a message gateway through which REST messages are propagated.

          "messaging" - Act as a message broker on which REST messages are queued.

          </pre>

          '
        enum:
        - gateway
        - messaging
        type: string
      serviceRestOutgoingMaxConnectionCount:
        description: The maximum number of REST Consumer (outgoing) client connections
          that can be simultaneously connected to the Message VPN.
        format: int64
        type: integer
      serviceSmfMaxConnectionCount:
        description: The maximum number of SMF client connections that can be simultaneously
          connected to the Message VPN. This value may be higher than supported by
          the platform.
        format: int64
        type: integer
      serviceSmfPlainTextEnabled:
        description: Indicates whether the SMF Service is enabled in the Message VPN.
        type: boolean
      serviceSmfPlainTextFailureReason:
        description: The reason for the SMF Service failure in the Message VPN.
        type: string
      serviceSmfPlainTextUp:
        description: Indicates whether the SMF Service is operationally up in the
          Message VPN.
        type: boolean
      serviceSmfTlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for SMF clients
          in the Message VPN.
        type: boolean
      serviceSmfTlsFailureReason:
        description: The reason for the TLS related SMF Service failure in the Message
          VPN.
        type: string
      serviceSmfTlsUp:
        description: Indicates whether the TLS related SMF Service is operationally
          up in the Message VPN.
        type: boolean
      serviceWebMaxConnectionCount:
        description: The maximum number of Web Transport client connections that can
          be simultaneously connected to the Message VPN. This value may be higher
          than supported by the platform.
        format: int64
        type: integer
      serviceWebPlainTextEnabled:
        description: Indicates whether the Web transport for the SMF Service is enabled
          in the Message VPN.
        type: boolean
      serviceWebPlainTextFailureReason:
        description: The reason for the Web transport related SMF Service failure
          in the Message VPN.
        type: string
      serviceWebPlainTextUp:
        description: Indicates whether the Web transport for the SMF Service is operationally
          up in the Message VPN.
        type: boolean
      serviceWebTlsEnabled:
        description: Indicates whether TLS is enabled for SMF clients in the Message
          VPN that use the Web transport.
        type: boolean
      serviceWebTlsFailureReason:
        description: The reason for the TLS related Web transport SMF Service failure
          in the Message VPN.
        type: string
      serviceWebTlsUp:
        description: Indicates whether the TLS related Web transport SMF Service is
          operationally up in the Message VPN.
        type: boolean
      state:
        description: 'The operational state of the local Message VPN. The allowed
          values and their meaning are:


          <pre>

          "up" - The Message VPN is operationally up.

          "down" - The Message VPN is operationally down.

          "standby" - The Message VPN is operationally replication standby.

          </pre>

          '
        type: string
      subscriptionExportProgress:
        description: The progress of the subscription export task, in percent complete.
        format: int64
        type: integer
      systemManager:
        description: Indicates whether the Message VPN is the system manager for handling
          system level SEMP get requests and system level event publishing.
        type: boolean
      tlsAllowDowngradeToPlainTextEnabled:
        description: Indicates whether SMF clients connected to the Message VPN are
          allowed to downgrade their connections from TLS to plain text.
        type: boolean
      tlsAverageRxByteRate:
        description: The one minute average of the TLS message rate received by the
          Message VPN, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      tlsAverageTxByteRate:
        description: The one minute average of the TLS message rate transmitted by
          the Message VPN, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      tlsRxByteCount:
        description: The amount of TLS messages received by the Message VPN, in bytes
          (B). Available since 2.13.
        format: int64
        type: integer
      tlsRxByteRate:
        description: The current TLS message rate received by the Message VPN, in
          bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      tlsTxByteCount:
        description: The amount of TLS messages transmitted by the Message VPN, in
          bytes (B). Available since 2.13.
        format: int64
        type: integer
      tlsTxByteRate:
        description: The current TLS message rate transmitted by the Message VPN,
          in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      txByteCount:
        description: The amount of messages transmitted to clients by the Message
          VPN, in bytes (B). Available since 2.12.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted by the Message VPN, in bytes
          per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      txCompressedByteCount:
        description: The amount of compressed messages transmitted by the Message
          VPN, in bytes (B). Available since 2.12.
        format: int64
        type: integer
      txCompressedByteRate:
        description: The current compressed message rate transmitted by the Message
          VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
      txCompressionRatio:
        description: The compression ratio for messages transmitted by the message
          VPN. Available since 2.12.
        type: string
      txMsgCount:
        description: The number of messages transmitted to clients by the Message
          VPN. Available since 2.12.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted by the Message VPN, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      txUncompressedByteCount:
        description: The amount of uncompressed messages transmitted by the Message
          VPN, in bytes (B). Available since 2.12.
        format: int64
        type: integer
      txUncompressedByteRate:
        description: The current uncompressed message rate transmitted by the Message
          VPN, in bytes per second (B/sec). Available since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfile:
    properties:
      aclProfileName:
        description: The name of the ACL Profile.
        type: string
      clientConnectDefaultAction:
        description: 'The default action to take when a client using the ACL Profile
          connects to the Message VPN. The allowed values and their meaning are:


          <pre>

          "allow" - Allow client connection unless an exception is found for it.

          "disallow" - Disallow client connection unless an exception is found for
          it.

          </pre>

          '
        enum:
        - allow
        - disallow
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      publishTopicDefaultAction:
        description: 'The default action to take when a client using the ACL Profile
          publishes to a topic in the Message VPN. The allowed values and their meaning
          are:


          <pre>

          "allow" - Allow topic unless an exception is found for it.

          "disallow" - Disallow topic unless an exception is found for it.

          </pre>

          '
        enum:
        - allow
        - disallow
        type: string
      subscribeShareNameDefaultAction:
        description: "The default action to take when a client using the ACL Profile\
          \ subscribes to a share-name subscription in the Message VPN. The allowed\
          \ values and their meaning are:\n\n<pre>\n\"allow\" - Allow topic unless\
          \ an exception is found for it.\n\"disallow\" - Disallow topic unless an\
          \ exception is found for it.\n</pre>\n Available since 2.14."
        enum:
        - allow
        - disallow
        type: string
      subscribeTopicDefaultAction:
        description: 'The default action to take when a client using the ACL Profile
          subscribes to a topic in the Message VPN. The allowed values and their meaning
          are:


          <pre>

          "allow" - Allow topic unless an exception is found for it.

          "disallow" - Disallow topic unless an exception is found for it.

          </pre>

          '
        enum:
        - allow
        - disallow
        type: string
    type: object
  MsgVpnAclProfileClientConnectException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile.
        type: string
      clientConnectExceptionAddress:
        description: The IP address/netmask of the client connect exception in CIDR
          form.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnAclProfileClientConnectExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfileClientConnectExceptionLinks:
    properties:
      uri:
        description: The URI of this Client Connect Exception object.
        type: string
    type: object
  MsgVpnAclProfileClientConnectExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfileClientConnectException'
      links:
        $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileClientConnectExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfileClientConnectException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileCollections:
    properties:
      clientConnectExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsClientconnectexceptions'
      publishExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsPublishexceptions'
      publishTopicExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsPublishtopicexceptions'
      subscribeExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsSubscribeexceptions'
      subscribeShareNameExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsSubscribesharenameexceptions'
      subscribeTopicExceptions:
        $ref: '#/definitions/MsgVpnAclProfileCollectionsSubscribetopicexceptions'
    type: object
  MsgVpnAclProfileCollectionsClientconnectexceptions:
    properties:
      count:
        description: The total number of objects in the clientConnectExceptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileCollectionsPublishexceptions:
    properties:
      count:
        description: The total number of objects in the publishExceptions collection.
          Deprecated since 2.14. Replaced by publishTopicExceptions.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileCollectionsPublishtopicexceptions:
    properties:
      count:
        description: The total number of objects in the publishTopicExceptions collection.
          Available since 2.14.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileCollectionsSubscribeexceptions:
    properties:
      count:
        description: The total number of objects in the subscribeExceptions collection.
          Deprecated since 2.14. Replaced by subscribeTopicExceptions.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileCollectionsSubscribesharenameexceptions:
    properties:
      count:
        description: The total number of objects in the subscribeShareNameExceptions
          collection. Available since 2.14.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileCollectionsSubscribetopicexceptions:
    properties:
      count:
        description: The total number of objects in the subscribeTopicExceptions collection.
          Available since 2.14.
        format: int64
        type: integer
    type: object
  MsgVpnAclProfileLinks:
    properties:
      clientConnectExceptionsUri:
        description: The URI of this ACL Profile's collection of Client Connect Exception
          objects.
        type: string
      publishExceptionsUri:
        description: The URI of this ACL Profile's collection of Publish Topic Exception
          objects. Deprecated since 2.14. Replaced by publishTopicExceptions.
        type: string
      publishTopicExceptionsUri:
        description: The URI of this ACL Profile's collection of Publish Topic Exception
          objects. Available since 2.14.
        type: string
      subscribeExceptionsUri:
        description: The URI of this ACL Profile's collection of Subscribe Topic Exception
          objects. Deprecated since 2.14. Replaced by subscribeTopicExceptions.
        type: string
      subscribeShareNameExceptionsUri:
        description: The URI of this ACL Profile's collection of Subscribe Share Name
          Exception objects. Available since 2.14.
        type: string
      subscribeTopicExceptionsUri:
        description: The URI of this ACL Profile's collection of Subscribe Topic Exception
          objects. Available since 2.14.
        type: string
      uri:
        description: The URI of this ACL Profile object.
        type: string
    type: object
  MsgVpnAclProfilePublishException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile. Deprecated since 2.14. Replaced
          by publishTopicExceptions.
        type: string
      msgVpnName:
        description: The name of the Message VPN. Deprecated since 2.14. Replaced
          by publishTopicExceptions.
        type: string
      publishExceptionTopic:
        description: The topic for the exception to the default action taken. May
          include wildcard characters. Deprecated since 2.14. Replaced by publishTopicExceptions.
        type: string
      topicSyntax:
        description: "The syntax of the topic for the exception to the default action\
          \ taken. The allowed values and their meaning are:\n\n<pre>\n\"smf\" - Topic\
          \ uses SMF syntax.\n\"mqtt\" - Topic uses MQTT syntax.\n</pre>\n Deprecated\
          \ since 2.14. Replaced by publishTopicExceptions."
        enum:
        - smf
        - mqtt
        type: string
    type: object
  MsgVpnAclProfilePublishExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfilePublishExceptionLinks:
    properties:
      uri:
        description: The URI of this Publish Topic Exception object.
        type: string
    type: object
  MsgVpnAclProfilePublishExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfilePublishExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfilePublishException'
      links:
        $ref: '#/definitions/MsgVpnAclProfilePublishExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfilePublishExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfilePublishTopicException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      publishTopicException:
        description: The topic for the exception to the default action taken. May
          include wildcard characters.
        type: string
      publishTopicExceptionSyntax:
        description: 'The syntax of the topic for the exception to the default action
          taken. The allowed values and their meaning are:


          <pre>

          "smf" - Topic uses SMF syntax.

          "mqtt" - Topic uses MQTT syntax.

          </pre>

          '
        enum:
        - smf
        - mqtt
        type: string
    type: object
  MsgVpnAclProfilePublishTopicExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfilePublishTopicExceptionLinks:
    properties:
      uri:
        description: The URI of this Publish Topic Exception object.
        type: string
    type: object
  MsgVpnAclProfilePublishTopicExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfilePublishTopicException'
      links:
        $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfilePublishTopicExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishTopicException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfileCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfile'
      links:
        $ref: '#/definitions/MsgVpnAclProfileLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile. Deprecated since 2.14. Replaced
          by subscribeTopicExceptions.
        type: string
      msgVpnName:
        description: The name of the Message VPN. Deprecated since 2.14. Replaced
          by subscribeTopicExceptions.
        type: string
      subscribeExceptionTopic:
        description: The topic for the exception to the default action taken. May
          include wildcard characters. Deprecated since 2.14. Replaced by subscribeTopicExceptions.
        type: string
      topicSyntax:
        description: "The syntax of the topic for the exception to the default action\
          \ taken. The allowed values and their meaning are:\n\n<pre>\n\"smf\" - Topic\
          \ uses SMF syntax.\n\"mqtt\" - Topic uses MQTT syntax.\n</pre>\n Deprecated\
          \ since 2.14. Replaced by subscribeTopicExceptions."
        enum:
        - smf
        - mqtt
        type: string
    type: object
  MsgVpnAclProfileSubscribeExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfileSubscribeExceptionLinks:
    properties:
      uri:
        description: The URI of this Subscribe Topic Exception object.
        type: string
    type: object
  MsgVpnAclProfileSubscribeExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeException'
      links:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeShareNameException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      subscribeShareNameException:
        description: The subscribe share name exception to the default action taken.
          May include wildcard characters.
        type: string
      subscribeShareNameExceptionSyntax:
        description: 'The syntax of the subscribe share name for the exception to
          the default action taken. The allowed values and their meaning are:


          <pre>

          "smf" - Topic uses SMF syntax.

          "mqtt" - Topic uses MQTT syntax.

          </pre>

          '
        enum:
        - smf
        - mqtt
        type: string
    type: object
  MsgVpnAclProfileSubscribeShareNameExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfileSubscribeShareNameExceptionLinks:
    properties:
      uri:
        description: The URI of this Subscribe Share Name Exception object.
        type: string
    type: object
  MsgVpnAclProfileSubscribeShareNameExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameException'
      links:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeShareNameExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeTopicException:
    properties:
      aclProfileName:
        description: The name of the ACL Profile.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      subscribeTopicException:
        description: The topic for the exception to the default action taken. May
          include wildcard characters.
        type: string
      subscribeTopicExceptionSyntax:
        description: 'The syntax of the topic for the exception to the default action
          taken. The allowed values and their meaning are:


          <pre>

          "smf" - Topic uses SMF syntax.

          "mqtt" - Topic uses MQTT syntax.

          </pre>

          '
        enum:
        - smf
        - mqtt
        type: string
    type: object
  MsgVpnAclProfileSubscribeTopicExceptionCollections:
    properties: {}
    type: object
  MsgVpnAclProfileSubscribeTopicExceptionLinks:
    properties:
      uri:
        description: The URI of this Subscribe Topic Exception object.
        type: string
    type: object
  MsgVpnAclProfileSubscribeTopicExceptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionCollections'
      data:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicException'
      links:
        $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfileSubscribeTopicExceptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicException'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAclProfilesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAclProfileCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAclProfile'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAclProfileLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAuthenticationOauthProvider:
    properties:
      audienceClaimName:
        description: The audience claim name, indicating which part of the object
          to use for determining the audience.
        type: string
      audienceClaimSource:
        description: 'The audience claim source, indicating where to search for the
          audience value. The allowed values and their meaning are:


          <pre>

          "access-token" - The OAuth v2 access_token.

          "id-token" - The OpenID Connect id_token.

          "introspection" - The result of introspecting the OAuth v2 access_token.

          </pre>

          '
        enum:
        - access-token
        - id-token
        - introspection
        type: string
      audienceClaimValue:
        description: The required audience value for a token to be considered valid.
        type: string
      audienceValidationEnabled:
        description: Indicates whether audience validation is enabled.
        type: boolean
      authenticationSuccessCount:
        description: The number of OAuth Provider client authentications that succeeded.
        format: int64
        type: integer
      authorizationGroupClaimName:
        description: The authorization group claim name, indicating which part of
          the object to use for determining the authorization group.
        type: string
      authorizationGroupClaimSource:
        description: 'The authorization group claim source, indicating where to search
          for the authorization group name. The allowed values and their meaning are:


          <pre>

          "access-token" - The OAuth v2 access_token.

          "id-token" - The OpenID Connect id_token.

          "introspection" - The result of introspecting the OAuth v2 access_token.

          </pre>

          '
        enum:
        - access-token
        - id-token
        - introspection
        type: string
      authorizationGroupEnabled:
        description: Indicates whether OAuth based authorization is enabled and the
          configured authorization type for OAuth clients is overridden.
        type: boolean
      disconnectOnTokenExpirationEnabled:
        description: Indicates whether clients are disconnected when their tokens
          expire.
        type: boolean
      enabled:
        description: Indicates whether OAuth Provider client authentication is enabled.
        type: boolean
      jwksLastRefreshFailureReason:
        description: The reason for the last JWKS public key refresh failure.
        type: string
      jwksLastRefreshFailureTime:
        description: The timestamp of the last JWKS public key refresh failure. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      jwksLastRefreshTime:
        description: The timestamp of the last JWKS public key refresh success. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      jwksNextScheduledRefreshTime:
        description: The timestamp of the next scheduled JWKS public key refresh.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      jwksRefreshFailureCount:
        description: The number of JWKS public key refresh failures.
        format: int64
        type: integer
      jwksRefreshInterval:
        description: The number of seconds between forced JWKS public key refreshing.
        format: int32
        type: integer
      jwksUri:
        description: The URI where the OAuth provider publishes its JWKS public keys.
        type: string
      loginFailureIncorrectAudienceValueCount:
        description: The number of login failures due to an incorrect audience value.
        format: int64
        type: integer
      loginFailureInvalidAudienceValueCount:
        description: The number of login failures due to an invalid audience value.
        format: int64
        type: integer
      loginFailureInvalidAuthorizationGroupValueCount:
        description: The number of login failures due to an invalid authorization
          group value (zero-length or non-string).
        format: int64
        type: integer
      loginFailureInvalidJwtSignatureCount:
        description: The number of login failures due to an invalid JWT signature.
        format: int64
        type: integer
      loginFailureInvalidUsernameValueCount:
        description: The number of login failures due to an invalid username value.
        format: int64
        type: integer
      loginFailureMismatchedUsernameCount:
        description: The number of login failures due to a mismatched username.
        format: int64
        type: integer
      loginFailureMissingAudienceCount:
        description: The number of login failures due to a missing audience claim.
        format: int64
        type: integer
      loginFailureMissingJwkCount:
        description: The number of login failures due to a missing JSON Web Key (JWK).
        format: int64
        type: integer
      loginFailureMissingOrInvalidTokenCount:
        description: The number of login failures due to a missing or invalid token.
        format: int64
        type: integer
      loginFailureMissingUsernameCount:
        description: The number of login failures due to a missing username.
        format: int64
        type: integer
      loginFailureTokenExpiredCount:
        description: The number of login failures due to a token being expired.
        format: int64
        type: integer
      loginFailureTokenIntrospectionErroredCount:
        description: The number of login failures due to a token introspection error
          response.
        format: int64
        type: integer
      loginFailureTokenIntrospectionFailureCount:
        description: The number of login failures due to a failure to complete the
          token introspection.
        format: int64
        type: integer
      loginFailureTokenIntrospectionHttpsErrorCount:
        description: The number of login failures due to a token introspection HTTPS
          error.
        format: int64
        type: integer
      loginFailureTokenIntrospectionInvalidCount:
        description: The number of login failures due to a token introspection response
          being invalid.
        format: int64
        type: integer
      loginFailureTokenIntrospectionTimeoutCount:
        description: The number of login failures due to a token introspection timeout.
        format: int64
        type: integer
      loginFailureTokenNotValidYetCount:
        description: The number of login failures due to a token not being valid yet.
        format: int64
        type: integer
      loginFailureUnsupportedAlgCount:
        description: The number of login failures due to an unsupported algorithm.
        format: int64
        type: integer
      missingAuthorizationGroupCount:
        description: The number of clients that did not provide an authorization group
          claim value when expected.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      oauthProviderName:
        description: The name of the OAuth Provider.
        type: string
      tokenIgnoreTimeLimitsEnabled:
        description: Indicates whether to ignore time limits and accept tokens that
          are not yet valid or are no longer valid.
        type: boolean
      tokenIntrospectionAverageTime:
        description: The one minute average of the time required to complete a token
          introspection, in milliseconds (ms).
        format: int32
        type: integer
      tokenIntrospectionLastFailureReason:
        description: The reason for the last token introspection failure.
        type: string
      tokenIntrospectionLastFailureTime:
        description: The timestamp of the last token introspection failure. This value
          represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      tokenIntrospectionParameterName:
        description: The parameter name used to identify the token during access token
          introspection. A standards compliant OAuth introspection server expects
          "token".
        type: string
      tokenIntrospectionSuccessCount:
        description: The number of token introspection successes.
        format: int64
        type: integer
      tokenIntrospectionTimeout:
        description: The maximum time in seconds a token introspection is allowed
          to take.
        format: int32
        type: integer
      tokenIntrospectionUri:
        description: The token introspection URI of the OAuth authentication server.
        type: string
      tokenIntrospectionUsername:
        description: The username to use when logging into the token introspection
          URI.
        type: string
      usernameClaimName:
        description: The username claim name, indicating which part of the object
          to use for determining the username.
        type: string
      usernameClaimSource:
        description: 'The username claim source, indicating where to search for the
          username value. The allowed values and their meaning are:


          <pre>

          "access-token" - The OAuth v2 access_token.

          "id-token" - The OpenID Connect id_token.

          "introspection" - The result of introspecting the OAuth v2 access_token.

          </pre>

          '
        enum:
        - access-token
        - id-token
        - introspection
        type: string
      usernameValidateEnabled:
        description: Indicates whether the API provided username will be validated
          against the username calculated from the token(s).
        type: boolean
    type: object
  MsgVpnAuthenticationOauthProviderCollections:
    properties: {}
    type: object
  MsgVpnAuthenticationOauthProviderLinks:
    properties:
      uri:
        description: The URI of this OAuth Provider object.
        type: string
    type: object
  MsgVpnAuthenticationOauthProviderResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAuthenticationOauthProviderCollections'
      data:
        $ref: '#/definitions/MsgVpnAuthenticationOauthProvider'
      links:
        $ref: '#/definitions/MsgVpnAuthenticationOauthProviderLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAuthenticationOauthProvidersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAuthenticationOauthProviderCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAuthenticationOauthProvider'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAuthenticationOauthProviderLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAuthorizationGroup:
    properties:
      aclProfileName:
        description: The ACL Profile of the LDAP Authorization Group.
        type: string
      authorizationGroupName:
        description: The name of the LDAP Authorization Group. Special care is needed
          if the group name contains special characters such as '#', '+', ';', '='
          as the value of the group name returned from the LDAP server might prepend
          those characters with '\'. For example a group name called 'test#,lab,com'
          will be returned from the LDAP server as 'test\#,lab,com'.
        type: string
      clientProfileName:
        description: The Client Profile of the LDAP Authorization Group.
        type: string
      enabled:
        description: Indicates whether the LDAP Authorization Group is enabled.
        type: boolean
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnAuthorizationGroupCollections:
    properties: {}
    type: object
  MsgVpnAuthorizationGroupLinks:
    properties:
      uri:
        description: The URI of this LDAP Authorization Group object.
        type: string
    type: object
  MsgVpnAuthorizationGroupResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnAuthorizationGroupCollections'
      data:
        $ref: '#/definitions/MsgVpnAuthorizationGroup'
      links:
        $ref: '#/definitions/MsgVpnAuthorizationGroupLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnAuthorizationGroupsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnAuthorizationGroupCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnAuthorizationGroup'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnAuthorizationGroupLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridge:
    properties:
      averageRxByteRate:
        description: The one minute average of the message rate received from the
          Bridge, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received from the
          Bridge, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted to the
          Bridge, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted to the
          Bridge, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      boundToQueue:
        description: Indicates whether the Bridge is bound to the queue in the remote
          Message VPN.
        type: boolean
      bridgeName:
        description: The name of the Bridge.
        type: string
      bridgeVirtualRouter:
        description: 'The virtual router of the Bridge. The allowed values and their
          meaning are:


          <pre>

          "primary" - The Bridge is used for the primary virtual router.

          "backup" - The Bridge is used for the backup virtual router.

          "auto" - The Bridge is automatically assigned a virtual router at creation,
          depending on the broker''s active-standby role.

          </pre>

          '
        enum:
        - primary
        - backup
        - auto
        type: string
      clientName:
        description: The name of the Client for the Bridge.
        type: string
      compressed:
        description: Indicates whether messages transmitted over the Bridge are compressed.
        type: boolean
      controlRxByteCount:
        description: The amount of client control messages received from the Bridge,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      controlRxMsgCount:
        description: The number of client control messages received from the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      controlTxByteCount:
        description: The amount of client control messages transmitted to the Bridge,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      controlTxMsgCount:
        description: The number of client control messages transmitted to the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      counter:
        $ref: '#/definitions/MsgVpnBridgeCounter'
      dataRxByteCount:
        description: The amount of client data messages received from the Bridge,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      dataRxMsgCount:
        description: The number of client data messages received from the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      dataTxByteCount:
        description: The amount of client data messages transmitted to the Bridge,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      dataTxMsgCount:
        description: The number of client data messages transmitted to the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      discardedRxMsgCount:
        description: The number of messages discarded during reception from the Bridge.
          Available since 2.13.
        format: int32
        type: integer
      discardedTxMsgCount:
        description: The number of messages discarded during transmission to the Bridge.
          Available since 2.13.
        format: int32
        type: integer
      enabled:
        description: Indicates whether the Bridge is enabled.
        type: boolean
      encrypted:
        description: Indicates whether messages transmitted over the Bridge are encrypted
          with TLS.
        type: boolean
      establisher:
        description: 'The establisher of the Bridge connection. The allowed values
          and their meaning are:


          <pre>

          "local" - The Bridge connection was established by the local Message VPN.

          "remote" - The Bridge connection was established by the remote Message VPN.

          </pre>

          '
        type: string
      inboundFailureReason:
        description: The reason for the inbound connection failure from the Bridge.
        type: string
      inboundState:
        description: 'The state of the inbound connection from the Bridge. The allowed
          values and their meaning are:


          <pre>

          "init" - The connection is initializing.

          "disabled" - The connection is disabled by configuration.

          "enabled" - The connection is enabled by configuration.

          "prepare" - The connection is operationally down.

          "prepare-wait-to-connect" - The connection is waiting to connect.

          "prepare-fetching-dns" - The domain name of the destination node is being
          resolved.

          "not-ready" - The connection is operationally down.

          "not-ready-connecting" - The connection is trying to connect.

          "not-ready-handshaking" - The connection is handshaking.

          "not-ready-wait-next" - The connection failed to connect and is waiting
          to retry.

          "not-ready-wait-reuse" - The connection is closing in order to reuse an
          existing connection.

          "not-ready-wait-bridge-version-mismatch" - The connection is closing because
          of a version mismatch.

          "not-ready-wait-cleanup" - The connection is closed and cleaning up.

          "ready" - The connection is operationally up.

          "ready-subscribing" - The connection is up and synchronizing subscriptions.

          "ready-in-sync" - The connection is up and subscriptions are synchronized.

          </pre>

          '
        type: string
      lastTxMsgId:
        description: The ID of the last message transmitted to the Bridge.
        format: int64
        type: integer
      localInterface:
        description: The physical interface on the local Message VPN host for connecting
          to the remote Message VPN.
        type: string
      localQueueName:
        description: The name of the local queue for the Bridge.
        type: string
      loginRxMsgCount:
        description: The number of login request messages received from the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      loginTxMsgCount:
        description: The number of login response messages transmitted to the Bridge.
          Available since 2.13.
        format: int64
        type: integer
      maxTtl:
        description: The maximum time-to-live (TTL) in hops. Messages are discarded
          if their TTL exceeds this value.
        format: int64
        type: integer
      msgSpoolRxMsgCount:
        description: The number of guaranteed messages received from the Bridge. Available
          since 2.13.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      outboundState:
        description: 'The state of the outbound connection to the Bridge. The allowed
          values and their meaning are:


          <pre>

          "init" - The connection is initializing.

          "disabled" - The connection is disabled by configuration.

          "enabled" - The connection is enabled by configuration.

          "prepare" - The connection is operationally down.

          "prepare-wait-to-connect" - The connection is waiting to connect.

          "prepare-fetching-dns" - The domain name of the destination node is being
          resolved.

          "not-ready" - The connection is operationally down.

          "not-ready-connecting" - The connection is trying to connect.

          "not-ready-handshaking" - The connection is handshaking.

          "not-ready-wait-next" - The connection failed to connect and is waiting
          to retry.

          "not-ready-wait-reuse" - The connection is closing in order to reuse an
          existing connection.

          "not-ready-wait-bridge-version-mismatch" - The connection is closing because
          of a version mismatch.

          "not-ready-wait-cleanup" - The connection is closed and cleaning up.

          "ready" - The connection is operationally up.

          "ready-subscribing" - The connection is up and synchronizing subscriptions.

          "ready-in-sync" - The connection is up and subscriptions are synchronized.

          </pre>

          '
        type: string
      rate:
        $ref: '#/definitions/MsgVpnBridgeRate'
      remoteAddress:
        description: The FQDN or IP address of the remote Message VPN.
        type: string
      remoteAuthenticationBasicClientUsername:
        description: The Client Username the Bridge uses to login to the remote Message
          VPN.
        type: string
      remoteAuthenticationScheme:
        description: 'The authentication scheme for the remote Message VPN. The allowed
          values and their meaning are:


          <pre>

          "basic" - Basic Authentication Scheme (via username and password).

          "client-certificate" - Client Certificate Authentication Scheme (via certificate
          file or content).

          </pre>

          '
        enum:
        - basic
        - client-certificate
        type: string
      remoteConnectionRetryCount:
        description: The maximum number of retry attempts to establish a connection
          to the remote Message VPN. A value of 0 means to retry forever.
        format: int64
        type: integer
      remoteConnectionRetryDelay:
        description: The number of seconds the broker waits for the bridge connection
          to be established before attempting a new connection.
        format: int64
        type: integer
      remoteDeliverToOnePriority:
        description: 'The priority for deliver-to-one (DTO) messages transmitted from
          the remote Message VPN. The allowed values and their meaning are:


          <pre>

          "p1" - The 1st or highest priority.

          "p2" - The 2nd highest priority.

          "p3" - The 3rd highest priority.

          "p4" - The 4th highest priority.

          "da" - Ignore priority and deliver always.

          </pre>

          '
        enum:
        - p1
        - p2
        - p3
        - p4
        - da
        type: string
      remoteMsgVpnName:
        description: The name of the remote Message VPN.
        type: string
      remoteRouterName:
        description: The name of the remote router.
        type: string
      remoteTxFlowId:
        description: The ID of the transmit flow for the connected remote Message
          VPN.
        format: int32
        type: integer
      rxByteCount:
        description: The amount of messages received from the Bridge, in bytes (B).
          Available since 2.13.
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received from the Bridge, in bytes per
          second (B/sec). Available since 2.13.
        format: int64
        type: integer
      rxMsgCount:
        description: The number of messages received from the Bridge. Available since
          2.13.
        format: int32
        type: integer
      rxMsgRate:
        description: The current message rate received from the Bridge, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      tlsCipherSuiteList:
        description: The colon-separated list of cipher suites supported for TLS connections
          to the remote Message VPN. The value "default" implies all supported suites
          ordered from most secure to least secure.
        type: string
      tlsDefaultCipherSuiteList:
        description: Indicates whether the Bridge is configured to use the default
          cipher-suite list.
        type: boolean
      ttlExceededEventRaised:
        description: Indicates whether the TTL (hops) exceeded event has been raised.
        type: boolean
      txByteCount:
        description: The amount of messages transmitted to the Bridge, in bytes (B).
          Available since 2.13.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted to the Bridge, in bytes
          per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      txMsgCount:
        description: The number of messages transmitted to the Bridge. Available since
          2.13.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted to the Bridge, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      uptime:
        description: The amount of time in seconds since the Bridge connected to the
          remote Message VPN.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeCollections:
    properties:
      localSubscriptions:
        $ref: '#/definitions/MsgVpnBridgeCollectionsLocalsubscriptions'
      remoteMsgVpns:
        $ref: '#/definitions/MsgVpnBridgeCollectionsRemotemsgvpns'
      remoteSubscriptions:
        $ref: '#/definitions/MsgVpnBridgeCollectionsRemotesubscriptions'
      tlsTrustedCommonNames:
        $ref: '#/definitions/MsgVpnBridgeCollectionsTlstrustedcommonnames'
    type: object
  MsgVpnBridgeCollectionsLocalsubscriptions:
    properties:
      count:
        description: The total number of objects in the localSubscriptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeCollectionsRemotemsgvpns:
    properties:
      count:
        description: The total number of objects in the remoteMsgVpns collection.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeCollectionsRemotesubscriptions:
    properties:
      count:
        description: The total number of objects in the remoteSubscriptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeCollectionsTlstrustedcommonnames:
    properties:
      count:
        description: The total number of objects in the tlsTrustedCommonNames collection.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeCounter:
    description: The counters for the Bridge. Deprecated since 2.13. All attributes
      in this object have been moved to the MsgVpnBridge object.
    properties:
      controlRxByteCount:
        description: The amount of client control messages received from the Bridge,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnBridge object.
        format: int64
        type: integer
      controlRxMsgCount:
        description: The number of client control messages received from the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      controlTxByteCount:
        description: The amount of client control messages transmitted to the Bridge,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnBridge object.
        format: int64
        type: integer
      controlTxMsgCount:
        description: The number of client control messages transmitted to the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      dataRxByteCount:
        description: The amount of client data messages received from the Bridge,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnBridge object.
        format: int64
        type: integer
      dataRxMsgCount:
        description: The number of client data messages received from the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      dataTxByteCount:
        description: The amount of client data messages transmitted to the Bridge,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnBridge object.
        format: int64
        type: integer
      dataTxMsgCount:
        description: The number of client data messages transmitted to the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      discardedRxMsgCount:
        description: The number of messages discarded during reception from the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int32
        type: integer
      discardedTxMsgCount:
        description: The number of messages discarded during transmission to the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int32
        type: integer
      loginRxMsgCount:
        description: The number of login request messages received from the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      loginTxMsgCount:
        description: The number of login response messages transmitted to the Bridge.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      msgSpoolRxMsgCount:
        description: The number of guaranteed messages received from the Bridge. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
      rxByteCount:
        description: The amount of messages received from the Bridge, in bytes (B).
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      rxMsgCount:
        description: The number of messages received from the Bridge. Deprecated since
          2.13. This attribute has been moved to the MsgVpnBridge object.
        format: int32
        type: integer
      txByteCount:
        description: The amount of messages transmitted to the Bridge, in bytes (B).
          Deprecated since 2.13. This attribute has been moved to the MsgVpnBridge
          object.
        format: int64
        type: integer
      txMsgCount:
        description: The number of messages transmitted to the Bridge. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeLinks:
    properties:
      localSubscriptionsUri:
        description: The URI of this Bridge's collection of Bridge Local Subscriptions
          objects.
        type: string
      remoteMsgVpnsUri:
        description: The URI of this Bridge's collection of Remote Message VPN objects.
        type: string
      remoteSubscriptionsUri:
        description: The URI of this Bridge's collection of Remote Subscription objects.
        type: string
      tlsTrustedCommonNamesUri:
        description: The URI of this Bridge's collection of Trusted Common Name objects.
        type: string
      uri:
        description: The URI of this Bridge object.
        type: string
    type: object
  MsgVpnBridgeLocalSubscription:
    properties:
      bridgeName:
        description: The name of the Bridge.
        type: string
      bridgeVirtualRouter:
        description: 'The virtual router of the Bridge. The allowed values and their
          meaning are:


          <pre>

          "primary" - The Bridge is used for the primary virtual router.

          "backup" - The Bridge is used for the backup virtual router.

          "auto" - The Bridge is automatically assigned a virtual router at creation,
          depending on the broker''s active-standby role.

          </pre>

          '
        enum:
        - primary
        - backup
        - auto
        type: string
      dtoPriority:
        description: 'The priority of the Bridge local subscription topic for receiving
          deliver-to-one (DTO) messages. The allowed values and their meaning are:


          <pre>

          "p1" - The 1st or highest priority.

          "p2" - The 2nd highest priority.

          "p3" - The 3rd highest priority.

          "p4" - The 4th highest priority.

          "da" - Ignore priority and deliver always.

          </pre>

          '
        type: string
      localSubscriptionTopic:
        description: The topic of the Bridge local subscription.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnBridgeLocalSubscriptionCollections:
    properties: {}
    type: object
  MsgVpnBridgeLocalSubscriptionLinks:
    properties:
      uri:
        description: The URI of this Bridge Local Subscriptions object.
        type: string
    type: object
  MsgVpnBridgeLocalSubscriptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionCollections'
      data:
        $ref: '#/definitions/MsgVpnBridgeLocalSubscription'
      links:
        $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeLocalSubscriptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnBridgeLocalSubscription'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeRate:
    description: The rates for the Bridge. Deprecated since 2.13. All attributes in
      this object have been moved to the MsgVpnBridge object.
    properties:
      averageRxByteRate:
        description: The one minute average of the message rate received from the
          Bridge, in bytes per second (B/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received from the
          Bridge, in messages per second (msg/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted to the
          Bridge, in bytes per second (B/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted to the
          Bridge, in messages per second (msg/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpnBridge object.
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received from the Bridge, in bytes per
          second (B/sec). Deprecated since 2.13. This attribute has been moved to
          the MsgVpnBridge object.
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received from the Bridge, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnBridge object.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted to the Bridge, in bytes
          per second (B/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnBridge object.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted to the Bridge, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnBridge object.
        format: int64
        type: integer
    type: object
  MsgVpnBridgeRemoteMsgVpn:
    properties:
      boundToQueue:
        description: Indicates whether the Bridge is bound to the queue in the remote
          Message VPN.
        type: boolean
      bridgeName:
        description: The name of the Bridge.
        type: string
      bridgeVirtualRouter:
        description: 'The virtual router of the Bridge. The allowed values and their
          meaning are:


          <pre>

          "primary" - The Bridge is used for the primary virtual router.

          "backup" - The Bridge is used for the backup virtual router.

          "auto" - The Bridge is automatically assigned a virtual router at creation,
          depending on the broker''s active-standby role.

          </pre>

          '
        enum:
        - primary
        - backup
        - auto
        type: string
      clientUsername:
        description: The Client Username the Bridge uses to login to the remote Message
          VPN. This per remote Message VPN value overrides the value provided for
          the Bridge overall.
        type: string
      compressedDataEnabled:
        description: Indicates whether data compression is enabled for the remote
          Message VPN connection.
        type: boolean
      connectOrder:
        description: The preference given to incoming connections from remote Message
          VPN hosts, from 1 (highest priority) to 4 (lowest priority).
        format: int32
        type: integer
      egressFlowWindowSize:
        description: The number of outstanding guaranteed messages that can be transmitted
          over the remote Message VPN connection before an acknowledgement is received.
        format: int64
        type: integer
      enabled:
        description: Indicates whether the remote Message VPN is enabled.
        type: boolean
      lastConnectionFailureReason:
        description: The reason for the last connection failure to the remote Message
          VPN.
        type: string
      lastQueueBindFailureReason:
        description: The reason for the last queue bind failure in the remote Message
          VPN.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      queueBinding:
        description: The queue binding of the Bridge in the remote Message VPN.
        type: string
      queueBoundUptime:
        description: The amount of time in seconds since the queue was bound in the
          remote Message VPN.
        format: int32
        type: integer
      remoteMsgVpnInterface:
        description: The physical interface on the local Message VPN host for connecting
          to the remote Message VPN. By default, an interface is chosen automatically
          (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual
          router name.
        type: string
      remoteMsgVpnLocation:
        description: The location of the remote Message VPN as either an FQDN with
          port, IP address with port, or virtual router name (starting with "v:").
        type: string
      remoteMsgVpnName:
        description: The name of the remote Message VPN.
        type: string
      tlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for the remote
          Message VPN connection.
        type: boolean
      unidirectionalClientProfile:
        description: The Client Profile for the unidirectional Bridge of the remote
          Message VPN. The Client Profile must exist in the local Message VPN, and
          it is used only for the TCP parameters. Note that the default client profile
          has a TCP maximum window size of 2MB.
        type: string
      up:
        description: Indicates whether the connection to the remote Message VPN is
          up.
        type: boolean
    type: object
  MsgVpnBridgeRemoteMsgVpnCollections:
    properties: {}
    type: object
  MsgVpnBridgeRemoteMsgVpnLinks:
    properties:
      uri:
        description: The URI of this Remote Message VPN object.
        type: string
    type: object
  MsgVpnBridgeRemoteMsgVpnResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnCollections'
      data:
        $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpn'
      links:
        $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeRemoteMsgVpnsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpn'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeRemoteSubscription:
    properties:
      bridgeName:
        description: The name of the Bridge.
        type: string
      bridgeVirtualRouter:
        description: 'The virtual router of the Bridge. The allowed values and their
          meaning are:


          <pre>

          "primary" - The Bridge is used for the primary virtual router.

          "backup" - The Bridge is used for the backup virtual router.

          "auto" - The Bridge is automatically assigned a virtual router at creation,
          depending on the broker''s active-standby role.

          </pre>

          '
        enum:
        - primary
        - backup
        - auto
        type: string
      deliverAlwaysEnabled:
        description: Indicates whether deliver-always is enabled for the Bridge remote
          subscription topic instead of a deliver-to-one remote priority. A given
          topic for the Bridge may be deliver-to-one or deliver-always but not both.
        type: boolean
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      remoteSubscriptionTopic:
        description: The topic of the Bridge remote subscription.
        type: string
    type: object
  MsgVpnBridgeRemoteSubscriptionCollections:
    properties: {}
    type: object
  MsgVpnBridgeRemoteSubscriptionLinks:
    properties:
      uri:
        description: The URI of this Remote Subscription object.
        type: string
    type: object
  MsgVpnBridgeRemoteSubscriptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionCollections'
      data:
        $ref: '#/definitions/MsgVpnBridgeRemoteSubscription'
      links:
        $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeRemoteSubscriptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteSubscription'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnBridgeCollections'
      data:
        $ref: '#/definitions/MsgVpnBridge'
      links:
        $ref: '#/definitions/MsgVpnBridgeLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeTlsTrustedCommonName:
    properties:
      bridgeName:
        description: The name of the Bridge.
        type: string
      bridgeVirtualRouter:
        description: 'The virtual router of the Bridge. The allowed values and their
          meaning are:


          <pre>

          "primary" - The Bridge is used for the primary virtual router.

          "backup" - The Bridge is used for the backup virtual router.

          "auto" - The Bridge is automatically assigned a virtual router at creation,
          depending on the broker''s active-standby role.

          </pre>

          '
        enum:
        - primary
        - backup
        - auto
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      tlsTrustedCommonName:
        description: The expected trusted common name of the remote certificate.
        type: string
    type: object
  MsgVpnBridgeTlsTrustedCommonNameCollections:
    properties: {}
    type: object
  MsgVpnBridgeTlsTrustedCommonNameLinks:
    properties:
      uri:
        description: The URI of this Trusted Common Name object.
        type: string
    type: object
  MsgVpnBridgeTlsTrustedCommonNameResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNameCollections'
      data:
        $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonName'
      links:
        $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgeTlsTrustedCommonNamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonName'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnBridgesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnBridgeCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnBridge'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnBridgeLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClient:
    properties:
      aclProfileName:
        description: The name of the access control list (ACL) profile of the Client.
        type: string
      aliasedFromMsgVpnName:
        description: The name of the original MsgVpn which the client signaled in.
          Available since 2.14.
        type: string
      alreadyBoundBindFailureCount:
        description: The number of Client bind failures due to endpoint being already
          bound.
        format: int64
        type: integer
      authorizationGroupName:
        description: The name of the authorization group of the Client.
        type: string
      averageRxByteRate:
        description: The one minute average of the message rate received from the
          Client, in bytes per second (B/sec).
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received from the
          Client, in messages per second (msg/sec).
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted to the
          Client, in bytes per second (B/sec).
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted to the
          Client, in messages per second (msg/sec).
        format: int64
        type: integer
      bindRequestCount:
        description: The number of Client requests to bind to an endpoint.
        format: int64
        type: integer
      bindSuccessCount:
        description: The number of successful Client requests to bind to an endpoint.
        format: int64
        type: integer
      clientAddress:
        description: The IP address and port of the Client.
        type: string
      clientId:
        description: The identifier (ID) of the Client.
        format: int32
        type: integer
      clientName:
        description: The name of the Client.
        type: string
      clientProfileName:
        description: The name of the client profile of the Client.
        type: string
      clientUsername:
        description: The client username of the Client used for authorization.
        type: string
      controlRxByteCount:
        description: The amount of client control messages received from the Client,
          in bytes (B).
        format: int64
        type: integer
      controlRxMsgCount:
        description: The number of client control messages received from the Client.
        format: int64
        type: integer
      controlTxByteCount:
        description: The amount of client control messages transmitted to the Client,
          in bytes (B).
        format: int64
        type: integer
      controlTxMsgCount:
        description: The number of client control messages transmitted to the Client.
        format: int64
        type: integer
      cutThroughDeniedBindFailureCount:
        description: The number of Client bind failures due to being denied cut-through
          forwarding.
        format: int64
        type: integer
      dataRxByteCount:
        description: The amount of client data messages received from the Client,
          in bytes (B).
        format: int64
        type: integer
      dataRxMsgCount:
        description: The number of client data messages received from the Client.
        format: int64
        type: integer
      dataTxByteCount:
        description: The amount of client data messages transmitted to the Client,
          in bytes (B).
        format: int64
        type: integer
      dataTxMsgCount:
        description: The number of client data messages transmitted to the Client.
        format: int64
        type: integer
      description:
        description: The description text of the Client.
        type: string
      disabledBindFailureCount:
        description: The number of Client bind failures due to endpoint being disabled.
        format: int64
        type: integer
      dtoLocalPriority:
        description: The priority of the Client's subscriptions for receiving deliver-to-one
          (DTO) messages published on the local broker.
        format: int32
        type: integer
      dtoNetworkPriority:
        description: The priority of the Client's subscriptions for receiving deliver-to-one
          (DTO) messages published on a remote broker.
        format: int32
        type: integer
      eliding:
        description: Indicates whether message eliding is enabled for the Client.
        type: boolean
      elidingTopicCount:
        description: The number of topics requiring message eliding for the Client.
        format: int32
        type: integer
      elidingTopicPeakCount:
        description: The peak number of topics requiring message eliding for the Client.
        format: int32
        type: integer
      guaranteedDeniedBindFailureCount:
        description: The number of Client bind failures due to being denied guaranteed
          messaging.
        format: int64
        type: integer
      invalidSelectorBindFailureCount:
        description: The number of Client bind failures due to an invalid selector.
        format: int64
        type: integer
      largeMsgEventRaised:
        description: Indicates whether the large-message event has been raised for
          the Client.
        type: boolean
      loginRxMsgCount:
        description: The number of login request messages received from the Client.
        format: int64
        type: integer
      loginTxMsgCount:
        description: The number of login response messages transmitted to the Client.
        format: int64
        type: integer
      maxBindCountExceededBindFailureCount:
        description: The number of Client bind failures due to the endpoint maximum
          bind count being exceeded.
        format: int64
        type: integer
      maxElidingTopicCountEventRaised:
        description: Indicates whether the max-eliding-topic-count event has been
          raised for the Client.
        type: boolean
      mqttConnackErrorTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) refused response
          packets transmitted to the Client.
        format: int64
        type: integer
      mqttConnackTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) accepted
          response packets transmitted to the Client.
        format: int64
        type: integer
      mqttConnectRxCount:
        description: The number of MQTT connect (CONNECT) request packets received
          from the Client.
        format: int64
        type: integer
      mqttDisconnectRxCount:
        description: The number of MQTT disconnect (DISCONNECT) request packets received
          from the Client.
        format: int64
        type: integer
      mqttPingreqRxCount:
        description: The number of MQTT ping request (PINGREQ) packets received from
          the Client.
        format: int64
        type: integer
      mqttPingrespTxCount:
        description: The number of MQTT ping response (PINGRESP) packets transmitted
          to the Client.
        format: int64
        type: integer
      mqttPubackRxCount:
        description: The number of MQTT publish acknowledgement (PUBACK) response
          packets received from the Client.
        format: int64
        type: integer
      mqttPubackTxCount:
        description: The number of MQTT publish acknowledgement (PUBACK) response
          packets transmitted to the Client.
        format: int64
        type: integer
      mqttPubcompTxCount:
        description: The number of MQTT publish complete (PUBCOMP) packets transmitted
          to the Client in response to a PUBREL packet. These packets are the fourth
          and final packet of a QoS 2 protocol exchange.
        format: int64
        type: integer
      mqttPublishQos0RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 0 message delivery.
        format: int64
        type: integer
      mqttPublishQos0TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 0 message delivery.
        format: int64
        type: integer
      mqttPublishQos1RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 1 message delivery.
        format: int64
        type: integer
      mqttPublishQos1TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 1 message delivery.
        format: int64
        type: integer
      mqttPublishQos2RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 2 message delivery.
        format: int64
        type: integer
      mqttPubrecTxCount:
        description: The number of MQTT publish received (PUBREC) packets transmitted
          to the Client in response to a PUBLISH packet with QoS 2. These packets
          are the second packet of a QoS 2 protocol exchange.
        format: int64
        type: integer
      mqttPubrelRxCount:
        description: The number of MQTT publish release (PUBREL) packets received
          from the Client in response to a PUBREC packet. These packets are the third
          packet of a QoS 2 protocol exchange.
        format: int64
        type: integer
      mqttSubackErrorTxCount:
        description: The number of MQTT subscribe acknowledgement (SUBACK) failure
          response packets transmitted to the Client.
        format: int64
        type: integer
      mqttSubackTxCount:
        description: The number of MQTT subscribe acknowledgement (SUBACK) response
          packets transmitted to the Client.
        format: int64
        type: integer
      mqttSubscribeRxCount:
        description: The number of MQTT subscribe (SUBSCRIBE) request packets received
          from the Client to create one or more topic subscriptions.
        format: int64
        type: integer
      mqttUnsubackTxCount:
        description: The number of MQTT unsubscribe acknowledgement (UNSUBACK) response
          packets transmitted to the Client.
        format: int64
        type: integer
      mqttUnsubscribeRxCount:
        description: The number of MQTT unsubscribe (UNSUBSCRIBE) request packets
          received from the Client to remove one or more topic subscriptions.
        format: int64
        type: integer
      msgSpoolCongestionRxDiscardedMsgCount:
        description: The number of messages from the Client discarded due to message
          spool congestion primarily caused by message promotion.
        format: int64
        type: integer
      msgSpoolRxDiscardedMsgCount:
        description: The number of messages from the Client discarded by the message
          spool.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      noLocalDelivery:
        description: Indicates whether not to deliver messages to the Client if it
          published them.
        type: boolean
      noSubscriptionMatchRxDiscardedMsgCount:
        description: The number of messages from the Client discarded due to no matching
          subscription found.
        format: int64
        type: integer
      originalClientUsername:
        description: The original value of the client username used for Client authentication.
        type: string
      otherBindFailureCount:
        description: The number of Client bind failures due to other reasons.
        format: int64
        type: integer
      platform:
        description: The platform the Client application software was built for, which
          may include the OS and API type.
        type: string
      publishTopicAclRxDiscardedMsgCount:
        description: The number of messages from the Client discarded due to the publish
          topic being denied by the Access Control List (ACL) profile.
        format: int64
        type: integer
      restHttpRequestRxByteCount:
        description: The amount of HTTP request messages received from the Client,
          in bytes (B).
        format: int64
        type: integer
      restHttpRequestRxMsgCount:
        description: The number of HTTP request messages received from the Client.
        format: int64
        type: integer
      restHttpRequestTxByteCount:
        description: The amount of HTTP request messages transmitted to the Client,
          in bytes (B).
        format: int64
        type: integer
      restHttpRequestTxMsgCount:
        description: The number of HTTP request messages transmitted to the Client.
        format: int64
        type: integer
      restHttpResponseErrorRxMsgCount:
        description: The number of HTTP client/server error response messages received
          from the Client.
        format: int64
        type: integer
      restHttpResponseErrorTxMsgCount:
        description: The number of HTTP client/server error response messages transmitted
          to the Client.
        format: int64
        type: integer
      restHttpResponseRxByteCount:
        description: The amount of HTTP response messages received from the Client,
          in bytes (B).
        format: int64
        type: integer
      restHttpResponseRxMsgCount:
        description: The number of HTTP response messages received from the Client.
        format: int64
        type: integer
      restHttpResponseSuccessRxMsgCount:
        description: The number of HTTP successful response messages received from
          the Client.
        format: int64
        type: integer
      restHttpResponseSuccessTxMsgCount:
        description: The number of HTTP successful response messages transmitted to
          the Client.
        format: int64
        type: integer
      restHttpResponseTimeoutRxMsgCount:
        description: The number of HTTP wait for reply timeout response messages received
          from the Client.
        format: int64
        type: integer
      restHttpResponseTimeoutTxMsgCount:
        description: The number of HTTP wait for reply timeout response messages transmitted
          to the Client.
        format: int64
        type: integer
      restHttpResponseTxByteCount:
        description: The amount of HTTP response messages transmitted to the Client,
          in bytes (B).
        format: int64
        type: integer
      restHttpResponseTxMsgCount:
        description: The number of HTTP response messages transmitted to the Client.
        format: int64
        type: integer
      rxByteCount:
        description: The amount of messages received from the Client, in bytes (B).
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received from the Client, in bytes per
          second (B/sec).
        format: int64
        type: integer
      rxDiscardedMsgCount:
        description: The number of messages discarded during reception from the Client.
        format: int64
        type: integer
      rxMsgCount:
        description: The number of messages received from the Client.
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received from the Client, in messages
          per second (msg/sec).
        format: int64
        type: integer
      scheduledDisconnectTime:
        description: The timestamp of when the Client will be disconnected by the
          broker. This value represents the number of seconds since 1970-01-01 00:00:00
          UTC (Unix time). Available since 2.13.
        format: int32
        type: integer
      slowSubscriber:
        description: Indicates whether the Client is a slow subscriber and blocks
          for a few seconds when receiving messages.
        type: boolean
      softwareDate:
        description: The date the Client application software was built.
        type: string
      softwareVersion:
        description: The version of the Client application software.
        type: string
      tlsCipherDescription:
        description: The description of the TLS cipher used by the Client, which may
          include cipher name, key exchange and encryption algorithms.
        type: string
      tlsDowngradedToPlainText:
        description: Indicates whether the Client TLS connection was downgraded to
          plain-text to increase performance.
        type: boolean
      tlsVersion:
        description: The version of TLS used by the Client.
        type: string
      topicParseErrorRxDiscardedMsgCount:
        description: The number of messages from the Client discarded due to an error
          while parsing the publish topic.
        format: int64
        type: integer
      txByteCount:
        description: The amount of messages transmitted to the Client, in bytes (B).
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted to the Client, in bytes
          per second (B/sec).
        format: int64
        type: integer
      txDiscardedMsgCount:
        description: The number of messages discarded during transmission to the Client.
        format: int64
        type: integer
      txMsgCount:
        description: The number of messages transmitted to the Client.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted to the Client, in messages
          per second (msg/sec).
        format: int64
        type: integer
      uptime:
        description: The amount of time in seconds since the Client connected.
        format: int32
        type: integer
      user:
        description: The user description for the Client, which may include computer
          name and process ID.
        type: string
      virtualRouter:
        description: 'The virtual router used by the Client. The allowed values and
          their meaning are:


          <pre>

          "primary" - The Client is using the primary virtual router.

          "backup" - The Client is using the backup virtual router.

          "internal" - The Client is using the internal virtual router.

          "unknown" - The Client virtual router is unknown.

          </pre>

          '
        type: string
      webInactiveTimeout:
        description: The maximum web transport timeout for the Client being inactive,
          in seconds.
        format: int32
        type: integer
      webMaxPayload:
        description: The maximum web transport message payload size which excludes
          the size of the message header, in bytes.
        format: int64
        type: integer
      webParseErrorRxDiscardedMsgCount:
        description: The number of messages from the Client discarded due to an error
          while parsing the web message.
        format: int64
        type: integer
      webRemainingTimeout:
        description: The remaining web transport timeout for the Client being inactive,
          in seconds.
        format: int32
        type: integer
      webRxByteCount:
        description: The amount of web transport messages received from the Client,
          in bytes (B).
        format: int64
        type: integer
      webRxEncoding:
        description: 'The type of encoding used during reception from the Client.
          The allowed values and their meaning are:


          <pre>

          "binary" - The Client is using binary encoding.

          "base64" - The Client is using base64 encoding.

          "illegal" - The Client is using an illegal encoding type.

          </pre>

          '
        type: string
      webRxMsgCount:
        description: The number of web transport messages received from the Client.
        format: int64
        type: integer
      webRxProtocol:
        description: 'The type of web transport used during reception from the Client.
          The allowed values and their meaning are:


          <pre>

          "ws-binary" - The Client is using WebSocket binary transport.

          "http-binary-streaming" - The Client is using HTTP binary streaming transport.

          "http-binary" - The Client is using HTTP binary transport.

          "http-base64" - The Client is using HTTP base64 transport.

          </pre>

          '
        type: string
      webRxRequestCount:
        description: The number of web transport requests received from the Client
          (HTTP only). Not available for WebSockets.
        format: int64
        type: integer
      webRxResponseCount:
        description: The number of web transport responses transmitted to the Client
          on the receive connection (HTTP only). Not available for WebSockets.
        format: int64
        type: integer
      webRxTcpState:
        description: 'The TCP state of the receive connection from the Client. When
          fully operational, should be: established. See RFC 793 for further details.
          The allowed values and their meaning are:


          <pre>

          "closed" - No connection state at all.

          "listen" - Waiting for a connection request from any remote TCP and port.

          "syn-sent" - Waiting for a matching connection request after having sent
          a connection request.

          "syn-received" - Waiting for a confirming connection request acknowledgment
          after having both received and sent a connection request.

          "established" - An open connection, data received can be delivered to the
          user.

          "close-wait" - Waiting for a connection termination request from the local
          user.

          "fin-wait-1" - Waiting for a connection termination request from the remote
          TCP, or an acknowledgment of the connection termination request previously
          sent.

          "closing" - Waiting for a connection termination request acknowledgment
          from the remote TCP.

          "last-ack" - Waiting for an acknowledgment of the connection termination
          request previously sent to the remote TCP.

          "fin-wait-2" - Waiting for a connection termination request from the remote
          TCP.

          "time-wait" - Waiting for enough time to pass to be sure the remote TCP
          received the acknowledgment of its connection termination request.

          </pre>

          '
        type: string
      webRxTlsCipherDescription:
        description: The description of the TLS cipher received from the Client, which
          may include cipher name, key exchange and encryption algorithms.
        type: string
      webRxTlsVersion:
        description: The version of TLS used during reception from the Client.
        type: string
      webSessionId:
        description: The identifier (ID) of the web transport session for the Client.
        type: string
      webTxByteCount:
        description: The amount of web transport messages transmitted to the Client,
          in bytes (B).
        format: int64
        type: integer
      webTxEncoding:
        description: 'The type of encoding used during transmission to the Client.
          The allowed values and their meaning are:


          <pre>

          "binary" - The Client is using binary encoding.

          "base64" - The Client is using base64 encoding.

          "illegal" - The Client is using an illegal encoding type.

          </pre>

          '
        type: string
      webTxMsgCount:
        description: The number of web transport messages transmitted to the Client.
        format: int64
        type: integer
      webTxProtocol:
        description: 'The type of web transport used during transmission to the Client.
          The allowed values and their meaning are:


          <pre>

          "ws-binary" - The Client is using WebSocket binary transport.

          "http-binary-streaming" - The Client is using HTTP binary streaming transport.

          "http-binary" - The Client is using HTTP binary transport.

          "http-base64" - The Client is using HTTP base64 transport.

          </pre>

          '
        type: string
      webTxRequestCount:
        description: The number of web transport requests transmitted to the Client
          (HTTP only). Not available for WebSockets.
        format: int64
        type: integer
      webTxResponseCount:
        description: The number of web transport responses received from the Client
          on the transmit connection (HTTP only). Not available for WebSockets.
        format: int64
        type: integer
      webTxTcpState:
        description: 'The TCP state of the transmit connection to the Client. When
          fully operational, should be: established. See RFC 793 for further details.
          The allowed values and their meaning are:


          <pre>

          "closed" - No connection state at all.

          "listen" - Waiting for a connection request from any remote TCP and port.

          "syn-sent" - Waiting for a matching connection request after having sent
          a connection request.

          "syn-received" - Waiting for a confirming connection request acknowledgment
          after having both received and sent a connection request.

          "established" - An open connection, data received can be delivered to the
          user.

          "close-wait" - Waiting for a connection termination request from the local
          user.

          "fin-wait-1" - Waiting for a connection termination request from the remote
          TCP, or an acknowledgment of the connection termination request previously
          sent.

          "closing" - Waiting for a connection termination request acknowledgment
          from the remote TCP.

          "last-ack" - Waiting for an acknowledgment of the connection termination
          request previously sent to the remote TCP.

          "fin-wait-2" - Waiting for a connection termination request from the remote
          TCP.

          "time-wait" - Waiting for enough time to pass to be sure the remote TCP
          received the acknowledgment of its connection termination request.

          </pre>

          '
        type: string
      webTxTlsCipherDescription:
        description: The description of the TLS cipher transmitted to the Client,
          which may include cipher name, key exchange and encryption algorithms.
        type: string
      webTxTlsVersion:
        description: The version of TLS used during transmission to the Client.
        type: string
    type: object
  MsgVpnClientCollections:
    properties:
      connections:
        $ref: '#/definitions/MsgVpnClientCollectionsConnections'
      rxFlows:
        $ref: '#/definitions/MsgVpnClientCollectionsRxflows'
      subscriptions:
        $ref: '#/definitions/MsgVpnClientCollectionsSubscriptions'
      transactedSessions:
        $ref: '#/definitions/MsgVpnClientCollectionsTransactedsessions'
      txFlows:
        $ref: '#/definitions/MsgVpnClientCollectionsTxflows'
    type: object
  MsgVpnClientCollectionsConnections:
    properties:
      count:
        description: The total number of objects in the connections collection.
        format: int64
        type: integer
    type: object
  MsgVpnClientCollectionsRxflows:
    properties:
      count:
        description: The total number of objects in the rxFlows collection.
        format: int64
        type: integer
    type: object
  MsgVpnClientCollectionsSubscriptions:
    properties:
      count:
        description: The total number of objects in the subscriptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnClientCollectionsTransactedsessions:
    properties:
      count:
        description: The total number of objects in the transactedSessions collection.
        format: int64
        type: integer
    type: object
  MsgVpnClientCollectionsTxflows:
    properties:
      count:
        description: The total number of objects in the txFlows collection.
        format: int64
        type: integer
    type: object
  MsgVpnClientConnection:
    properties:
      clientAddress:
        description: The IP address and TCP port on the Client side of the Client
          Connection.
        type: string
      clientName:
        description: The name of the Client.
        type: string
      compression:
        description: Indicates whether compression is enabled for the Client Connection.
        type: boolean
      encryption:
        description: Indicates whether encryption (TLS) is enabled for the Client
          Connection.
        type: boolean
      fastRetransmitCount:
        description: The number of TCP fast retransmits due to duplicate acknowledgments
          (ACKs). See RFC 5681 for further details.
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      rxQueueByteCount:
        description: The number of bytes currently in the receive queue for the Client
          Connection.
        format: int32
        type: integer
      segmentReceivedOutOfOrderCount:
        description: The number of TCP segments received from the Client Connection
          out of order.
        format: int32
        type: integer
      smoothedRoundTripTime:
        description: The TCP smoothed round-trip time (SRTT) for the Client Connection,
          in nanoseconds. See RFC 2988 for further details.
        format: int64
        type: integer
      tcpState:
        description: 'The TCP state of the Client Connection. When fully operational,
          should be: established. See RFC 793 for further details. The allowed values
          and their meaning are:


          <pre>

          "closed" - No connection state at all.

          "listen" - Waiting for a connection request from any remote TCP and port.

          "syn-sent" - Waiting for a matching connection request after having sent
          a connection request.

          "syn-received" - Waiting for a confirming connection request acknowledgment
          after having both received and sent a connection request.

          "established" - An open connection, data received can be delivered to the
          user.

          "close-wait" - Waiting for a connection termination request from the local
          user.

          "fin-wait-1" - Waiting for a connection termination request from the remote
          TCP, or an acknowledgment of the connection termination request previously
          sent.

          "closing" - Waiting for a connection termination request acknowledgment
          from the remote TCP.

          "last-ack" - Waiting for an acknowledgment of the connection termination
          request previously sent to the remote TCP.

          "fin-wait-2" - Waiting for a connection termination request from the remote
          TCP.

          "time-wait" - Waiting for enough time to pass to be sure the remote TCP
          received the acknowledgment of its connection termination request.

          </pre>

          '
        type: string
      timedRetransmitCount:
        description: The number of TCP segments retransmitted due to timeout awaiting
          an acknowledgement (ACK). See RFC 793 for further details.
        format: int32
        type: integer
      txQueueByteCount:
        description: The number of bytes currently in the transmit queue for the Client
          Connection.
        format: int32
        type: integer
      uptime:
        description: The amount of time in seconds since the Client Connection was
          established.
        format: int32
        type: integer
    type: object
  MsgVpnClientConnectionCollections:
    properties: {}
    type: object
  MsgVpnClientConnectionLinks:
    properties:
      uri:
        description: The URI of this Client Connection object.
        type: string
    type: object
  MsgVpnClientConnectionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientConnectionCollections'
      data:
        $ref: '#/definitions/MsgVpnClientConnection'
      links:
        $ref: '#/definitions/MsgVpnClientConnectionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientConnectionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientConnectionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientConnection'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientConnectionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientLinks:
    properties:
      connectionsUri:
        description: The URI of this Client's collection of Client Connection objects.
        type: string
      rxFlowsUri:
        description: The URI of this Client's collection of Client Receive Flow objects.
        type: string
      subscriptionsUri:
        description: The URI of this Client's collection of Client Subscription objects.
        type: string
      transactedSessionsUri:
        description: The URI of this Client's collection of Client Transacted Session
          objects.
        type: string
      txFlowsUri:
        description: The URI of this Client's collection of Client Transmit Flow objects.
        type: string
      uri:
        description: The URI of this Client object.
        type: string
    type: object
  MsgVpnClientProfile:
    properties:
      allowBridgeConnectionsEnabled:
        description: Indicates whether Bridge clients using the Client Profile are
          allowed to connect.
        type: boolean
      allowCutThroughForwardingEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to bind to endpoints with the cut-through forwarding delivery mode.
        type: boolean
      allowGuaranteedEndpointCreateDurability:
        description: "Indicates whether clients using the Client Profile are allowed\
          \ to create durable and/or non-durable topic endponts or queues. The allowed\
          \ values and their meaning are:\n\n<pre>\n\"all\" - Client can create any\
          \ type of endpoint.\n\"durable\" - Client can create only durable endpoints.\n\
          \"non-durable\" - Client can create only non-durable endpoints.\n</pre>\n\
          \ Available since 2.14."
        enum:
        - all
        - durable
        - non-durable
        type: string
      allowGuaranteedEndpointCreateEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to create topic endponts or queues.
        type: boolean
      allowGuaranteedMsgReceiveEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to receive guaranteed messages.
        type: boolean
      allowGuaranteedMsgSendEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to send guaranteed messages.
        type: boolean
      allowSharedSubscriptionsEnabled:
        description: Indicates whether shared subscriptions are allowed. Changing
          this setting does not affect existing subscriptions.
        type: boolean
      allowTransactedSessionsEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to establish transacted sessions.
        type: boolean
      apiQueueManagementCopyFromOnCreateName:
        description: The name of a queue to copy settings from when a new queue is
          created by a client using the Client Profile. The referenced queue must
          exist in the Message VPN. Deprecated since 2.14. This attribute has been
          replaced with `apiQueueManagementCopyFromOnCreateTemplateName`.
        type: string
      apiQueueManagementCopyFromOnCreateTemplateName:
        description: The name of a queue template to copy settings from when a new
          queue is created by a client using the Client Profile. If the referenced
          queue template does not exist, queue creation will fail when it tries to
          resolve this template. Available since 2.14.
        type: string
      apiTopicEndpointManagementCopyFromOnCreateName:
        description: The name of a topic endpoint to copy settings from when a new
          topic endpoint is created by a client using the Client Profile. The referenced
          topic endpoint must exist in the Message VPN. Deprecated since 2.14. This
          attribute has been replaced with `apiTopicEndpointManagementCopyFromOnCreateTemplateName`.
        type: string
      apiTopicEndpointManagementCopyFromOnCreateTemplateName:
        description: The name of a topic endpoint template to copy settings from when
          a new topic endpoint is created by a client using the Client Profile. If
          the referenced topic endpoint template does not exist, topic endpoint creation
          will fail when it tries to resolve this template. Available since 2.14.
        type: string
      clientProfileName:
        description: The name of the Client Profile.
        type: string
      compressionEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to use compression.
        type: boolean
      elidingDelay:
        description: The amount of time to delay the delivery of messages to clients
          using the Client Profile after the initial message has been delivered (the
          eliding delay interval), in milliseconds. A value of 0 means there is no
          delay in delivering messages to clients.
        format: int64
        type: integer
      elidingEnabled:
        description: Indicates whether message eliding is enabled for clients using
          the Client Profile.
        type: boolean
      elidingMaxTopicCount:
        description: The maximum number of topics tracked for message eliding per
          client connection using the Client Profile.
        format: int64
        type: integer
      eventClientProvisionedEndpointSpoolUsageThreshold:
        $ref: '#/definitions/EventThresholdByPercent'
      eventConnectionCountPerClientUsernameThreshold:
        $ref: '#/definitions/EventThreshold'
      eventEgressFlowCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventEndpointCountPerClientUsernameThreshold:
        $ref: '#/definitions/EventThreshold'
      eventIngressFlowCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceSmfConnectionCountPerClientUsernameThreshold:
        $ref: '#/definitions/EventThreshold'
      eventServiceWebConnectionCountPerClientUsernameThreshold:
        $ref: '#/definitions/EventThreshold'
      eventSubscriptionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventTransactedSessionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventTransactionCountThreshold:
        $ref: '#/definitions/EventThreshold'
      maxConnectionCountPerClientUsername:
        description: The maximum number of client connections per Client Username
          using the Client Profile.
        format: int64
        type: integer
      maxEffectiveEndpointCount:
        description: The effective maximum number of queues and topic endpoints per
          Client Username using the Client Profile.
        format: int32
        type: integer
      maxEffectiveRxFlowCount:
        description: The effective maximum number of receive flows per client using
          the Client Profile.
        format: int32
        type: integer
      maxEffectiveSubscriptionCount:
        description: The effective maximum number of subscriptions per client using
          the Client Profile.
        format: int32
        type: integer
      maxEffectiveTransactedSessionCount:
        description: The effective maximum number of transacted sessions per client
          using the Client Profile.
        format: int32
        type: integer
      maxEffectiveTransactionCount:
        description: The effective maximum number of transactions per client using
          the Client Profile.
        format: int32
        type: integer
      maxEffectiveTxFlowCount:
        description: The effective maximum number of transmit flows per client using
          the Client Profile.
        format: int32
        type: integer
      maxEgressFlowCount:
        description: The maximum number of transmit flows that can be created by one
          client using the Client Profile.
        format: int64
        type: integer
      maxEndpointCountPerClientUsername:
        description: The maximum number of queues and topic endpoints that can be
          created by clients with the same Client Username using the Client Profile.
        format: int64
        type: integer
      maxIngressFlowCount:
        description: The maximum number of receive flows that can be created by one
          client using the Client Profile.
        format: int64
        type: integer
      maxSubscriptionCount:
        description: The maximum number of subscriptions per client using the Client
          Profile.
        format: int64
        type: integer
      maxTransactedSessionCount:
        description: The maximum number of transacted sessions that can be created
          by one client using the Client Profile.
        format: int64
        type: integer
      maxTransactionCount:
        description: The maximum number of transactions that can be created by one
          client using the Client Profile.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      queueControl1MaxDepth:
        description: The maximum depth of the "Control 1" (C-1) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      queueControl1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Control 1" (C-1) priority queue, regardless of the `queueControl1MaxDepth`
          value.
        format: int32
        type: integer
      queueDirect1MaxDepth:
        description: The maximum depth of the "Direct 1" (D-1) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      queueDirect1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 1" (D-1) priority queue, regardless of the `queueDirect1MaxDepth`
          value.
        format: int32
        type: integer
      queueDirect2MaxDepth:
        description: The maximum depth of the "Direct 2" (D-2) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      queueDirect2MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 2" (D-2) priority queue, regardless of the `queueDirect2MaxDepth`
          value.
        format: int32
        type: integer
      queueDirect3MaxDepth:
        description: The maximum depth of the "Direct 3" (D-3) priority queue, in
          work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      queueDirect3MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Direct 3" (D-3) priority queue, regardless of the `queueDirect3MaxDepth`
          value.
        format: int32
        type: integer
      queueGuaranteed1MaxDepth:
        description: The maximum depth of the "Guaranteed 1" (G-1) priority queue,
          in work units. Each work unit is 2048 bytes of message data.
        format: int32
        type: integer
      queueGuaranteed1MinMsgBurst:
        description: The number of messages that are always allowed entry into the
          "Guaranteed 1" (G-3) priority queue, regardless of the `queueGuaranteed1MaxDepth`
          value.
        format: int32
        type: integer
      rejectMsgToSenderOnNoSubscriptionMatchEnabled:
        description: Indicates whether to send a negative acknowledgement (NACK) to
          a client using the Client Profile when discarding a guaranteed message due
          to no matching subscription found.
        type: boolean
      replicationAllowClientConnectWhenStandbyEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to connect to the Message VPN when its replication state is standby.
        type: boolean
      serviceSmfMaxConnectionCountPerClientUsername:
        description: The maximum number of SMF client connections per Client Username
          using the Client Profile.
        format: int64
        type: integer
      serviceWebInactiveTimeout:
        description: The timeout for inactive Web Transport client sessions using
          the Client Profile, in seconds.
        format: int64
        type: integer
      serviceWebMaxConnectionCountPerClientUsername:
        description: The maximum number of Web Transport client connections per Client
          Username using the Client Profile.
        format: int64
        type: integer
      serviceWebMaxPayload:
        description: The maximum Web Transport payload size before fragmentation occurs
          for clients using the Client Profile, in bytes. The size of the header is
          not included.
        format: int64
        type: integer
      tcpCongestionWindowSize:
        description: The TCP initial congestion window size for clients using the
          Client Profile, in multiples of the TCP Maximum Segment Size (MSS). Changing
          the value from its default of 2 results in non-compliance with RFC 2581.
          Contact Solace Support before changing this value.
        format: int64
        type: integer
      tcpKeepaliveCount:
        description: The number of TCP keepalive retransmissions to a client using
          the Client Profile before declaring that it is not available.
        format: int64
        type: integer
      tcpKeepaliveIdleTime:
        description: The amount of time a client connection using the Client Profile
          must remain idle before TCP begins sending keepalive probes, in seconds.
        format: int64
        type: integer
      tcpKeepaliveInterval:
        description: The amount of time between TCP keepalive retransmissions to a
          client using the Client Profile when no acknowledgement is received, in
          seconds.
        format: int64
        type: integer
      tcpMaxSegmentSize:
        description: The TCP maximum segment size for clients using the Client Profile,
          in kilobytes. Changes are applied to all existing connections.
        format: int64
        type: integer
      tcpMaxWindowSize:
        description: The TCP maximum window size for clients using the Client Profile,
          in kilobytes. Changes are applied to all existing connections.
        format: int64
        type: integer
      tlsAllowDowngradeToPlainTextEnabled:
        description: Indicates whether clients using the Client Profile are allowed
          to downgrade an encrypted connection to plain text.
        type: boolean
    type: object
  MsgVpnClientProfileCollections:
    properties: {}
    type: object
  MsgVpnClientProfileLinks:
    properties:
      uri:
        description: The URI of this Client Profile object.
        type: string
    type: object
  MsgVpnClientProfileResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientProfileCollections'
      data:
        $ref: '#/definitions/MsgVpnClientProfile'
      links:
        $ref: '#/definitions/MsgVpnClientProfileLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientProfilesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientProfileCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientProfile'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientProfileLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientCollections'
      data:
        $ref: '#/definitions/MsgVpnClient'
      links:
        $ref: '#/definitions/MsgVpnClientLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientRxFlow:
    properties:
      clientName:
        description: The name of the Client.
        type: string
      connectTime:
        description: The timestamp of when the Flow from the Client connected.
        format: int32
        type: integer
      destinationGroupErrorDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to a destination group error.
        format: int64
        type: integer
      duplicateDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to being a duplicate.
        format: int64
        type: integer
      endpointDisabledDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to an eligible endpoint destination being disabled.
        format: int64
        type: integer
      endpointUsageExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to an eligible endpoint destination having its maximum message spool usage
          exceeded.
        format: int64
        type: integer
      erroredDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to errors being detected.
        format: int64
        type: integer
      flowId:
        description: The identifier (ID) of the flow.
        format: int64
        type: integer
      flowName:
        description: The name of the Flow.
        type: string
      guaranteedMsgCount:
        description: The number of guaranteed messages from the Flow.
        format: int64
        type: integer
      lastRxMsgId:
        description: The identifier (ID) of the last message received on the Flow.
        format: int64
        type: integer
      localMsgCountExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the maximum number of messages allowed on the broker being exceeded.
        format: int64
        type: integer
      lowPriorityMsgCongestionDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to congestion of low priority messages.
        format: int64
        type: integer
      maxMsgSizeExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the maximum allowed message size being exceeded.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      noEligibleDestinationsDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to there being no eligible endpoint destination.
        format: int64
        type: integer
      noLocalDeliveryDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to no local delivery being requested.
        format: int64
        type: integer
      notCompatibleWithForwardingModeDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to being incompatible with the forwarding mode of an eligible endpoint destination.
        format: int64
        type: integer
      outOfOrderDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to being received out of order.
        format: int64
        type: integer
      publishAclDeniedDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to being denied by the access control list (ACL) profile for the published
          topic.
        format: int64
        type: integer
      publisherId:
        description: The identifier (ID) of the publisher for the Flow.
        format: int64
        type: integer
      queueNotFoundDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the destination queue not being found.
        format: int64
        type: integer
      replicationStandbyDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the Message VPN being in the replication standby state.
        format: int64
        type: integer
      sessionName:
        description: The name of the transacted session on the Flow.
        type: string
      smfTtlExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the message time-to-live (TTL) count being exceeded. The message TTL
          count is the maximum number of times the message can cross a bridge between
          Message VPNs.
        format: int64
        type: integer
      spoolFileLimitExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to all available message spool file resources being used.
        format: int64
        type: integer
      spoolNotReadyDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the message spool being not ready.
        format: int64
        type: integer
      spoolToAdbFailDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to a failure while spooling to the Assured Delivery Blade (ADB).
        format: int64
        type: integer
      spoolToDiskFailDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to a failure while spooling to the disk.
        format: int64
        type: integer
      spoolUsageExceededDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to the maximum message spool usage being exceeded.
        format: int64
        type: integer
      syncReplicationIneligibleDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to synchronous replication being ineligible.
        format: int64
        type: integer
      userProfileDeniedGuaranteedDiscardedMsgCount:
        description: The number of guaranteed messages from the Flow discarded due
          to being denied by the client profile.
        format: int64
        type: integer
      windowSize:
        description: The size of the window used for guaranteed messages sent on the
          Flow, in messages.
        format: int32
        type: integer
    type: object
  MsgVpnClientRxFlowCollections:
    properties: {}
    type: object
  MsgVpnClientRxFlowLinks:
    properties:
      uri:
        description: The URI of this Client Receive Flow object.
        type: string
    type: object
  MsgVpnClientRxFlowResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientRxFlowCollections'
      data:
        $ref: '#/definitions/MsgVpnClientRxFlow'
      links:
        $ref: '#/definitions/MsgVpnClientRxFlowLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientRxFlowsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientRxFlowCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientRxFlow'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientRxFlowLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientSubscription:
    properties:
      clientName:
        description: The name of the Client.
        type: string
      dtoPriority:
        description: 'The priority of the Subscription topic for receiving deliver-to-one
          (DTO) messages. The allowed values and their meaning are:


          <pre>

          "p1" - The 1st or highest priority.

          "p2" - The 2nd highest priority.

          "p3" - The 3rd highest priority.

          "p4" - The 4th highest priority.

          "da" - Ignore priority and deliver always.

          </pre>

          '
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      subscriptionTopic:
        description: The topic of the Subscription.
        type: string
    type: object
  MsgVpnClientSubscriptionCollections:
    properties: {}
    type: object
  MsgVpnClientSubscriptionLinks:
    properties:
      uri:
        description: The URI of this Client Subscription object.
        type: string
    type: object
  MsgVpnClientSubscriptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientSubscriptionCollections'
      data:
        $ref: '#/definitions/MsgVpnClientSubscription'
      links:
        $ref: '#/definitions/MsgVpnClientSubscriptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientSubscriptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientSubscriptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientSubscription'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientSubscriptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientTransactedSession:
    properties:
      clientName:
        description: The name of the Client.
        type: string
      commitCount:
        description: The number of transactions committed within the Transacted Session.
        format: int64
        type: integer
      commitFailureCount:
        description: The number of transaction commit operations that failed.
        format: int64
        type: integer
      commitSuccessCount:
        description: The number of transaction commit operations that succeeded.
        format: int64
        type: integer
      consumedMsgCount:
        description: The number of messages consumed within the Transacted Session.
        format: int64
        type: integer
      endFailFailureCount:
        description: The number of transaction end fail operations that failed.
        format: int64
        type: integer
      endFailSuccessCount:
        description: The number of transaction end fail operations that succeeded.
        format: int64
        type: integer
      endFailureCount:
        description: The number of transaction end operations that failed.
        format: int64
        type: integer
      endRollbackFailureCount:
        description: The number of transaction end rollback operations that failed.
        format: int64
        type: integer
      endRollbackSuccessCount:
        description: The number of transaction end rollback operations that succeeded.
        format: int64
        type: integer
      endSuccessCount:
        description: The number of transaction end operations that succeeded.
        format: int64
        type: integer
      failureCount:
        description: The number of transactions that failed within the Transacted
          Session.
        format: int64
        type: integer
      forgetFailureCount:
        description: The number of transaction forget operations that failed.
        format: int64
        type: integer
      forgetSuccessCount:
        description: The number of transaction forget operations that succeeded.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      onePhaseCommitFailureCount:
        description: The number of transaction one-phase commit operations that failed.
        format: int64
        type: integer
      onePhaseCommitSuccessCount:
        description: The number of transaction one-phase commit operations that succeeded.
        format: int64
        type: integer
      pendingConsumedMsgCount:
        description: The number of messages to be consumed when the transaction is
          committed.
        format: int32
        type: integer
      pendingPublishedMsgCount:
        description: The number of messages to be published when the transaction is
          committed.
        format: int32
        type: integer
      prepareFailureCount:
        description: The number of transaction prepare operations that failed.
        format: int64
        type: integer
      prepareSuccessCount:
        description: The number of transaction prepare operations that succeeded.
        format: int64
        type: integer
      previousTransactionState:
        description: 'The state of the previous transaction. The allowed values and
          their meaning are:


          <pre>

          "none" - The previous transaction had no state.

          "committed" - The previous transaction was committed.

          "rolled-back" - The previous transaction was rolled back.

          "failed" - The previous transaction failed.

          </pre>

          '
        type: string
      publishedMsgCount:
        description: The number of messages published within the Transacted Session.
        format: int64
        type: integer
      resumeFailureCount:
        description: The number of transaction resume operations that failed.
        format: int64
        type: integer
      resumeSuccessCount:
        description: The number of transaction resume operations that succeeded.
        format: int64
        type: integer
      retrievedMsgCount:
        description: The number of messages retrieved within the Transacted Session.
        format: int64
        type: integer
      rollbackCount:
        description: The number of transactions rolled back within the Transacted
          Session.
        format: int64
        type: integer
      rollbackFailureCount:
        description: The number of transaction rollback operations that failed.
        format: int64
        type: integer
      rollbackSuccessCount:
        description: The number of transaction rollback operations that succeeded.
        format: int64
        type: integer
      sessionName:
        description: The name of the Transacted Session.
        type: string
      spooledMsgCount:
        description: The number of messages spooled within the Transacted Session.
        format: int64
        type: integer
      startFailureCount:
        description: The number of transaction start operations that failed.
        format: int64
        type: integer
      startSuccessCount:
        description: The number of transaction start operations that succeeded.
        format: int64
        type: integer
      successCount:
        description: The number of transactions that succeeded within the Transacted
          Session.
        format: int64
        type: integer
      suspendFailureCount:
        description: The number of transaction suspend operations that failed.
        format: int64
        type: integer
      suspendSuccessCount:
        description: The number of transaction suspend operations that succeeded.
        format: int64
        type: integer
      transactionId:
        description: The identifier (ID) of the transaction in the Transacted Session.
        format: int32
        type: integer
      transactionState:
        description: 'The state of the current transaction. The allowed values and
          their meaning are:


          <pre>

          "in-progress" - The current transaction is in progress.

          "committing" - The current transaction is committing.

          "rolling-back" - The current transaction is rolling back.

          "failing" - The current transaction is failing.

          </pre>

          '
        type: string
      twoPhaseCommitFailureCount:
        description: The number of transaction two-phase commit operations that failed.
        format: int64
        type: integer
      twoPhaseCommitSuccessCount:
        description: The number of transaction two-phase commit operations that succeeded.
        format: int64
        type: integer
    type: object
  MsgVpnClientTransactedSessionCollections:
    properties: {}
    type: object
  MsgVpnClientTransactedSessionLinks:
    properties:
      uri:
        description: The URI of this Client Transacted Session object.
        type: string
    type: object
  MsgVpnClientTransactedSessionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientTransactedSessionCollections'
      data:
        $ref: '#/definitions/MsgVpnClientTransactedSession'
      links:
        $ref: '#/definitions/MsgVpnClientTransactedSessionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientTransactedSessionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientTransactedSessionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientTransactedSession'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientTransactedSessionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientTxFlow:
    properties:
      clientName:
        description: The name of the Client.
        type: string
      endpointName:
        description: The name of the Queue or Topic Endpoint bound.
        type: string
      endpointType:
        description: 'The type of endpoint bound. The allowed values and their meaning
          are:


          <pre>

          "queue" - The Client is bound to a Queue.

          "topic-endpoint" - The Client is bound to a Topic Endpoint.

          </pre>

          '
        type: string
      flowId:
        description: The identifier (ID) of the flow.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnClientTxFlowCollections:
    properties: {}
    type: object
  MsgVpnClientTxFlowLinks:
    properties:
      uri:
        description: The URI of this Client Transmit Flow object.
        type: string
    type: object
  MsgVpnClientTxFlowResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientTxFlowCollections'
      data:
        $ref: '#/definitions/MsgVpnClientTxFlow'
      links:
        $ref: '#/definitions/MsgVpnClientTxFlowLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientTxFlowsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientTxFlowCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientTxFlow'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientTxFlowLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientUsername:
    properties:
      aclProfileName:
        description: The ACL Profile of the Client Username.
        type: string
      clientProfileName:
        description: The Client Profile of the Client Username.
        type: string
      clientUsername:
        description: The name of the Client Username.
        type: string
      dynamic:
        description: Indicates whether the Client Username was dynamically created
          based on remote authorization data.
        type: boolean
      enabled:
        description: Indicates whether the Client Username is enabled.
        type: boolean
      guaranteedEndpointPermissionOverrideEnabled:
        description: Indicates whether the guaranteed endpoint permission override
          is enabled for the Client Username.
        type: boolean
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      subscriptionManagerEnabled:
        description: Indicates whether the subscription management capability is enabled
          for the Client Username.
        type: boolean
    type: object
  MsgVpnClientUsernameCollections:
    properties: {}
    type: object
  MsgVpnClientUsernameLinks:
    properties:
      uri:
        description: The URI of this Client Username object.
        type: string
    type: object
  MsgVpnClientUsernameResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnClientUsernameCollections'
      data:
        $ref: '#/definitions/MsgVpnClientUsername'
      links:
        $ref: '#/definitions/MsgVpnClientUsernameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientUsernamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientUsernameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClientUsername'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientUsernameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnClientsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnClientCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnClient'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnClientLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnCollections:
    properties:
      aclProfiles:
        $ref: '#/definitions/MsgVpnCollectionsAclprofiles'
      authenticationOauthProviders:
        $ref: '#/definitions/MsgVpnCollectionsAuthenticationoauthproviders'
      authorizationGroups:
        $ref: '#/definitions/MsgVpnCollectionsAuthorizationgroups'
      bridges:
        $ref: '#/definitions/MsgVpnCollectionsBridges'
      clientProfiles:
        $ref: '#/definitions/MsgVpnCollectionsClientprofiles'
      clientUsernames:
        $ref: '#/definitions/MsgVpnCollectionsClientusernames'
      clients:
        $ref: '#/definitions/MsgVpnCollectionsClients'
      configSyncRemoteNodes:
        $ref: '#/definitions/MsgVpnCollectionsConfigsyncremotenodes'
      distributedCaches:
        $ref: '#/definitions/MsgVpnCollectionsDistributedcaches'
      dmrBridges:
        $ref: '#/definitions/MsgVpnCollectionsDmrbridges'
      jndiConnectionFactories:
        $ref: '#/definitions/MsgVpnCollectionsJndiconnectionfactories'
      jndiQueues:
        $ref: '#/definitions/MsgVpnCollectionsJndiqueues'
      jndiTopics:
        $ref: '#/definitions/MsgVpnCollectionsJnditopics'
      mqttRetainCaches:
        $ref: '#/definitions/MsgVpnCollectionsMqttretaincaches'
      mqttSessions:
        $ref: '#/definitions/MsgVpnCollectionsMqttsessions'
      queueTemplates:
        $ref: '#/definitions/MsgVpnCollectionsQueuetemplates'
      queues:
        $ref: '#/definitions/MsgVpnCollectionsQueues'
      replayLogs:
        $ref: '#/definitions/MsgVpnCollectionsReplaylogs'
      replicatedTopics:
        $ref: '#/definitions/MsgVpnCollectionsReplicatedtopics'
      restDeliveryPoints:
        $ref: '#/definitions/MsgVpnCollectionsRestdeliverypoints'
      topicEndpointTemplates:
        $ref: '#/definitions/MsgVpnCollectionsTopicendpointtemplates'
      topicEndpoints:
        $ref: '#/definitions/MsgVpnCollectionsTopicendpoints'
      transactions:
        $ref: '#/definitions/MsgVpnCollectionsTransactions'
    type: object
  MsgVpnCollectionsAclprofiles:
    properties:
      count:
        description: The total number of objects in the aclProfiles collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsAuthenticationoauthproviders:
    properties:
      count:
        description: The total number of objects in the authenticationOauthProviders
          collection. Available since 2.13.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsAuthorizationgroups:
    properties:
      count:
        description: The total number of objects in the authorizationGroups collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsBridges:
    properties:
      count:
        description: The total number of objects in the bridges collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsClientprofiles:
    properties:
      count:
        description: The total number of objects in the clientProfiles collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsClients:
    properties:
      count:
        description: The total number of objects in the clients collection. Available
          since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsClientusernames:
    properties:
      count:
        description: The total number of objects in the clientUsernames collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsConfigsyncremotenodes:
    properties:
      count:
        description: The total number of objects in the configSyncRemoteNodes collection.
          Available since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsDistributedcaches:
    properties:
      count:
        description: The total number of objects in the distributedCaches collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsDmrbridges:
    properties:
      count:
        description: The total number of objects in the dmrBridges collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsJndiconnectionfactories:
    properties:
      count:
        description: The total number of objects in the jndiConnectionFactories collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsJndiqueues:
    properties:
      count:
        description: The total number of objects in the jndiQueues collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsJnditopics:
    properties:
      count:
        description: The total number of objects in the jndiTopics collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsMqttretaincaches:
    properties:
      count:
        description: The total number of objects in the mqttRetainCaches collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsMqttsessions:
    properties:
      count:
        description: The total number of objects in the mqttSessions collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsQueues:
    properties:
      count:
        description: The total number of objects in the queues collection. Available
          since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsQueuetemplates:
    properties:
      count:
        description: The total number of objects in the queueTemplates collection.
          Available since 2.14.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsReplaylogs:
    properties:
      count:
        description: The total number of objects in the replayLogs collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsReplicatedtopics:
    properties:
      count:
        description: The total number of objects in the replicatedTopics collection.
          Available since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsRestdeliverypoints:
    properties:
      count:
        description: The total number of objects in the restDeliveryPoints collection.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsTopicendpoints:
    properties:
      count:
        description: The total number of objects in the topicEndpoints collection.
          Available since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsTopicendpointtemplates:
    properties:
      count:
        description: The total number of objects in the topicEndpointTemplates collection.
          Available since 2.14.
        format: int64
        type: integer
    type: object
  MsgVpnCollectionsTransactions:
    properties:
      count:
        description: The total number of objects in the transactions collection. Available
          since 2.12.
        format: int64
        type: integer
    type: object
  MsgVpnConfigSyncRemoteNode:
    properties:
      lastMsgRxTime:
        description: The amount of time in seconds since the last message was received
          from the config sync table of the remote Message VPN.
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      remoteNodeName:
        description: The name of the Config Sync Remote Node.
        type: string
      role:
        description: 'The role of the config sync table of the remote Message VPN.
          The allowed values and their meaning are:


          <pre>

          "unknown" - The role is unknown.

          "primary" - Acts as the primary source of config data.

          "replica" - Acts as a replica of the primary config data.

          </pre>

          '
        type: string
      stale:
        description: Indicates whether the config sync table of the remote Message
          VPN is stale.
        type: boolean
      state:
        description: 'The state of the config sync table of the remote Message VPN.
          The allowed values and their meaning are:


          <pre>

          "unknown" - The state is unknown.

          "in-sync" - The config data is synchronized between Message VPNs.

          "reconciling" - The config data is reconciling between Message VPNs.

          "blocked" - The config data is blocked from reconciling due to an error.

          "out-of-sync" - The config data is out of sync between Message VPNs.

          "down" - The state is down due to configuration.

          </pre>

          '
        type: string
      timeInState:
        description: The amount of time in seconds the config sync table of the remote
          Message VPN has been in the current state.
        format: int32
        type: integer
    type: object
  MsgVpnConfigSyncRemoteNodeCollections:
    properties: {}
    type: object
  MsgVpnConfigSyncRemoteNodeLinks:
    properties:
      uri:
        description: The URI of this Config Sync Remote Node object.
        type: string
    type: object
  MsgVpnConfigSyncRemoteNodeResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnConfigSyncRemoteNodeCollections'
      data:
        $ref: '#/definitions/MsgVpnConfigSyncRemoteNode'
      links:
        $ref: '#/definitions/MsgVpnConfigSyncRemoteNodeLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnConfigSyncRemoteNodesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnConfigSyncRemoteNodeCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnConfigSyncRemoteNode'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnConfigSyncRemoteNodeLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnCounter:
    description: The counters for the Message VPN. Deprecated since 2.13. All attributes
      in this object have been moved to the MsgVpn object.
    properties:
      controlRxByteCount:
        description: The amount of client control messages received from clients by
          the Message VPN, in bytes (B). Deprecated since 2.13. This attribute has
          been moved to the MsgVpn object.
        format: int64
        type: integer
      controlRxMsgCount:
        description: The number of client control messages received from clients by
          the Message VPN. Deprecated since 2.13. This attribute has been moved to
          the MsgVpn object.
        format: int64
        type: integer
      controlTxByteCount:
        description: The amount of client control messages transmitted to clients
          by the Message VPN, in bytes (B). Deprecated since 2.13. This attribute
          has been moved to the MsgVpn object.
        format: int64
        type: integer
      controlTxMsgCount:
        description: The number of client control messages transmitted to clients
          by the Message VPN. Deprecated since 2.13. This attribute has been moved
          to the MsgVpn object.
        format: int64
        type: integer
      dataRxByteCount:
        description: The amount of client data messages received from clients by the
          Message VPN, in bytes (B). Deprecated since 2.13. This attribute has been
          moved to the MsgVpn object.
        format: int64
        type: integer
      dataRxMsgCount:
        description: The number of client data messages received from clients by the
          Message VPN. Deprecated since 2.13. This attribute has been moved to the
          MsgVpn object.
        format: int64
        type: integer
      dataTxByteCount:
        description: The amount of client data messages transmitted to clients by
          the Message VPN, in bytes (B). Deprecated since 2.13. This attribute has
          been moved to the MsgVpn object.
        format: int64
        type: integer
      dataTxMsgCount:
        description: The number of client data messages transmitted to clients by
          the Message VPN. Deprecated since 2.13. This attribute has been moved to
          the MsgVpn object.
        format: int64
        type: integer
      discardedRxMsgCount:
        description: The number of messages discarded during reception by the Message
          VPN. Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int32
        type: integer
      discardedTxMsgCount:
        description: The number of messages discarded during transmission by the Message
          VPN. Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int32
        type: integer
      loginRxMsgCount:
        description: The number of login request messages received by the Message
          VPN. Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int64
        type: integer
      loginTxMsgCount:
        description: The number of login response messages transmitted by the Message
          VPN. Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int64
        type: integer
      msgSpoolRxMsgCount:
        description: The number of guaranteed messages received by the Message VPN.
          Deprecated since 2.13. This attribute has been moved to the MsgVpn object.
        format: int64
        type: integer
      msgSpoolTxMsgCount:
        description: The number of guaranteed messages transmitted by the Message
          VPN. One message to multiple clients is counted as one message. Deprecated
          since 2.13. This attribute has been moved to the MsgVpn object.
        format: int64
        type: integer
      tlsRxByteCount:
        description: The amount of TLS messages received by the Message VPN, in bytes
          (B). Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int64
        type: integer
      tlsTxByteCount:
        description: The amount of TLS messages transmitted by the Message VPN, in
          bytes (B). Deprecated since 2.13. This attribute has been moved to the MsgVpn
          object.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCache:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      enabled:
        description: Indicates whether the Distributed Cache is enabled.
        type: boolean
      heartbeat:
        description: The heartbeat interval, in seconds, used by the Cache Instances
          to monitor connectivity with the message broker.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      msgsLost:
        description: Indicates whether one or more messages were lost by any Cache
          Instance in the Distributed Cache.
        type: boolean
      scheduledDeleteMsgDayList:
        description: The scheduled delete message day(s), specified as "daily" or
          a comma-separated list of days. Days must be specified as "Sun", "Mon",
          "Tue", "Wed", "Thu", "Fri", or "Sat", with no spaces, and in sorted order
          from Sunday to Saturday.
        type: string
      scheduledDeleteMsgTimeList:
        description: The scheduled delete message time(s), specified as "hourly" or
          a comma-separated list of 24-hour times in the form hh:mm, or h:mm. There
          must be no spaces, and times must be in sorted order from 0:00 to 23:59.
        type: string
    type: object
  MsgVpnDistributedCacheCluster:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      deliverToOneOverrideEnabled:
        description: Indicates whether deliver-to-one override is enabled for the
          Cache Cluster.
        type: boolean
      enabled:
        description: Indicates whether the Cache Cluster is enabled.
        type: boolean
      eventDataByteRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      eventDataMsgRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      eventMaxMemoryThreshold:
        $ref: '#/definitions/EventThresholdByPercent'
      eventMaxTopicsThreshold:
        $ref: '#/definitions/EventThresholdByPercent'
      eventRequestQueueDepthThreshold:
        $ref: '#/definitions/EventThresholdByPercent'
      eventRequestRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      eventResponseRateThreshold:
        $ref: '#/definitions/EventThresholdByValue'
      globalCachingEnabled:
        description: Indicates whether global caching for the Cache Cluster is enabled,
          and the Cache Instances will fetch topics from remote Home Cache Clusters
          when requested, and subscribe to those topics to cache them locally.
        type: boolean
      globalCachingHeartbeat:
        description: The heartbeat interval, in seconds, used by the Cache Instances
          to monitor connectivity with the remote Home Cache Clusters.
        format: int64
        type: integer
      globalCachingTopicLifetime:
        description: The topic lifetime, in seconds. If no client requests are received
          for a given global topic over the duration of the topic lifetime, then the
          Cache Instance will remove the subscription and cached messages for that
          topic. A value of 0 disables aging.
        format: int64
        type: integer
      maxMemory:
        description: The maximum memory usage, in megabytes (MB), for each Cache Instance
          in the Cache Cluster.
        format: int64
        type: integer
      maxMsgsPerTopic:
        description: The maximum number of messages per topic for each Cache Instance
          in the Cache Cluster. When at the maximum, old messages are removed as new
          messages arrive.
        format: int64
        type: integer
      maxRequestQueueDepth:
        description: The maximum queue depth for cache requests received by the Cache
          Cluster.
        format: int64
        type: integer
      maxTopicCount:
        description: The maximum number of topics for each Cache Instance in the Cache
          Cluster.
        format: int64
        type: integer
      msgLifetime:
        description: The message lifetime, in seconds. If a message remains cached
          for the duration of its lifetime, the Cache Instance will remove the message.
          A lifetime of 0 results in the message being retained indefinitely.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      msgsLost:
        description: Indicates whether one or more messages were lost by any Cache
          Instance in the Cache Cluster.
        type: boolean
      newTopicAdvertisementEnabled:
        description: Indicates whether advertising of new topics learned by the Cache
          Instances in this Cache Cluster is enabled.
        type: boolean
    type: object
  MsgVpnDistributedCacheClusterCollections:
    properties:
      globalCachingHomeClusters:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterCollectionsGlobalcachinghomeclusters'
      instances:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterCollectionsInstances'
      topics:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterCollectionsTopics'
    type: object
  MsgVpnDistributedCacheClusterCollectionsGlobalcachinghomeclusters:
    properties:
      count:
        description: The total number of objects in the globalCachingHomeClusters
          collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterCollectionsInstances:
    properties:
      count:
        description: The total number of objects in the instances collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterCollectionsTopics:
    properties:
      count:
        description: The total number of objects in the topics collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeCluster:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      homeClusterName:
        description: The name of the remote Home Cache Cluster.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterCollections:
    properties:
      topicPrefixes:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterCollectionsTopicprefixes'
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterCollectionsTopicprefixes:
    properties:
      count:
        description: The total number of objects in the topicPrefixes collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterLinks:
    properties:
      topicPrefixesUri:
        description: The URI of this Home Cache Cluster's collection of Topic Prefix
          objects.
        type: string
      uri:
        description: The URI of this Home Cache Cluster object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeCluster'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      homeClusterName:
        description: The name of the remote Home Cache Cluster.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      topicPrefix:
        description: A topic prefix for global topics available from the remote Home
          Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
        type: string
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixCollections:
    properties: {}
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixLinks:
    properties:
      uri:
        description: The URI of this Topic Prefix object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeCluster'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstance:
    properties:
      autoStartEnabled:
        description: Indicates whether auto-start for the Cache Instance is enabled,
          and the Cache Instance will automatically attempt to transition from the
          Stopped operational state to Up whenever it restarts or reconnects to the
          message broker.
        type: boolean
      averageDataRxBytePeakRate:
        description: The peak of the one minute average of the data message rate received
          by the Cache Instance, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageDataRxByteRate:
        description: The one minute average of the data message rate received by the
          Cache Instance, in bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      averageDataRxMsgPeakRate:
        description: The peak of the one minute average of the data message rate received
          by the Cache Instance, in messages per second (msg/sec). Available since
          2.13.
        format: int64
        type: integer
      averageDataRxMsgRate:
        description: The one minute average of the data message rate received by the
          Cache Instance, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      averageDataTxMsgPeakRate:
        description: The peak of the one minute average of the data message rate transmitted
          by the Cache Instance, in messages per second (msg/sec). Available since
          2.13.
        format: int64
        type: integer
      averageDataTxMsgRate:
        description: The one minute average of the data message rate transmitted by
          the Cache Instance, in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      averageRequestRxPeakRate:
        description: The peak of the one minute average of the request rate received
          by the Cache Instance, in requests per second (req/sec). Available since
          2.13.
        format: int64
        type: integer
      averageRequestRxRate:
        description: The one minute average of the request rate received by the Cache
          Instance, in requests per second (req/sec). Available since 2.13.
        format: int64
        type: integer
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      counter:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceCounter'
      dataRxBytePeakRate:
        description: The data message peak rate received by the Cache Instance, in
          bytes per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      dataRxByteRate:
        description: The data message rate received by the Cache Instance, in bytes
          per second (B/sec). Available since 2.13.
        format: int64
        type: integer
      dataRxMsgPeakRate:
        description: The data message peak rate received by the Cache Instance, in
          messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      dataRxMsgRate:
        description: The data message rate received by the Cache Instance, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      dataTxMsgPeakRate:
        description: The data message peak rate transmitted by the Cache Instance,
          in messages per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      dataTxMsgRate:
        description: The data message rate transmitted by the Cache Instance, in messages
          per second (msg/sec). Available since 2.13.
        format: int64
        type: integer
      enabled:
        description: Indicates whether the Cache Instance is enabled.
        type: boolean
      instanceName:
        description: The name of the Cache Instance.
        type: string
      lastRegisteredTime:
        description: The timestamp of when the Cache Instance last registered with
          the message broker. This value represents the number of seconds since 1970-01-01
          00:00:00 UTC (Unix time).
        format: int32
        type: integer
      lastRxHeartbeatTime:
        description: The timestamp of the last heartbeat message received from the
          Cache Instance. This value represents the number of seconds since 1970-01-01
          00:00:00 UTC (Unix time).
        format: int32
        type: integer
      lastRxSetLostMsgTime:
        description: The timestamp of the last request for setting the lost message
          indication received from the Cache Instance. This value represents the number
          of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      lastStoppedReason:
        description: The reason why the Cache Instance was last stopped.
        type: string
      lastStoppedTime:
        description: The timestamp of when the Cache Instance was last stopped. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      lastTxClearLostMsgTime:
        description: The timestamp of the last request for clearing the lost message
          indication transmitted to the Cache Instance. This value represents the
          number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      memoryUsage:
        description: The memory usage of the Cache Instance, in megabytes (MB).
        format: int32
        type: integer
      msgCount:
        description: The number of messages cached for the Cache Instance. Available
          since 2.13.
        format: int64
        type: integer
      msgPeakCount:
        description: The number of messages cached peak for the Cache Instance. Available
          since 2.13.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      msgsLost:
        description: Indicates whether one or more messages were lost by the Cache
          Instance.
        type: boolean
      rate:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRate'
      requestQueueDepthCount:
        description: The received request message queue depth for the Cache Instance.
          Available since 2.13.
        format: int64
        type: integer
      requestQueueDepthPeakCount:
        description: The received request message queue depth peak for the Cache Instance.
          Available since 2.13.
        format: int64
        type: integer
      requestRxPeakRate:
        description: The request peak rate received by the Cache Instance, in requests
          per second (req/sec). Available since 2.13.
        format: int64
        type: integer
      requestRxRate:
        description: The request rate received by the Cache Instance, in requests
          per second (req/sec). Available since 2.13.
        format: int64
        type: integer
      state:
        description: 'The operational state of the Cache Instance. The allowed values
          and their meaning are:


          <pre>

          "invalid" - The Cache Instance state is invalid.

          "down" - The Cache Instance is operationally down.

          "stopped" - The Cache Instance has stopped processing cache requests.

          "stopped-lost-msg" - The Cache Instance has stopped due to a lost message.

          "register" - The Cache Instance is registering with the broker.

          "config-sync" - The Cache Instance is synchronizing its configuration with
          the broker.

          "cluster-sync" - The Cache Instance is synchronizing its messages with the
          Cache Cluster.

          "up" - The Cache Instance is operationally up.

          "backup" - The Cache Instance is backing up its messages to disk.

          "restore" - The Cache Instance is restoring its messages from disk.

          "not-available" - The Cache Instance state is not available.

          </pre>

          '
        type: string
      stopOnLostMsgEnabled:
        description: Indicates whether stop-on-lost-message is enabled, and the Cache
          Instance will transition to the Stopped operational state upon losing a
          message. When Stopped, it cannot accept or respond to cache requests, but
          continues to cache messages.
        type: boolean
      topicCount:
        description: The number of topics cached for the Cache Instance. Available
          since 2.13.
        format: int64
        type: integer
      topicPeakCount:
        description: The number of topics cached peak for the Cache Instance. Available
          since 2.13.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterInstanceCollections:
    properties:
      remoteGlobalCachingHomeClusters:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceCollectionsRemoteglobalcachinghomeclusters'
      remoteTopics:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceCollectionsRemotetopics'
    type: object
  MsgVpnDistributedCacheClusterInstanceCollectionsRemoteglobalcachinghomeclusters:
    properties:
      count:
        description: The total number of objects in the remoteGlobalCachingHomeClusters
          collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterInstanceCollectionsRemotetopics:
    properties:
      count:
        description: The total number of objects in the remoteTopics collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterInstanceCounter:
    description: The counters associated with the Cache Instance. Deprecated since
      2.13. All attributes in this object have been moved to the MsgVpnDistributedCacheClusterInstance
      object.
    properties:
      msgCount:
        description: The number of messages cached for the Cache Instance. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      msgPeakCount:
        description: The number of messages cached peak for the Cache Instance. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      requestQueueDepthCount:
        description: The received request message queue depth for the Cache Instance.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      requestQueueDepthPeakCount:
        description: The received request message queue depth peak for the Cache Instance.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      topicCount:
        description: The number of topics cached for the Cache Instance. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      topicPeakCount:
        description: The number of topics cached peak for the Cache Instance. Deprecated
          since 2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterInstanceLinks:
    properties:
      remoteGlobalCachingHomeClustersUri:
        description: The URI of this Cache Instance's collection of Remote Home Cache
          Cluster objects.
        type: string
      remoteTopicsUri:
        description: The URI of this Cache Instance's collection of Remote Topic objects.
        type: string
      uri:
        description: The URI of this Cache Instance object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterInstanceRate:
    description: The rates associated with the Cache Instance. Deprecated since 2.13.
      All attributes in this object have been moved to the MsgVpnDistributedCacheClusterInstance
      object.
    properties:
      averageDataRxBytePeakRate:
        description: The peak of the one minute average of the data message rate received
          by the Cache Instance, in bytes per second (B/sec). Deprecated since 2.13.
          This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageDataRxByteRate:
        description: The one minute average of the data message rate received by the
          Cache Instance, in bytes per second (B/sec). Deprecated since 2.13. This
          attribute has been moved to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      averageDataRxMsgPeakRate:
        description: The peak of the one minute average of the data message rate received
          by the Cache Instance, in messages per second (msg/sec). Deprecated since
          2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageDataRxMsgRate:
        description: The one minute average of the data message rate received by the
          Cache Instance, in messages per second (msg/sec). Deprecated since 2.13.
          This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageDataTxMsgPeakRate:
        description: The peak of the one minute average of the data message rate transmitted
          by the Cache Instance, in messages per second (msg/sec). Deprecated since
          2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageDataTxMsgRate:
        description: The one minute average of the data message rate transmitted by
          the Cache Instance, in messages per second (msg/sec). Deprecated since 2.13.
          This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageRequestRxPeakRate:
        description: The peak of the one minute average of the request rate received
          by the Cache Instance, in requests per second (req/sec). Deprecated since
          2.13. This attribute has been moved to the MsgVpnDistributedCacheClusterInstance
          object.
        format: int64
        type: integer
      averageRequestRxRate:
        description: The one minute average of the request rate received by the Cache
          Instance, in requests per second (req/sec). Deprecated since 2.13. This
          attribute has been moved to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataRxBytePeakRate:
        description: The data message peak rate received by the Cache Instance, in
          bytes per second (B/sec). Deprecated since 2.13. This attribute has been
          moved to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataRxByteRate:
        description: The data message rate received by the Cache Instance, in bytes
          per second (B/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataRxMsgPeakRate:
        description: The data message peak rate received by the Cache Instance, in
          messages per second (msg/sec). Deprecated since 2.13. This attribute has
          been moved to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataRxMsgRate:
        description: The data message rate received by the Cache Instance, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataTxMsgPeakRate:
        description: The data message peak rate transmitted by the Cache Instance,
          in messages per second (msg/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      dataTxMsgRate:
        description: The data message rate transmitted by the Cache Instance, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      requestRxPeakRate:
        description: The request peak rate received by the Cache Instance, in requests
          per second (req/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
      requestRxRate:
        description: The request rate received by the Cache Instance, in requests
          per second (req/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpnDistributedCacheClusterInstance object.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeCluster:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      cacheRequestForwardedCount:
        description: The number of cache requests forwarded to the remote Home Cache
          Cluster.
        format: int32
        type: integer
      cacheRequestRxCount:
        description: The number of cache requests received from the remote Home Cache
          Cluster.
        format: int32
        type: integer
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      heartbeatRxCount:
        description: The number of heartbeat messages received from the remote Home
          Cache Cluster.
        format: int64
        type: integer
      heartbeatUp:
        description: Indicates whether the operational state of the heartbeat with
          the remote Home Cache Cluster is up.
        type: boolean
      homeClusterName:
        description: The name of the remote Home Cache Cluster.
        type: string
      instanceName:
        description: The name of the Cache Instance.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterCollections:
    properties: {}
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterLinks:
    properties:
      uri:
        description: The URI of this Remote Home Cache Cluster object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeCluster'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClustersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeCluster'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteTopic:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      globalTopic:
        description: Indicates whether the type of the remote Topic is global.
        type: boolean
      homeClusterName:
        description: The name of the remote Home Cache Cluster.
        type: string
      instanceName:
        description: The name of the Cache Instance.
        type: string
      msgCount:
        description: The number of messages cached for the remote Topic.
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      suspect:
        description: Indicates whether the remote Topic is suspect due to the remote
          Home Cache Cluster being in the lost message state.
        type: boolean
      topic:
        description: The value of the remote Topic.
        type: string
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteTopicCollections:
    properties: {}
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteTopicLinks:
    properties:
      uri:
        description: The URI of this Remote Topic object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteTopicResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopic'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstanceRemoteTopicsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopic'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstanceResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstance'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterInstancesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstance'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterLinks:
    properties:
      globalCachingHomeClustersUri:
        description: The URI of this Cache Cluster's collection of Home Cache Cluster
          objects.
        type: string
      instancesUri:
        description: The URI of this Cache Cluster's collection of Cache Instance
          objects.
        type: string
      topicsUri:
        description: The URI of this Cache Cluster's collection of Topic objects.
        type: string
      uri:
        description: The URI of this Cache Cluster object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheCluster'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterTopic:
    properties:
      cacheName:
        description: The name of the Distributed Cache.
        type: string
      clusterName:
        description: The name of the Cache Cluster.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      topic:
        description: The value of the Topic in the form a/b/c.
        type: string
    type: object
  MsgVpnDistributedCacheClusterTopicCollections:
    properties: {}
    type: object
  MsgVpnDistributedCacheClusterTopicLinks:
    properties:
      uri:
        description: The URI of this Topic object.
        type: string
    type: object
  MsgVpnDistributedCacheClusterTopicResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterTopic'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClusterTopicsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterTopic'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheClustersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheCluster'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheClusterLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCacheCollections:
    properties:
      clusters:
        $ref: '#/definitions/MsgVpnDistributedCacheCollectionsClusters'
    type: object
  MsgVpnDistributedCacheCollectionsClusters:
    properties:
      count:
        description: The total number of objects in the clusters collection.
        format: int64
        type: integer
    type: object
  MsgVpnDistributedCacheLinks:
    properties:
      clustersUri:
        description: The URI of this Distributed Cache's collection of Cache Cluster
          objects.
        type: string
      uri:
        description: The URI of this Distributed Cache object.
        type: string
    type: object
  MsgVpnDistributedCacheResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDistributedCacheCollections'
      data:
        $ref: '#/definitions/MsgVpnDistributedCache'
      links:
        $ref: '#/definitions/MsgVpnDistributedCacheLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDistributedCachesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDistributedCache'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDistributedCacheLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDmrBridge:
    properties:
      failureReason:
        description: The last failure reason for the DMR Bridge.
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      remoteMsgVpnName:
        description: The remote Message VPN of the DMR Bridge.
        type: string
      remoteNodeName:
        description: The name of the node at the remote end of the DMR Bridge.
        type: string
      up:
        description: Indicates whether the operational state of the DMR Bridge is
          up.
        type: boolean
      uptime:
        description: The amount of time in seconds since the DMR Bridge was up.
        format: int64
        type: integer
    type: object
  MsgVpnDmrBridgeCollections:
    properties: {}
    type: object
  MsgVpnDmrBridgeLinks:
    properties:
      uri:
        description: The URI of this DMR Bridge object.
        type: string
    type: object
  MsgVpnDmrBridgeResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnDmrBridgeCollections'
      data:
        $ref: '#/definitions/MsgVpnDmrBridge'
      links:
        $ref: '#/definitions/MsgVpnDmrBridgeLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnDmrBridgesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnDmrBridgeCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnDmrBridge'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnDmrBridgeLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiConnectionFactoriesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnJndiConnectionFactoryCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnJndiConnectionFactory'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnJndiConnectionFactoryLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiConnectionFactory:
    properties:
      allowDuplicateClientIdEnabled:
        description: Indicates whether new JMS connections can use the same Client
          identifier (ID) as an existing connection.
        type: boolean
      clientDescription:
        description: The description of the Client.
        type: string
      clientId:
        description: The Client identifier (ID). If not specified, a unique value
          for it will be generated.
        type: string
      connectionFactoryName:
        description: The name of the JMS Connection Factory.
        type: string
      dtoReceiveOverrideEnabled:
        description: Indicates whether overriding by the Subscriber (Consumer) of
          the deliver-to-one (DTO) property on messages is enabled. When enabled,
          the Subscriber can receive all DTO tagged messages.
        type: boolean
      dtoReceiveSubscriberLocalPriority:
        description: The priority for receiving deliver-to-one (DTO) messages by the
          Subscriber (Consumer) if the messages are published on the local broker
          that the Subscriber is directly connected to.
        format: int32
        type: integer
      dtoReceiveSubscriberNetworkPriority:
        description: The priority for receiving deliver-to-one (DTO) messages by the
          Subscriber (Consumer) if the messages are published on a remote broker.
        format: int32
        type: integer
      dtoSendEnabled:
        description: Indicates whether the deliver-to-one (DTO) property is enabled
          on messages sent by the Publisher (Producer).
        type: boolean
      dynamicEndpointCreateDurableEnabled:
        description: Indicates whether a durable endpoint will be dynamically created
          on the broker when the client calls "Session.createDurableSubscriber()"
          or "Session.createQueue()". The created endpoint respects the message time-to-live
          (TTL) according to the "dynamicEndpointRespectTtlEnabled" property.
        type: boolean
      dynamicEndpointRespectTtlEnabled:
        description: Indicates whether dynamically created durable and non-durable
          endpoints respect the message time-to-live (TTL) property.
        type: boolean
      guaranteedReceiveAckTimeout:
        description: The timeout for sending the acknowledgement (ACK) for guaranteed
          messages received by the Subscriber (Consumer), in milliseconds.
        format: int32
        type: integer
      guaranteedReceiveReconnectRetryCount:
        description: The maximum number of attempts to reconnect to the host or list
          of hosts after the guaranteed  messaging connection has been lost. The value
          "-1" means to retry forever. Available since 2.14.
        format: int32
        type: integer
      guaranteedReceiveReconnectRetryWait:
        description: The amount of time to wait before making another attempt to connect
          or reconnect to the host after the guaranteed messaging connection has been
          lost, in milliseconds. Available since 2.14.
        format: int32
        type: integer
      guaranteedReceiveWindowSize:
        description: The size of the window for guaranteed messages received by the
          Subscriber (Consumer), in messages.
        format: int32
        type: integer
      guaranteedReceiveWindowSizeAckThreshold:
        description: The threshold for sending the acknowledgement (ACK) for guaranteed
          messages received by the Subscriber (Consumer) as a percentage of `guaranteedReceiveWindowSize`.
        format: int32
        type: integer
      guaranteedSendAckTimeout:
        description: The timeout for receiving the acknowledgement (ACK) for guaranteed
          messages sent by the Publisher (Producer), in milliseconds.
        format: int32
        type: integer
      guaranteedSendWindowSize:
        description: The size of the window for non-persistent guaranteed messages
          sent by the Publisher (Producer), in messages. For persistent messages the
          window size is fixed at 1.
        format: int32
        type: integer
      messagingDefaultDeliveryMode:
        description: 'The default delivery mode for messages sent by the Publisher
          (Producer). The allowed values and their meaning are:


          <pre>

          "persistent" - The broker spools messages (persists in the Message Spool)
          as part of the send operation.

          "non-persistent" - The broker does not spool messages (does not persist
          in the Message Spool) as part of the send operation.

          </pre>

          '
        enum:
        - persistent
        - non-persistent
        type: string
      messagingDefaultDmqEligibleEnabled:
        description: Indicates whether messages sent by the Publisher (Producer) are
          Dead Message Queue (DMQ) eligible by default.
        type: boolean
      messagingDefaultElidingEligibleEnabled:
        description: Indicates whether messages sent by the Publisher (Producer) are
          Eliding eligible by default.
        type: boolean
      messagingJmsxUserIdEnabled:
        description: Indicates whether to include (add or replace) the JMSXUserID
          property in messages sent by the Publisher (Producer).
        type: boolean
      messagingTextInXmlPayloadEnabled:
        description: Indicates whether encoding of JMS text messages in Publisher
          (Producer) messages is as XML payload. When disabled, JMS text messages
          are encoded as a binary attachment.
        type: boolean
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      transportCompressionLevel:
        description: The ZLIB compression level for the connection to the broker.
          The value "0" means no compression, and the value "-1" means the compression
          level is specified in the JNDI Properties file.
        format: int32
        type: integer
      transportConnectRetryCount:
        description: The maximum number of retry attempts to establish an initial
          connection to the host or list of hosts. The value "0" means a single attempt
          (no retries), and the value "-1" means to retry forever.
        format: int32
        type: integer
      transportConnectRetryPerHostCount:
        description: The maximum number of retry attempts to establish an initial
          connection to each host on the list of hosts. The value "0" means a single
          attempt (no retries), and the value "-1" means to retry forever.
        format: int32
        type: integer
      transportConnectTimeout:
        description: The timeout for establishing an initial connection to the broker,
          in milliseconds.
        format: int32
        type: integer
      transportDirectTransportEnabled:
        description: Indicates whether usage of the Direct Transport mode for sending
          non-persistent messages is enabled. When disabled, the Guaranteed Transport
          mode is used.
        type: boolean
      transportKeepaliveCount:
        description: The maximum number of consecutive application-level keepalive
          messages sent without the broker response before the connection to the broker
          is closed.
        format: int32
        type: integer
      transportKeepaliveEnabled:
        description: Indicates whether application-level keepalive messages are used
          to maintain a connection with the Router.
        type: boolean
      transportKeepaliveInterval:
        description: The interval between application-level keepalive messages, in
          milliseconds.
        format: int32
        type: integer
      transportMsgCallbackOnIoThreadEnabled:
        description: Indicates whether delivery of asynchronous messages is done directly
          from the I/O thread.
        type: boolean
      transportOptimizeDirectEnabled:
        description: Indicates whether optimization for the Direct Transport delivery
          mode is enabled. If enabled, the client application is limited to one Publisher
          (Producer) and one non-durable Subscriber (Consumer).
        type: boolean
      transportPort:
        description: The connection port number on the broker for SMF clients. The
          value "-1" means the port is specified in the JNDI Properties file.
        format: int32
        type: integer
      transportReadTimeout:
        description: The timeout for reading a reply from the broker, in milliseconds.
        format: int32
        type: integer
      transportReceiveBufferSize:
        description: The size of the receive socket buffer, in bytes. It corresponds
          to the SO_RCVBUF socket option.
        format: int32
        type: integer
      transportReconnectRetryCount:
        description: The maximum number of attempts to reconnect to the host or list
          of hosts after the connection has been lost. The value "-1" means to retry
          forever.
        format: int32
        type: integer
      transportReconnectRetryWait:
        description: The amount of time before making another attempt to connect or
          reconnect to the host after the connection has been lost, in milliseconds.
        format: int32
        type: integer
      transportSendBufferSize:
        description: The size of the send socket buffer, in bytes. It corresponds
          to the SO_SNDBUF socket option.
        format: int32
        type: integer
      transportTcpNoDelayEnabled:
        description: Indicates whether the TCP_NODELAY option is enabled, which disables
          Nagle's algorithm for TCP/IP congestion control (RFC 896).
        type: boolean
      xaEnabled:
        description: Indicates whether this is an XA Connection Factory. When enabled,
          the Connection Factory can be cast to "XAConnectionFactory", "XAQueueConnectionFactory"
          or "XATopicConnectionFactory".
        type: boolean
    type: object
  MsgVpnJndiConnectionFactoryCollections:
    properties: {}
    type: object
  MsgVpnJndiConnectionFactoryLinks:
    properties:
      uri:
        description: The URI of this JNDI Connection Factory object.
        type: string
    type: object
  MsgVpnJndiConnectionFactoryResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnJndiConnectionFactoryCollections'
      data:
        $ref: '#/definitions/MsgVpnJndiConnectionFactory'
      links:
        $ref: '#/definitions/MsgVpnJndiConnectionFactoryLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiQueue:
    properties:
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      physicalName:
        description: The physical name of the JMS Queue.
        type: string
      queueName:
        description: The JNDI name of the JMS Queue.
        type: string
    type: object
  MsgVpnJndiQueueCollections:
    properties: {}
    type: object
  MsgVpnJndiQueueLinks:
    properties:
      uri:
        description: The URI of this JNDI Queue object.
        type: string
    type: object
  MsgVpnJndiQueueResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnJndiQueueCollections'
      data:
        $ref: '#/definitions/MsgVpnJndiQueue'
      links:
        $ref: '#/definitions/MsgVpnJndiQueueLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiQueuesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnJndiQueueCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnJndiQueue'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnJndiQueueLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiTopic:
    properties:
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      physicalName:
        description: The physical name of the JMS Topic.
        type: string
      topicName:
        description: The JNDI name of the JMS Topic.
        type: string
    type: object
  MsgVpnJndiTopicCollections:
    properties: {}
    type: object
  MsgVpnJndiTopicLinks:
    properties:
      uri:
        description: The URI of this JNDI Topic object.
        type: string
    type: object
  MsgVpnJndiTopicResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnJndiTopicCollections'
      data:
        $ref: '#/definitions/MsgVpnJndiTopic'
      links:
        $ref: '#/definitions/MsgVpnJndiTopicLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnJndiTopicsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnJndiTopicCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnJndiTopic'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnJndiTopicLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnLinks:
    properties:
      aclProfilesUri:
        description: The URI of this Message VPN's collection of ACL Profile objects.
        type: string
      authenticationOauthProvidersUri:
        description: The URI of this Message VPN's collection of OAuth Provider objects.
          Available since 2.13.
        type: string
      authorizationGroupsUri:
        description: The URI of this Message VPN's collection of LDAP Authorization
          Group objects.
        type: string
      bridgesUri:
        description: The URI of this Message VPN's collection of Bridge objects.
        type: string
      clientProfilesUri:
        description: The URI of this Message VPN's collection of Client Profile objects.
        type: string
      clientUsernamesUri:
        description: The URI of this Message VPN's collection of Client Username objects.
        type: string
      clientsUri:
        description: The URI of this Message VPN's collection of Client objects. Available
          since 2.12.
        type: string
      configSyncRemoteNodesUri:
        description: The URI of this Message VPN's collection of Config Sync Remote
          Node objects. Available since 2.12.
        type: string
      distributedCachesUri:
        description: The URI of this Message VPN's collection of Distributed Cache
          objects.
        type: string
      dmrBridgesUri:
        description: The URI of this Message VPN's collection of DMR Bridge objects.
        type: string
      jndiConnectionFactoriesUri:
        description: The URI of this Message VPN's collection of JNDI Connection Factory
          objects.
        type: string
      jndiQueuesUri:
        description: The URI of this Message VPN's collection of JNDI Queue objects.
        type: string
      jndiTopicsUri:
        description: The URI of this Message VPN's collection of JNDI Topic objects.
        type: string
      mqttRetainCachesUri:
        description: The URI of this Message VPN's collection of MQTT Retain Cache
          objects.
        type: string
      mqttSessionsUri:
        description: The URI of this Message VPN's collection of MQTT Session objects.
        type: string
      queueTemplatesUri:
        description: The URI of this Message VPN's collection of Queue Template objects.
          Available since 2.14.
        type: string
      queuesUri:
        description: The URI of this Message VPN's collection of Queue objects. Available
          since 2.12.
        type: string
      replayLogsUri:
        description: The URI of this Message VPN's collection of Replay Log objects.
        type: string
      replicatedTopicsUri:
        description: The URI of this Message VPN's collection of Replicated Topic
          objects. Available since 2.12.
        type: string
      restDeliveryPointsUri:
        description: The URI of this Message VPN's collection of REST Delivery Point
          objects.
        type: string
      topicEndpointTemplatesUri:
        description: The URI of this Message VPN's collection of Topic Endpoint Template
          objects. Available since 2.14.
        type: string
      topicEndpointsUri:
        description: The URI of this Message VPN's collection of Topic Endpoint objects.
          Available since 2.12.
        type: string
      transactionsUri:
        description: The URI of this Message VPN's collection of Replicated Local
          Transaction or XA Transaction objects. Available since 2.12.
        type: string
      uri:
        description: The URI of this Message VPN object.
        type: string
    type: object
  MsgVpnMqttRetainCache:
    properties:
      backupCacheInstance:
        description: The name of the backup Cache Instance associated with this MQTT
          Retain Cache.
        type: string
      backupFailureReason:
        description: The reason why the backup cache associated with this MQTT Retain
          Cache is operationally down, if any.
        type: string
      backupUp:
        description: Indicates whether the backup cache associated with this MQTT
          Retain Cache is operationally up.
        type: boolean
      backupUptime:
        description: The number of seconds that the backup cache associated with this
          MQTT Retain Cache has been operationally up.
        format: int32
        type: integer
      cacheCluster:
        description: The name of the Cache Cluster associated with this MQTT Retain
          Cache.
        type: string
      cacheName:
        description: The name of the MQTT Retain Cache.
        type: string
      distributedCache:
        description: The name of the Distributed Cache associated with this MQTT Retain
          Cache.
        type: string
      enabled:
        description: Indicates whether this MQTT Retain Cache is enabled. When the
          cache is disabled, neither retain messages nor retain requests will be delivered
          by the cache. However, live retain messages will continue to be delivered
          to currently connected MQTT clients.
        type: boolean
      failureReason:
        description: The reason why this MQTT Retain Cache is operationally down,
          if any.
        type: string
      msgLifetime:
        description: The message lifetime, in seconds. If a message remains cached
          for the duration of its lifetime, the cache will remove the message. A lifetime
          of 0 results in the message being retained indefinitely.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      primaryCacheInstance:
        description: The name of the primary Cache Instance associated with this MQTT
          Retain Cache.
        type: string
      primaryFailureReason:
        description: The reason why the primary cache associated with this MQTT Retain
          Cache is operationally down, if any.
        type: string
      primaryUp:
        description: Indicates whether the primary cache associated with this MQTT
          Retain Cache is operationally up.
        type: boolean
      primaryUptime:
        description: The number of seconds that the primary cache associated with
          this MQTT Retain Cache has been operationally up.
        format: int32
        type: integer
      up:
        description: Indicates whether this MQTT Retain Cache is operationally up.
        type: boolean
      uptime:
        description: The number of seconds that the MQTT Retain Cache has been operationally
          up.
        format: int32
        type: integer
    type: object
  MsgVpnMqttRetainCacheCollections:
    properties: {}
    type: object
  MsgVpnMqttRetainCacheLinks:
    properties:
      uri:
        description: The URI of this MQTT Retain Cache object.
        type: string
    type: object
  MsgVpnMqttRetainCacheResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnMqttRetainCacheCollections'
      data:
        $ref: '#/definitions/MsgVpnMqttRetainCache'
      links:
        $ref: '#/definitions/MsgVpnMqttRetainCacheLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnMqttRetainCachesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnMqttRetainCacheCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnMqttRetainCache'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnMqttRetainCacheLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnMqttSession:
    properties:
      clean:
        description: Indicates whether the Client requested a clean (newly created)
          MQTT Session when connecting. If not clean (already existing), then previously
          stored messages for QoS 1 subscriptions are delivered.
        type: boolean
      clientName:
        description: The name of the MQTT Session Client.
        type: string
      counter:
        $ref: '#/definitions/MsgVpnMqttSessionCounter'
      createdByManagement:
        description: Indicates whether the MQTT Session was created by a Management
          API.
        type: boolean
      enabled:
        description: Indicates whether the MQTT Session is enabled.
        type: boolean
      mqttConnackErrorTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) refused response
          packets transmitted to the Client. Available since 2.13.
        format: int64
        type: integer
      mqttConnackTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) accepted
          response packets transmitted to the Client. Available since 2.13.
        format: int64
        type: integer
      mqttConnectRxCount:
        description: The number of MQTT connect (CONNECT) request packets received
          from the Client. Available since 2.13.
        format: int32
        type: integer
      mqttDisconnectRxCount:
        description: The number of MQTT disconnect (DISCONNECT) request packets received
          from the Client. Available since 2.13.
        format: int64
        type: integer
      mqttPubcompTxCount:
        description: The number of MQTT publish complete (PUBCOMP) packets transmitted
          to the Client in response to a PUBREL packet. These packets are the fourth
          and final packet of a QoS 2 protocol exchange. Available since 2.13.
        format: int64
        type: integer
      mqttPublishQos0RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 0 message delivery. Available since 2.13.
        format: int64
        type: integer
      mqttPublishQos0TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 0 message delivery. Available since 2.13.
        format: int64
        type: integer
      mqttPublishQos1RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 1 message delivery. Available since 2.13.
        format: int64
        type: integer
      mqttPublishQos1TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 1 message delivery. Available since 2.13.
        format: int64
        type: integer
      mqttPublishQos2RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 2 message delivery. Available since 2.13.
        format: int64
        type: integer
      mqttPubrecTxCount:
        description: The number of MQTT publish received (PUBREC) packets transmitted
          to the Client in response to a PUBLISH packet with QoS 2. These packets
          are the second packet of a QoS 2 protocol exchange. Available since 2.13.
        format: int64
        type: integer
      mqttPubrelRxCount:
        description: The number of MQTT publish release (PUBREL) packets received
          from the Client in response to a PUBREC packet. These packets are the third
          packet of a QoS 2 protocol exchange. Available since 2.13.
        format: int64
        type: integer
      mqttSessionClientId:
        description: The Client ID of the MQTT Session, which corresponds to the ClientId
          provided in the MQTT CONNECT packet.
        type: string
      mqttSessionVirtualRouter:
        description: 'The virtual router of the MQTT Session. The allowed values and
          their meaning are:


          <pre>

          "primary" - The MQTT Session belongs to the primary virtual router.

          "backup" - The MQTT Session belongs to the backup virtual router.

          </pre>

          '
        enum:
        - primary
        - backup
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      owner:
        description: The Client Username which owns the MQTT Session.
        type: string
      queueConsumerAckPropagationEnabled:
        description: Indicates whether consumer acknowledgements (ACKs) received on
          the active replication Message VPN are propagated to the standby replication
          Message VPN. Available since 2.14.
        type: boolean
      queueDeadMsgQueue:
        description: The name of the Dead Message Queue (DMQ) used by the MQTT Session
          Queue. Available since 2.14.
        type: string
      queueEventBindCountThreshold:
        $ref: '#/definitions/EventThreshold'
      queueEventMsgSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      queueEventRejectLowPriorityMsgLimitThreshold:
        $ref: '#/definitions/EventThreshold'
      queueMaxBindCount:
        description: The maximum number of consumer flows that can bind to the MQTT
          Session Queue. Available since 2.14.
        format: int64
        type: integer
      queueMaxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow for the MQTT Session Queue. Available since 2.14.
        format: int64
        type: integer
      queueMaxMsgSize:
        description: The maximum message size allowed in the MQTT Session Queue, in
          bytes (B). Available since 2.14.
        format: int32
        type: integer
      queueMaxMsgSpoolUsage:
        description: The maximum message spool usage allowed by the MQTT Session Queue,
          in megabytes (MB). A value of 0 only allows spooling of the last message
          received and disables quota checking. Available since 2.14.
        format: int64
        type: integer
      queueMaxRedeliveryCount:
        description: The maximum number of times the MQTT Session Queue will attempt
          redelivery of a message prior to it being discarded or moved to the DMQ.
          A value of 0 means to retry forever. Available since 2.14.
        format: int64
        type: integer
      queueMaxTtl:
        description: The maximum time in seconds a message can stay in the MQTT Session
          Queue when `queueRespectTtlEnabled` is `"true"`. A message expires when
          the lesser of the sender assigned time-to-live (TTL) in the message and
          the `queueMaxTtl` configured for the MQTT Session Queue, is exceeded. A
          value of 0 disables expiry. Available since 2.14.
        format: int64
        type: integer
      queueName:
        description: The name of the MQTT Session Queue.
        type: string
      queueRejectLowPriorityMsgEnabled:
        description: Indicates whether to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs cause the message
          to not be delivered to any destination and Transacted Session commits to
          fail. Available since 2.14.
        type: boolean
      queueRejectLowPriorityMsgLimit:
        description: The number of messages of any priority in the MQTT Session Queue
          above which low priority messages are not admitted but higher priority messages
          are allowed. Available since 2.14.
        format: int64
        type: integer
      queueRejectMsgToSenderOnDiscardBehavior:
        description: "Indicates whether negative acknowledgements (NACKs) are returned\
          \ to sending clients on message discards. Note that NACKs cause the message\
          \ to not be delivered to any destination and Transacted Session commits\
          \ to fail. The allowed values and their meaning are:\n\n<pre>\n\"always\"\
          \ - Always return a negative acknowledgment (NACK) to the sending client\
          \ on message discard.\n\"when-queue-enabled\" - Only return a negative acknowledgment\
          \ (NACK) to the sending client on message discard when the Queue is enabled.\n\
          \"never\" - Never return a negative acknowledgment (NACK) to the sending\
          \ client on message discard.\n</pre>\n Available since 2.14."
        enum:
        - always
        - when-queue-enabled
        - never
        type: string
      queueRespectTtlEnabled:
        description: Indicates whether the time-to-live (TTL) for messages in the
          MQTT Session Queue is respected. When enabled, expired messages are discarded
          or moved to the DMQ. Available since 2.14.
        type: boolean
      will:
        description: Indicates whether the MQTT Session has the Will message specified
          by the Client. The Will message is published if the Client disconnects without
          sending the MQTT DISCONNECT packet.
        type: boolean
    type: object
  MsgVpnMqttSessionCollections:
    properties:
      subscriptions:
        $ref: '#/definitions/MsgVpnMqttSessionCollectionsSubscriptions'
    type: object
  MsgVpnMqttSessionCollectionsSubscriptions:
    properties:
      count:
        description: The total number of objects in the subscriptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnMqttSessionCounter:
    description: The counters for the MQTT Session. Deprecated since 2.13. All attributes
      in this object have been moved to the MsgVpnMqttSession object.
    properties:
      mqttConnackErrorTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) refused response
          packets transmitted to the Client. Deprecated since 2.13. This attribute
          has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttConnackTxCount:
        description: The number of MQTT connect acknowledgment (CONNACK) accepted
          response packets transmitted to the Client. Deprecated since 2.13. This
          attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttConnectRxCount:
        description: The number of MQTT connect (CONNECT) request packets received
          from the Client. Deprecated since 2.13. This attribute has been moved to
          the MsgVpnMqttSession object.
        format: int32
        type: integer
      mqttDisconnectRxCount:
        description: The number of MQTT disconnect (DISCONNECT) request packets received
          from the Client. Deprecated since 2.13. This attribute has been moved to
          the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPubcompTxCount:
        description: The number of MQTT publish complete (PUBCOMP) packets transmitted
          to the Client in response to a PUBREL packet. These packets are the fourth
          and final packet of a QoS 2 protocol exchange. Deprecated since 2.13. This
          attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPublishQos0RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 0 message delivery. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPublishQos0TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 0 message delivery. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPublishQos1RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 1 message delivery. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPublishQos1TxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          transmitted to the Client for QoS 1 message delivery. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPublishQos2RxCount:
        description: The number of MQTT publish message (PUBLISH) request packets
          received from the Client for QoS 2 message delivery. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPubrecTxCount:
        description: The number of MQTT publish received (PUBREC) packets transmitted
          to the Client in response to a PUBLISH packet with QoS 2. These packets
          are the second packet of a QoS 2 protocol exchange. Deprecated since 2.13.
          This attribute has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
      mqttPubrelRxCount:
        description: The number of MQTT publish release (PUBREL) packets received
          from the Client in response to a PUBREC packet. These packets are the third
          packet of a QoS 2 protocol exchange. Deprecated since 2.13. This attribute
          has been moved to the MsgVpnMqttSession object.
        format: int64
        type: integer
    type: object
  MsgVpnMqttSessionLinks:
    properties:
      subscriptionsUri:
        description: The URI of this MQTT Session's collection of Subscription objects.
        type: string
      uri:
        description: The URI of this MQTT Session object.
        type: string
    type: object
  MsgVpnMqttSessionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnMqttSessionCollections'
      data:
        $ref: '#/definitions/MsgVpnMqttSession'
      links:
        $ref: '#/definitions/MsgVpnMqttSessionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnMqttSessionSubscription:
    properties:
      mqttSessionClientId:
        description: The Client ID of the MQTT Session, which corresponds to the ClientId
          provided in the MQTT CONNECT packet.
        type: string
      mqttSessionVirtualRouter:
        description: 'The virtual router of the MQTT Session. The allowed values and
          their meaning are:


          <pre>

          "primary" - The MQTT Session belongs to the primary virtual router.

          "backup" - The MQTT Session belongs to the backup virtual router.

          </pre>

          '
        enum:
        - primary
        - backup
        type: string
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      subscriptionQos:
        description: The quality of service (QoS) for the MQTT Session subscription.
        format: int64
        type: integer
      subscriptionTopic:
        description: The MQTT subscription topic.
        type: string
    type: object
  MsgVpnMqttSessionSubscriptionCollections:
    properties: {}
    type: object
  MsgVpnMqttSessionSubscriptionLinks:
    properties:
      uri:
        description: The URI of this Subscription object.
        type: string
    type: object
  MsgVpnMqttSessionSubscriptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnMqttSessionSubscriptionCollections'
      data:
        $ref: '#/definitions/MsgVpnMqttSessionSubscription'
      links:
        $ref: '#/definitions/MsgVpnMqttSessionSubscriptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnMqttSessionSubscriptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnMqttSessionSubscriptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnMqttSessionSubscription'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnMqttSessionSubscriptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnMqttSessionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnMqttSessionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnMqttSession'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnMqttSessionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueue:
    properties:
      accessType:
        description: 'The access type for delivering messages to consumer flows bound
          to the Queue. The allowed values and their meaning are:


          <pre>

          "exclusive" - Exclusive delivery of messages to the first bound consumer
          flow.

          "non-exclusive" - Non-exclusive delivery of messages to all bound consumer
          flows in a round-robin fashion.

          </pre>

          '
        enum:
        - exclusive
        - non-exclusive
        type: string
      alreadyBoundBindFailureCount:
        description: The number of Queue bind failures due to being already bound.
        format: int64
        type: integer
      averageRxByteRate:
        description: The one minute average of the message rate received by the Queue,
          in bytes per second (B/sec).
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received by the Queue,
          in messages per second (msg/sec).
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted by the
          Queue, in bytes per second (B/sec).
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted by the
          Queue, in messages per second (msg/sec).
        format: int64
        type: integer
      bindRequestCount:
        description: The number of consumer requests to bind to the Queue.
        format: int64
        type: integer
      bindSuccessCount:
        description: The number of successful consumer requests to bind to the Queue.
        format: int64
        type: integer
      bindTimeForwardingMode:
        description: 'The forwarding mode of the Queue at bind time. The allowed values
          and their meaning are:


          <pre>

          "store-and-forward" - Deliver messages using the guaranteed data path.

          "cut-through" - Deliver messages using the direct and guaranteed data paths
          for lower latency.

          </pre>

          '
        type: string
      clientProfileDeniedDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to being denied by the Client Profile.
        format: int64
        type: integer
      consumerAckPropagationEnabled:
        description: Indicates whether the propagation of consumer acknowledgements
          (ACKs) received on the active replication Message VPN to the standby replication
          Message VPN is enabled.
        type: boolean
      createdByManagement:
        description: Indicates whether the Queue was created by a management API (CLI
          or SEMP).
        type: boolean
      deadMsgQueue:
        description: The name of the Dead Message Queue (DMQ) used by the Queue.
        type: string
      deletedMsgCount:
        description: The number of guaranteed messages deleted from the Queue.
        format: int64
        type: integer
      destinationGroupErrorDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to a destination group error.
        format: int64
        type: integer
      disabledBindFailureCount:
        description: The number of Queue bind failures due to being disabled.
        format: int64
        type: integer
      disabledDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to it being disabled.
        format: int64
        type: integer
      durable:
        description: Indicates whether the Queue is durable and not temporary.
        type: boolean
      egressEnabled:
        description: Indicates whether the transmission of messages from the Queue
          is enabled.
        type: boolean
      eventBindCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventMsgSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      eventRejectLowPriorityMsgLimitThreshold:
        $ref: '#/definitions/EventThreshold'
      highestAckedMsgId:
        description: The highest identifier (ID) of guaranteed messages in the Queue
          that were acknowledged.
        format: int64
        type: integer
      highestMsgId:
        description: The highest identifier (ID) of guaranteed messages in the Queue.
        format: int64
        type: integer
      inProgressAckMsgCount:
        description: The number of acknowledgement messages received by the Queue
          that are in the process of updating and deleting associated guaranteed messages.
        format: int64
        type: integer
      ingressEnabled:
        description: Indicates whether the reception of messages to the Queue is enabled.
        type: boolean
      invalidSelectorBindFailureCount:
        description: The number of Queue bind failures due to an invalid selector.
        format: int64
        type: integer
      lastReplayCompleteTime:
        description: The timestamp of the last completed replay for the Queue. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      lastReplayFailureReason:
        description: The reason for the last replay failure for the Queue.
        type: string
      lastReplayFailureTime:
        description: The timestamp of the last replay failure for the Queue. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      lastReplayStartTime:
        description: The timestamp of the last replay started for the Queue. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      lastReplayedMsgTxTime:
        description: The timestamp of the last replayed message transmitted by the
          Queue. This value represents the number of seconds since 1970-01-01 00:00:00
          UTC (Unix time).
        format: int32
        type: integer
      lastSpooledMsgId:
        description: The identifier (ID) of the last guaranteed message spooled in
          the Queue.
        format: int64
        type: integer
      lowPriorityMsgCongestionDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to low priority message congestion control.
        format: int64
        type: integer
      lowPriorityMsgCongestionState:
        description: 'The state of the low priority message congestion in the Queue.
          The allowed values and their meaning are:


          <pre>

          "disabled" - Messages are not being checked for priority.

          "not-congested" - Low priority messages are being stored and delivered.

          "congested" - Low priority messages are being discarded.

          </pre>

          '
        type: string
      lowestAckedMsgId:
        description: The lowest identifier (ID) of guaranteed messages in the Queue
          that were acknowledged.
        format: int64
        type: integer
      lowestMsgId:
        description: The lowest identifier (ID) of guaranteed messages in the Queue.
        format: int64
        type: integer
      maxBindCount:
        description: The maximum number of consumer flows that can bind to the Queue.
        format: int64
        type: integer
      maxBindCountExceededBindFailureCount:
        description: The number of Queue bind failures due to the maximum bind count
          being exceeded.
        format: int64
        type: integer
      maxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow for the Queue.
        format: int64
        type: integer
      maxMsgSize:
        description: The maximum message size allowed in the Queue, in bytes (B).
        format: int32
        type: integer
      maxMsgSizeExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum message size being exceeded.
        format: int64
        type: integer
      maxMsgSpoolUsage:
        description: The maximum message spool usage allowed by the Queue, in megabytes
          (MB). A value of 0 only allows spooling of the last message received and
          disables quota checking.
        format: int64
        type: integer
      maxMsgSpoolUsageExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum message spool usage being exceeded.
        format: int64
        type: integer
      maxRedeliveryCount:
        description: The maximum number of times the Queue will attempt redelivery
          of a message prior to it being discarded or moved to the DMQ. A value of
          0 means to retry forever.
        format: int64
        type: integer
      maxRedeliveryExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum redelivery attempts being exceeded.
        format: int64
        type: integer
      maxRedeliveryExceededToDmqFailedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum redelivery attempts being exceeded and failing to move to
          the Dead Message Queue (DMQ).
        format: int64
        type: integer
      maxRedeliveryExceededToDmqMsgCount:
        description: The number of guaranteed messages moved to the Dead Message Queue
          (DMQ) by the Queue due to the maximum redelivery attempts being exceeded.
        format: int64
        type: integer
      maxTtl:
        description: The maximum time in seconds a message can stay in the Queue when
          `respectTtlEnabled` is `"true"`. A message expires when the lesser of the
          sender assigned time-to-live (TTL) in the message and the `maxTtl` configured
          for the Queue, is exceeded. A value of 0 disables expiry.
        format: int64
        type: integer
      maxTtlExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum time-to-live (TTL) in hops being exceeded. The TTL hop count
          is incremented when the message crosses a bridge.
        format: int64
        type: integer
      maxTtlExpiredDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum time-to-live (TTL) timestamp expiring.
        format: int64
        type: integer
      maxTtlExpiredToDmqFailedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to the maximum time-to-live (TTL) timestamp expiring and failing to move
          to the Dead Message Queue (DMQ).
        format: int64
        type: integer
      maxTtlExpiredToDmqMsgCount:
        description: The number of guaranteed messages moved to the Dead Message Queue
          (DMQ) by the Queue due to the maximum time-to-live (TTL) timestamp expiring.
        format: int64
        type: integer
      msgSpoolPeakUsage:
        description: The message spool peak usage by the Queue, in bytes (B).
        format: int64
        type: integer
      msgSpoolUsage:
        description: The message spool usage by the Queue, in bytes (B).
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      networkTopic:
        description: The name of the network topic for the Queue.
        type: string
      noLocalDeliveryDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Queue due
          to no local delivery being requested.
        format: int64
        type: integer
      otherBindFailureCount:
        description: The number of Queue bind failures due to other reasons.
        format: int64
        type: integer
      owner:
        description: The Client Username that owns the Queue and has permission equivalent
          to `"delete"`.
        type: string
      permission:
        description: 'The permission level for all consumers of the Queue, excluding
          the owner. The allowed values and their meaning are:


          <pre>

          "no-access" - Disallows all access.

          "read-only" - Read-only access to the messages.

          "consume" - Consume (read and remove) messages.

          "modify-topic" - Consume messages or modify the topic/selector.

          "delete" - Consume messages, modify the topic/selector or delete the Client
          created endpoint altogether.

          </pre>

          '
        enum:
        - no-access
        - read-only
        - consume
        - modify-topic
        - delete
        type: string
      queueName:
        description: The name of the Queue.
        type: string
      redeliveredMsgCount:
        description: The number of guaranteed messages transmitted by the Queue for
          redelivery.
        format: int64
        type: integer
      rejectLowPriorityMsgEnabled:
        description: Indicates whether the checking of low priority messages against
          the `rejectLowPriorityMsgLimit` is enabled.
        type: boolean
      rejectLowPriorityMsgLimit:
        description: The number of messages of any priority in the Queue above which
          low priority messages are not admitted but higher priority messages are
          allowed.
        format: int64
        type: integer
      rejectMsgToSenderOnDiscardBehavior:
        description: 'Determines when to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs cause the message
          to not be delivered to any destination and Transacted Session commits to
          fail. The allowed values and their meaning are:


          <pre>

          "always" - Always return a negative acknowledgment (NACK) to the sending
          client on message discard.

          "when-queue-enabled" - Only return a negative acknowledgment (NACK) to the
          sending client on message discard when the Queue is enabled.

          "never" - Never return a negative acknowledgment (NACK) to the sending client
          on message discard.

          </pre>

          '
        enum:
        - always
        - when-queue-enabled
        - never
        type: string
      replayFailureCount:
        description: The number of replays that failed for the Queue.
        format: int64
        type: integer
      replayStartCount:
        description: The number of replays started for the Queue.
        format: int64
        type: integer
      replayState:
        description: 'The state of replay for the Queue. The allowed values and their
          meaning are:


          <pre>

          "initializing" - All messages are being deleted from the endpoint before
          replay starts.

          "active" - Subscription matching logged messages are being replayed to the
          endpoint.

          "pending-complete" - Replay is complete, but final accounting is in progress.

          "complete" - Replay and all related activities are complete.

          "failed" - Replay has failed and is waiting for an unbind response.

          </pre>

          '
        type: string
      replaySuccessCount:
        description: The number of replays that succeeded for the Queue.
        format: int64
        type: integer
      replayedAckedMsgCount:
        description: The number of replayed messages transmitted by the Queue and
          acked by all consumers.
        format: int64
        type: integer
      replayedTxMsgCount:
        description: The number of replayed messages transmitted by the Queue.
        format: int64
        type: integer
      replicationActiveAckPropTxMsgCount:
        description: The number of acknowledgement messages propagated by the Queue
          to the replication standby remote Message VPN.
        format: int64
        type: integer
      replicationStandbyAckPropRxMsgCount:
        description: The number of propagated acknowledgement messages received by
          the Queue from the replication active remote Message VPN.
        format: int64
        type: integer
      replicationStandbyAckedByAckPropMsgCount:
        description: The number of messages acknowledged in the Queue by acknowledgement
          propagation from the replication active remote Message VPN.
        format: int64
        type: integer
      replicationStandbyRxMsgCount:
        description: The number of messages received by the Queue from the replication
          active remote Message VPN.
        format: int64
        type: integer
      respectMsgPriorityEnabled:
        description: Indicates whether message priorities are respected. When enabled,
          messages contained in the Queue are delivered in priority order, from 9
          (highest) to 0 (lowest).
        type: boolean
      respectTtlEnabled:
        description: Indicates whether the the time-to-live (TTL) for messages in
          the Queue is respected. When enabled, expired messages are discarded or
          moved to the DMQ.
        type: boolean
      rxByteRate:
        description: The current message rate received by the Queue, in bytes per
          second (B/sec).
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received by the Queue, in messages per
          second (msg/sec).
        format: int64
        type: integer
      spooledByteCount:
        description: The amount of guaranteed messages that were spooled in the Queue,
          in bytes (B).
        format: int64
        type: integer
      spooledMsgCount:
        description: The number of guaranteed messages that were spooled in the Queue.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted by the Queue, in bytes per
          second (B/sec).
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted by the Queue, in messages
          per second (msg/sec).
        format: int64
        type: integer
      txSelector:
        description: Indicates whether the Queue has consumers with selectors to filter
          transmitted messages.
        type: boolean
      txUnackedMsgCount:
        description: The number of guaranteed messages in the Queue that have been
          transmitted but not acknowledged by all consumers.
        format: int64
        type: integer
      virtualRouter:
        description: 'The virtual router of the Queue. The allowed values and their
          meaning are:


          <pre>

          "primary" - The endpoint belongs to the primary virtual router.

          "backup" - The endpoint belongs to the backup virtual router.

          </pre>

          '
        type: string
    type: object
  MsgVpnQueueCollections:
    properties:
      msgs:
        $ref: '#/definitions/MsgVpnQueueCollectionsMsgs'
      priorities:
        $ref: '#/definitions/MsgVpnQueueCollectionsPriorities'
      subscriptions:
        $ref: '#/definitions/MsgVpnQueueCollectionsSubscriptions'
      txFlows:
        $ref: '#/definitions/MsgVpnQueueCollectionsTxflows'
    type: object
  MsgVpnQueueCollectionsMsgs:
    properties:
      count:
        description: The total number of objects in the msgs collection.
        format: int64
        type: integer
    type: object
  MsgVpnQueueCollectionsPriorities:
    properties:
      count:
        description: The total number of objects in the priorities collection.
        format: int64
        type: integer
    type: object
  MsgVpnQueueCollectionsSubscriptions:
    properties:
      count:
        description: The total number of objects in the subscriptions collection.
        format: int64
        type: integer
    type: object
  MsgVpnQueueCollectionsTxflows:
    properties:
      count:
        description: The total number of objects in the txFlows collection.
        format: int64
        type: integer
    type: object
  MsgVpnQueueLinks:
    properties:
      msgsUri:
        description: The URI of this Queue's collection of Queue Message objects.
        type: string
      prioritiesUri:
        description: The URI of this Queue's collection of Queue Priority objects.
        type: string
      subscriptionsUri:
        description: The URI of this Queue's collection of Queue Subscription objects.
        type: string
      txFlowsUri:
        description: The URI of this Queue's collection of Queue Transmit Flow objects.
        type: string
      uri:
        description: The URI of this Queue object.
        type: string
    type: object
  MsgVpnQueueMsg:
    properties:
      attachmentSize:
        description: The size of the Message attachment, in bytes (B).
        format: int64
        type: integer
      contentSize:
        description: The size of the Message content, in bytes (B).
        format: int64
        type: integer
      dmqEligible:
        description: Indicates whether the Message is eligible for the Dead Message
          Queue (DMQ).
        type: boolean
      expiryTime:
        description: The timestamp of when the Message expires. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      msgId:
        description: The identifier (ID) of the Message.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      priority:
        description: The priority level of the Message, from 9 (highest) to 0 (lowest).
        format: int32
        type: integer
      publisherId:
        description: The identifier (ID) of the Message publisher.
        format: int64
        type: integer
      queueName:
        description: The name of the Queue.
        type: string
      redeliveryCount:
        description: The number of times the Message has been redelivered.
        format: int32
        type: integer
      replicatedMateMsgId:
        description: The Message identifier (ID) on the replication mate. Applicable
          only to replicated messages.
        format: int64
        type: integer
      replicationState:
        description: 'The replication state of the Message. The allowed values and
          their meaning are:


          <pre>

          "replicated" - The Message is replicated to the remote Message VPN.

          "not-replicated" - The Message is not being replicated to the remote Message
          VPN.

          "pending-replication" - The Message is queued for replication to the remote
          Message VPN.

          </pre>

          '
        type: string
      spooledTime:
        description: The timestamp of when the Message was spooled in the Queue. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      undelivered:
        description: Indicates whether delivery of the Message has never been attempted.
        type: boolean
    type: object
  MsgVpnQueueMsgCollections:
    properties: {}
    type: object
  MsgVpnQueueMsgLinks:
    properties:
      uri:
        description: The URI of this Queue Message object.
        type: string
    type: object
  MsgVpnQueueMsgResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueueMsgCollections'
      data:
        $ref: '#/definitions/MsgVpnQueueMsg'
      links:
        $ref: '#/definitions/MsgVpnQueueMsgLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueMsgsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueueMsgCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueueMsg'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueueMsgLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueuePrioritiesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueuePriorityCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueuePriority'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueuePriorityLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueuePriority:
    properties:
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      priority:
        description: The level of the Priority, from 9 (highest) to 0 (lowest).
        format: int32
        type: integer
      queueName:
        description: The name of the Queue.
        type: string
      spooledByteCount:
        description: The amount of guaranteed messages at this Priority spooled by
          the Queue, in bytes (B).
        format: int64
        type: integer
      spooledMsgCount:
        description: The number of guaranteed messages at this Priority spooled by
          the Queue.
        format: int64
        type: integer
    type: object
  MsgVpnQueuePriorityCollections:
    properties: {}
    type: object
  MsgVpnQueuePriorityLinks:
    properties:
      uri:
        description: The URI of this Queue Priority object.
        type: string
    type: object
  MsgVpnQueuePriorityResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueuePriorityCollections'
      data:
        $ref: '#/definitions/MsgVpnQueuePriority'
      links:
        $ref: '#/definitions/MsgVpnQueuePriorityLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueueCollections'
      data:
        $ref: '#/definitions/MsgVpnQueue'
      links:
        $ref: '#/definitions/MsgVpnQueueLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueSubscription:
    properties:
      createdByManagement:
        description: Indicates whether the Subscription topic was created by a management
          API (CLI or SEMP).
        type: boolean
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      queueName:
        description: The name of the Queue.
        type: string
      subscriptionTopic:
        description: The topic of the Subscription.
        type: string
    type: object
  MsgVpnQueueSubscriptionCollections:
    properties: {}
    type: object
  MsgVpnQueueSubscriptionLinks:
    properties:
      uri:
        description: The URI of this Queue Subscription object.
        type: string
    type: object
  MsgVpnQueueSubscriptionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueueSubscriptionCollections'
      data:
        $ref: '#/definitions/MsgVpnQueueSubscription'
      links:
        $ref: '#/definitions/MsgVpnQueueSubscriptionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueSubscriptionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueueSubscriptionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueueSubscription'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueueSubscriptionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueTemplate:
    properties:
      accessType:
        description: 'The access type for delivering messages to consumer flows. The
          allowed values and their meaning are:


          <pre>

          "exclusive" - Exclusive delivery of messages to the first bound consumer
          flow.

          "non-exclusive" - Non-exclusive delivery of messages to all bound consumer
          flows in a round-robin fashion.

          </pre>

          '
        enum:
        - exclusive
        - non-exclusive
        type: string
      consumerAckPropagationEnabled:
        description: Indicates whether the propagation of consumer acknowledgements
          (ACKs) received on the active replication Message VPN to the standby replication
          Message VPN is enabled.
        type: boolean
      deadMsgQueue:
        description: The name of the Dead Message Queue (DMQ).
        type: string
      durabilityOverride:
        description: 'Controls the durability of queues created from this template.
          If non-durable, the created queue will be non-durable, regardless of the
          specified durability. If none, the created queue will have the requested
          durability. The allowed values and their meaning are:


          <pre>

          "none" - The durability of the endpoint will be as requested on create.

          "non-durable" - The durability of the created queue will be non-durable,
          regardless of what was requested.

          </pre>

          '
        enum:
        - none
        - non-durable
        type: string
      eventBindCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventMsgSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      eventRejectLowPriorityMsgLimitThreshold:
        $ref: '#/definitions/EventThreshold'
      maxBindCount:
        description: The maximum number of consumer flows that can bind.
        format: int64
        type: integer
      maxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow.
        format: int64
        type: integer
      maxMsgSize:
        description: The maximum message size allowed, in bytes (B).
        format: int32
        type: integer
      maxMsgSpoolUsage:
        description: The maximum message spool usage allowed, in megabytes (MB). A
          value of 0 only allows spooling of the last message received and disables
          quota checking.
        format: int64
        type: integer
      maxRedeliveryCount:
        description: The maximum number of message redelivery attempts that will occur
          prior to the message being discarded or moved to the DMQ. A value of 0 means
          to retry forever.
        format: int64
        type: integer
      maxTtl:
        description: The maximum time in seconds a message can stay in a Queue when
          `respectTtlEnabled` is `"true"`. A message expires when the lesser of the
          sender assigned time-to-live (TTL) in the message and the `maxTtl` configured
          for the Queue, is exceeded. A value of 0 disables expiry.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      permission:
        description: 'The permission level for all consumers, excluding the owner.
          The allowed values and their meaning are:


          <pre>

          "no-access" - Disallows all access.

          "read-only" - Read-only access to the messages.

          "consume" - Consume (read and remove) messages.

          "modify-topic" - Consume messages or modify the topic/selector.

          "delete" - Consume messages, modify the topic/selector or delete the Client
          created endpoint altogether.

          </pre>

          '
        enum:
        - no-access
        - read-only
        - consume
        - modify-topic
        - delete
        type: string
      queueNameFilter:
        description: 'A wildcardable pattern used to determine which Queues use settings
          from this Template. Two different wildcards are supported: * and >. Similar
          to topic filters or subscription patterns, a > matches anything (but only
          when used at the end), and a * matches zero or more characters but never
          a slash (/). A > is only a wildcard when used at the end, after a /. A *
          is only allowed at the end, after a slash (/).'
        type: string
      queueTemplateName:
        description: The name of the Queue Template.
        type: string
      rejectLowPriorityMsgEnabled:
        description: Indicates whether the checking of low priority messages against
          the `rejectLowPriorityMsgLimit` is enabled.
        type: boolean
      rejectLowPriorityMsgLimit:
        description: The number of messages of any priority above which low priority
          messages are not admitted but higher priority messages are allowed.
        format: int64
        type: integer
      rejectMsgToSenderOnDiscardBehavior:
        description: 'Determines when to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs prevent the message
          from being delivered to any destination and Transacted Session commits to
          fail. The allowed values and their meaning are:


          <pre>

          "always" - Always return a negative acknowledgment (NACK) to the sending
          client on message discard.

          "when-queue-enabled" - Only return a negative acknowledgment (NACK) to the
          sending client on message discard when the Queue is enabled.

          "never" - Never return a negative acknowledgment (NACK) to the sending client
          on message discard.

          </pre>

          '
        enum:
        - always
        - when-queue-enabled
        - never
        type: string
      respectMsgPriorityEnabled:
        description: Indicates whether message priorities are respected. When enabled,
          messages are delivered in priority order, from 9 (highest) to 0 (lowest).
        type: boolean
      respectTtlEnabled:
        description: Indicates whether the the time-to-live (TTL) for messages is
          respected. When enabled, expired messages are discarded or moved to the
          DMQ.
        type: boolean
    type: object
  MsgVpnQueueTemplateCollections:
    properties: {}
    type: object
  MsgVpnQueueTemplateLinks:
    properties:
      uri:
        description: The URI of this Queue Template object.
        type: string
    type: object
  MsgVpnQueueTemplateResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueueTemplateCollections'
      data:
        $ref: '#/definitions/MsgVpnQueueTemplate'
      links:
        $ref: '#/definitions/MsgVpnQueueTemplateLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueTemplatesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueueTemplateCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueueTemplate'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueueTemplateLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueTxFlow:
    properties:
      ackedMsgCount:
        description: The number of guaranteed messages delivered and acknowledged
          by the consumer.
        format: int64
        type: integer
      activationTime:
        description: The timestamp of when the bound Flow became active. This value
          represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      activityState:
        description: 'The activity state of the Flow. The allowed values and their
          meaning are:


          <pre>

          "active-browser" - The Flow is active as a browser.

          "active-consumer" - The Flow is active as a consumer.

          "inactive" - The Flow is inactive.

          </pre>

          '
        type: string
      activityUpdateState:
        description: 'The state of updating the consumer with the Flow activity. The
          allowed values and their meaning are:


          <pre>

          "in-progress" - The Flow is in the process of updating the client with its
          activity state.

          "synchronized" - The Flow has updated the client with its activity state.

          "not-requested" - The Flow has not been requested by the client to provide
          activity updates.

          </pre>

          '
        type: string
      bindTime:
        description: The timestamp of when the Flow bound to the Queue. This value
          represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      clientName:
        description: The name of the Client.
        type: string
      consumerRedeliveryRequestAllowed:
        description: Indicates whether redelivery requests can be received as negative
          acknowledgements (NACKs) from the consumer. Applicable only to REST consumers.
        type: boolean
      cutThroughAckedMsgCount:
        description: The number of guaranteed messages that used cut-through delivery
          and are acknowledged by the consumer.
        format: int64
        type: integer
      deliveryState:
        description: 'The delivery state of the Flow. The allowed values and their
          meaning are:


          <pre>

          "closed" - The Flow is unbound.

          "opened" - The Flow is bound but inactive.

          "unbinding" - The Flow received an unbind request.

          "handshaking" - The Flow is handshaking to become active.

          "deliver-cut-through" - The Flow is streaming messages using direct+guaranteed
          delivery.

          "deliver-from-input-stream" - The Flow is streaming messages using guaranteed
          delivery.

          "deliver-from-memory" - The Flow throttled causing message delivery from
          memory (RAM).

          "deliver-from-spool" - The Flow stalled causing message delivery from spool
          (ADB or disk).

          </pre>

          '
        type: string
      flowId:
        description: The identifier (ID) of the Flow.
        format: int64
        type: integer
      highestAckPendingMsgId:
        description: The highest identifier (ID) of message transmitted and waiting
          for acknowledgement.
        format: int64
        type: integer
      lastAckedMsgId:
        description: The identifier (ID) of the last message transmitted and acknowledged
          by the consumer.
        format: int64
        type: integer
      lastSelectorExaminedMsgId:
        description: The identifier (ID) of the last message examined by the Flow
          selector.
        format: int64
        type: integer
      lowestAckPendingMsgId:
        description: The lowest identifier (ID) of message transmitted and waiting
          for acknowledgement.
        format: int64
        type: integer
      maxUnackedMsgsExceededMsgCount:
        description: The number of guaranteed messages that exceeded the maximum number
          of delivered unacknowledged messages.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      noLocalDelivery:
        description: Indicates whether not to deliver messages to a consumer that
          published them.
        type: boolean
      queueName:
        description: The name of the Queue.
        type: string
      redeliveredMsgCount:
        description: The number of guaranteed messages that were redelivered.
        format: int64
        type: integer
      redeliveryRequestCount:
        description: The number of consumer requests via negative acknowledgements
          (NACKs) to redeliver guaranteed messages.
        format: int64
        type: integer
      selector:
        description: The value of the Flow selector.
        type: string
      selectorExaminedMsgCount:
        description: The number of guaranteed messages examined by the Flow selector.
        format: int64
        type: integer
      selectorMatchedMsgCount:
        description: The number of guaranteed messages for which the Flow selector
          matched.
        format: int64
        type: integer
      selectorNotMatchedMsgCount:
        description: The number of guaranteed messages for which the Flow selector
          did not match.
        format: int64
        type: integer
      sessionName:
        description: The name of the Transacted Session for the Flow.
        type: string
      storeAndForwardAckedMsgCount:
        description: The number of guaranteed messages that used store and forward
          delivery and are acknowledged by the consumer.
        format: int64
        type: integer
      unackedMsgCount:
        description: The number of guaranteed messages delivered but not yet acknowledged
          by the consumer.
        format: int64
        type: integer
      usedWindowSize:
        description: The number of guaranteed messages using the available window
          size.
        format: int32
        type: integer
      windowClosedCount:
        description: The number of times the window for guaranteed messages was filled
          and closed before an acknowledgement was received.
        format: int64
        type: integer
      windowSize:
        description: The number of outstanding guaranteed messages that can be transmitted
          over the Flow before an acknowledgement is received.
        format: int64
        type: integer
    type: object
  MsgVpnQueueTxFlowCollections:
    properties: {}
    type: object
  MsgVpnQueueTxFlowLinks:
    properties:
      uri:
        description: The URI of this Queue Transmit Flow object.
        type: string
    type: object
  MsgVpnQueueTxFlowResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnQueueTxFlowCollections'
      data:
        $ref: '#/definitions/MsgVpnQueueTxFlow'
      links:
        $ref: '#/definitions/MsgVpnQueueTxFlowLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueueTxFlowsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueueTxFlowCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueueTxFlow'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueueTxFlowLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnQueuesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnQueueCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnQueue'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnQueueLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRate:
    description: The rates for the Message VPN. Deprecated since 2.13. All attributes
      in this object have been moved to the MsgVpn object.
    properties:
      averageRxByteRate:
        description: The one minute average of the message rate received by the Message
          VPN, in bytes per second (B/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpn object.
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received by the Message
          VPN, in messages per second (msg/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpn object.
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted by the
          Message VPN, in bytes per second (B/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpn object.
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted by the
          Message VPN, in messages per second (msg/sec). Deprecated since 2.13. This
          attribute has been moved to the MsgVpn object.
        format: int64
        type: integer
      rxByteRate:
        description: The current message rate received by the Message VPN, in bytes
          per second (B/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpn object.
        format: int64
        type: integer
      rxMsgRate:
        description: The current message rate received by the Message VPN, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpn object.
        format: int64
        type: integer
      tlsAverageRxByteRate:
        description: The one minute average of the TLS message rate received by the
          Message VPN, in bytes per second (B/sec). Deprecated since 2.13. This attribute
          has been moved to the MsgVpn object.
        format: int64
        type: integer
      tlsAverageTxByteRate:
        description: The one minute average of the TLS message rate transmitted by
          the Message VPN, in bytes per second (B/sec). Deprecated since 2.13. This
          attribute has been moved to the MsgVpn object.
        format: int64
        type: integer
      tlsRxByteRate:
        description: The current TLS message rate received by the Message VPN, in
          bytes per second (B/sec). Deprecated since 2.13. This attribute has been
          moved to the MsgVpn object.
        format: int64
        type: integer
      tlsTxByteRate:
        description: The current TLS message rate transmitted by the Message VPN,
          in bytes per second (B/sec). Deprecated since 2.13. This attribute has been
          moved to the MsgVpn object.
        format: int64
        type: integer
      txByteRate:
        description: The current message rate transmitted by the Message VPN, in bytes
          per second (B/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpn object.
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted by the Message VPN, in messages
          per second (msg/sec). Deprecated since 2.13. This attribute has been moved
          to the MsgVpn object.
        format: int64
        type: integer
    type: object
  MsgVpnReplayLog:
    properties:
      egressEnabled:
        description: Indicates whether the transmission of messages from the Replay
          Log is enabled.
        type: boolean
      ingressEnabled:
        description: Indicates whether the reception of messages to the Replay Log
          is enabled.
        type: boolean
      maxSpoolUsage:
        description: The maximum spool usage allowed by the Replay Log, in megabytes
          (MB). If this limit is exceeded, old messages will be trimmed.
        format: int64
        type: integer
      msgSpoolUsage:
        description: The spool usage of the Replay Log, in bytes (B).
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      replayLogName:
        description: The name of the Replay Log.
        type: string
    type: object
  MsgVpnReplayLogCollections:
    properties:
      msgs:
        $ref: '#/definitions/MsgVpnReplayLogCollectionsMsgs'
    type: object
  MsgVpnReplayLogCollectionsMsgs:
    properties:
      count:
        description: The total number of objects in the msgs collection.
        format: int64
        type: integer
    type: object
  MsgVpnReplayLogLinks:
    properties:
      msgsUri:
        description: The URI of this Replay Log's collection of Message objects.
        type: string
      uri:
        description: The URI of this Replay Log object.
        type: string
    type: object
  MsgVpnReplayLogMsg:
    properties:
      attachmentSize:
        description: The size of the message attachment, in bytes (B).
        format: int64
        type: integer
      contentSize:
        description: The size of the message content, in bytes (B).
        format: int64
        type: integer
      dmqEligible:
        description: Indicates whether the message is eligible for the Dead Message
          Queue (DMQ).
        type: boolean
      msgId:
        description: The identifier (ID) of the message.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      priority:
        description: The priority level of the message.
        format: int32
        type: integer
      publisherId:
        description: The identifier (ID) of the message publisher.
        format: int64
        type: integer
      replayLogName:
        description: The name of the Replay Log.
        type: string
      sequenceNumber:
        description: The sequence number assigned to the message. Applicable only
          to messages received on sequenced topics.
        format: int64
        type: integer
      spooledTime:
        description: The timestamp of when the message was spooled in the Replay Log.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
    type: object
  MsgVpnReplayLogMsgCollections:
    properties: {}
    type: object
  MsgVpnReplayLogMsgLinks:
    properties:
      uri:
        description: The URI of this Message object.
        type: string
    type: object
  MsgVpnReplayLogMsgResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnReplayLogMsgCollections'
      data:
        $ref: '#/definitions/MsgVpnReplayLogMsg'
      links:
        $ref: '#/definitions/MsgVpnReplayLogMsgLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnReplayLogMsgsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnReplayLogMsgCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnReplayLogMsg'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnReplayLogMsgLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnReplayLogResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnReplayLogCollections'
      data:
        $ref: '#/definitions/MsgVpnReplayLog'
      links:
        $ref: '#/definitions/MsgVpnReplayLogLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnReplayLogsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnReplayLogCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnReplayLog'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnReplayLogLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnReplicatedTopic:
    properties:
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      replicatedTopic:
        description: The topic for applying replication. Published messages matching
          this topic will be replicated to the standby site.
        type: string
      replicationMode:
        description: 'The replication mode for the Replicated Topic. The allowed values
          and their meaning are:


          <pre>

          "sync" - Messages are acknowledged when replicated (spooled remotely).

          "async" - Messages are acknowledged when pending replication (spooled locally).

          </pre>

          '
        enum:
        - sync
        - async
        type: string
    type: object
  MsgVpnReplicatedTopicCollections:
    properties: {}
    type: object
  MsgVpnReplicatedTopicLinks:
    properties:
      uri:
        description: The URI of this Replicated Topic object.
        type: string
    type: object
  MsgVpnReplicatedTopicResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnReplicatedTopicCollections'
      data:
        $ref: '#/definitions/MsgVpnReplicatedTopic'
      links:
        $ref: '#/definitions/MsgVpnReplicatedTopicLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnReplicatedTopicsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnReplicatedTopicCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnReplicatedTopic'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnReplicatedTopicLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnCollections'
      data:
        $ref: '#/definitions/MsgVpn'
      links:
        $ref: '#/definitions/MsgVpnLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPoint:
    properties:
      clientName:
        description: The name of the Client for the REST Delivery Point.
        type: string
      clientProfileName:
        description: The name of the Client Profile for the REST Delivery Point.
        type: string
      enabled:
        description: Indicates whether the REST Delivery Point is enabled.
        type: boolean
      lastFailureReason:
        description: The reason for the last REST Delivery Point failure.
        type: string
      lastFailureTime:
        description: The timestamp of the last REST Delivery Point failure. This value
          represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      restDeliveryPointName:
        description: The name of the REST Delivery Point.
        type: string
      timeConnectionsBlocked:
        description: The percentage of time the REST Delivery Point connections are
          blocked from transmitting data.
        format: int64
        type: integer
      up:
        description: Indicates whether the operational state of the REST Delivery
          Point is up.
        type: boolean
    type: object
  MsgVpnRestDeliveryPointCollections:
    properties:
      queueBindings:
        $ref: '#/definitions/MsgVpnRestDeliveryPointCollectionsQueuebindings'
      restConsumers:
        $ref: '#/definitions/MsgVpnRestDeliveryPointCollectionsRestconsumers'
    type: object
  MsgVpnRestDeliveryPointCollectionsQueuebindings:
    properties:
      count:
        description: The total number of objects in the queueBindings collection.
        format: int64
        type: integer
    type: object
  MsgVpnRestDeliveryPointCollectionsRestconsumers:
    properties:
      count:
        description: The total number of objects in the restConsumers collection.
        format: int64
        type: integer
    type: object
  MsgVpnRestDeliveryPointLinks:
    properties:
      queueBindingsUri:
        description: The URI of this REST Delivery Point's collection of Queue Binding
          objects.
        type: string
      restConsumersUri:
        description: The URI of this REST Delivery Point's collection of REST Consumer
          objects.
        type: string
      uri:
        description: The URI of this REST Delivery Point object.
        type: string
    type: object
  MsgVpnRestDeliveryPointQueueBinding:
    properties:
      gatewayReplaceTargetAuthorityEnabled:
        description: Indicates whether the authority for the request-target is replaced
          with that configured for the REST Consumer remote.
        type: boolean
      lastFailureReason:
        description: The reason for the last REST Delivery Point queue binding failure.
        type: string
      lastFailureTime:
        description: The timestamp of the last REST Delivery Point queue binding failure.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      postRequestTarget:
        description: The request-target string being used when sending requests to
          a REST Consumer.
        type: string
      queueBindingName:
        description: The name of a queue in the Message VPN.
        type: string
      restDeliveryPointName:
        description: The name of the REST Delivery Point.
        type: string
      up:
        description: Indicates whether the operational state of the REST Delivery
          Point queue binding is up.
        type: boolean
      uptime:
        description: The amount of time in seconds since the REST Delivery Point queue
          binding was up.
        format: int64
        type: integer
    type: object
  MsgVpnRestDeliveryPointQueueBindingCollections:
    properties: {}
    type: object
  MsgVpnRestDeliveryPointQueueBindingLinks:
    properties:
      uri:
        description: The URI of this Queue Binding object.
        type: string
    type: object
  MsgVpnRestDeliveryPointQueueBindingResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingCollections'
      data:
        $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBinding'
      links:
        $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointQueueBindingsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBinding'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnRestDeliveryPointCollections'
      data:
        $ref: '#/definitions/MsgVpnRestDeliveryPoint'
      links:
        $ref: '#/definitions/MsgVpnRestDeliveryPointLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointRestConsumer:
    properties:
      authenticationHttpBasicUsername:
        description: The username that the REST Consumer will use to login to the
          REST host.
        type: string
      authenticationHttpHeaderName:
        description: The authentication header name. Available since 2.15.
        type: string
      authenticationScheme:
        description: 'The authentication scheme used by the REST Consumer to login
          to the REST host. The allowed values and their meaning are:


          <pre>

          "none" - Login with no authentication. This may be useful for anonymous
          connections or when a REST Consumer does not require authentication.

          "http-basic" - Login with a username and optional password according to
          HTTP Basic authentication as per RFC2616.

          "client-certificate" - Login with a client TLS certificate as per RFC5246.
          Client certificate authentication is only available on TLS connections.

          "http-header" - Login with a specified HTTP header.

          </pre>

          '
        enum:
        - none
        - http-basic
        - client-certificate
        - http-header
        type: string
      counter:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerCounter'
      enabled:
        description: Indicates whether the REST Consumer is enabled.
        type: boolean
      httpMethod:
        description: "The HTTP method to use (POST or PUT). This is used only when\
          \ operating in the REST service \"messaging\" mode and is ignored in \"\
          gateway\" mode. The allowed values and their meaning are:\n\n<pre>\n\"post\"\
          \ - Use the POST HTTP method.\n\"put\" - Use the PUT HTTP method.\n</pre>\n\
          \ Available since 2.17."
        enum:
        - post
        - put
        type: string
      httpRequestConnectionCloseTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          to close the connection. Available since 2.13.
        format: int64
        type: integer
      httpRequestOutstandingTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          that are waiting for a response. Available since 2.13.
        format: int64
        type: integer
      httpRequestTimedOutTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          that have timed out. Available since 2.13.
        format: int64
        type: integer
      httpRequestTxByteCount:
        description: The amount of HTTP request messages transmitted to the REST Consumer,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      httpRequestTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer.
          Available since 2.13.
        format: int32
        type: integer
      httpResponseErrorRxMsgCount:
        description: The number of HTTP client/server error response messages received
          from the REST Consumer. Available since 2.13.
        format: int64
        type: integer
      httpResponseRxByteCount:
        description: The amount of HTTP response messages received from the REST Consumer,
          in bytes (B). Available since 2.13.
        format: int64
        type: integer
      httpResponseRxMsgCount:
        description: The number of HTTP response messages received from the REST Consumer.
          Available since 2.13.
        format: int64
        type: integer
      httpResponseSuccessRxMsgCount:
        description: The number of HTTP successful response messages received from
          the REST Consumer. Available since 2.13.
        format: int64
        type: integer
      lastConnectionFailureLocalEndpoint:
        description: The local endpoint at the time of the last connection failure.
        type: string
      lastConnectionFailureReason:
        description: The reason for the last connection failure between local and
          remote endpoints.
        type: string
      lastConnectionFailureRemoteEndpoint:
        description: The remote endpoint at the time of the last connection failure.
        type: string
      lastConnectionFailureTime:
        description: The timestamp of the last connection failure between local and
          remote endpoints. This value represents the number of seconds since 1970-01-01
          00:00:00 UTC (Unix time).
        format: int32
        type: integer
      lastFailureReason:
        description: The reason for the last REST Consumer failure.
        type: string
      lastFailureTime:
        description: The timestamp of the last REST Consumer failure. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      localInterface:
        description: The interface that will be used for all outgoing connections
          associated with the REST Consumer. When unspecified, an interface is automatically
          chosen.
        type: string
      maxPostWaitTime:
        description: The maximum amount of time (in seconds) to wait for an HTTP POST
          response from the REST Consumer. Once this time is exceeded, the TCP connection
          is reset.
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      outgoingConnectionCount:
        description: The number of concurrent TCP connections open to the REST Consumer.
        format: int32
        type: integer
      remoteHost:
        description: The IP address or DNS name for the REST Consumer.
        type: string
      remoteOutgoingConnectionUpCount:
        description: The number of outgoing connections for the REST Consumer that
          are up.
        format: int64
        type: integer
      remotePort:
        description: The port associated with the host of the REST Consumer.
        format: int64
        type: integer
      restConsumerName:
        description: The name of the REST Consumer.
        type: string
      restDeliveryPointName:
        description: The name of the REST Delivery Point.
        type: string
      retryDelay:
        description: The number of seconds that must pass before retrying the remote
          REST Consumer connection.
        format: int32
        type: integer
      tlsCipherSuiteList:
        description: The colon-separated list of cipher suites the REST Consumer uses
          in its encrypted connection. The value `"default"` implies all supported
          suites ordered from most secure to least secure. The list of default cipher
          suites is available in the `tlsCipherSuiteMsgBackboneDefaultList` attribute
          of the Broker object in the Monitoring API. The REST Consumer should choose
          the first suite from this list that it supports.
        type: string
      tlsEnabled:
        description: Indicates whether encryption (TLS) is enabled for the REST Consumer.
        type: boolean
      up:
        description: Indicates whether the operational state of the REST Consumer
          is up.
        type: boolean
    type: object
  MsgVpnRestDeliveryPointRestConsumerCollections:
    properties:
      tlsTrustedCommonNames:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerCollectionsTlstrustedcommonnames'
    type: object
  MsgVpnRestDeliveryPointRestConsumerCollectionsTlstrustedcommonnames:
    properties:
      count:
        description: The total number of objects in the tlsTrustedCommonNames collection.
          Deprecated since 2.17. Common Name validation has been replaced by Server
          Certificate Name validation.
        format: int64
        type: integer
    type: object
  MsgVpnRestDeliveryPointRestConsumerCounter:
    description: The counters for the REST Consumer. Deprecated since 2.13. All attributes
      in this object have been moved to the MsgVpnRestDeliveryPointRestConsumer object.
    properties:
      httpRequestConnectionCloseTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          to close the connection. Deprecated since 2.13. This attribute has been
          moved to the MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpRequestOutstandingTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          that are waiting for a response. Deprecated since 2.13. This attribute has
          been moved to the MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpRequestTimedOutTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer
          that have timed out. Deprecated since 2.13. This attribute has been moved
          to the MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpRequestTxByteCount:
        description: The amount of HTTP request messages transmitted to the REST Consumer,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpRequestTxMsgCount:
        description: The number of HTTP request messages transmitted to the REST Consumer.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnRestDeliveryPointRestConsumer
          object.
        format: int32
        type: integer
      httpResponseErrorRxMsgCount:
        description: The number of HTTP client/server error response messages received
          from the REST Consumer. Deprecated since 2.13. This attribute has been moved
          to the MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpResponseRxByteCount:
        description: The amount of HTTP response messages received from the REST Consumer,
          in bytes (B). Deprecated since 2.13. This attribute has been moved to the
          MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
      httpResponseRxMsgCount:
        description: The number of HTTP response messages received from the REST Consumer.
          Deprecated since 2.13. This attribute has been moved to the MsgVpnRestDeliveryPointRestConsumer
          object.
        format: int64
        type: integer
      httpResponseSuccessRxMsgCount:
        description: The number of HTTP successful response messages received from
          the REST Consumer. Deprecated since 2.13. This attribute has been moved
          to the MsgVpnRestDeliveryPointRestConsumer object.
        format: int64
        type: integer
    type: object
  MsgVpnRestDeliveryPointRestConsumerLinks:
    properties:
      tlsTrustedCommonNamesUri:
        description: The URI of this REST Consumer's collection of Trusted Common
          Name objects. Deprecated since 2.17. Common Name validation has been replaced
          by Server Certificate Name validation.
        type: string
      uri:
        description: The URI of this REST Consumer object.
        type: string
    type: object
  MsgVpnRestDeliveryPointRestConsumerResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerCollections'
      data:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumer'
      links:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName:
    properties:
      msgVpnName:
        description: The name of the Message VPN. Deprecated since 2.17. Common Name
          validation has been replaced by Server Certificate Name validation.
        type: string
      restConsumerName:
        description: The name of the REST Consumer. Deprecated since 2.17. Common
          Name validation has been replaced by Server Certificate Name validation.
        type: string
      restDeliveryPointName:
        description: The name of the REST Delivery Point. Deprecated since 2.17. Common
          Name validation has been replaced by Server Certificate Name validation.
        type: string
      tlsTrustedCommonName:
        description: The expected trusted common name of the remote certificate. Deprecated
          since 2.17. Common Name validation has been replaced by Server Certificate
          Name validation.
        type: string
    type: object
  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameCollections:
    properties: {}
    type: object
  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks:
    properties:
      uri:
        description: The URI of this Trusted Common Name object.
        type: string
    type: object
  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameCollections'
      data:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName'
      links:
        $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointRestConsumersResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumer'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnRestDeliveryPointsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPoint'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnRestDeliveryPointLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpoint:
    properties:
      accessType:
        description: 'The access type for delivering messages to consumer flows bound
          to the Topic Endpoint. The allowed values and their meaning are:


          <pre>

          "exclusive" - Exclusive delivery of messages to the first bound consumer
          flow.

          "non-exclusive" - Non-exclusive delivery of messages to all bound consumer
          flows in a round-robin fashion.

          </pre>

          '
        enum:
        - exclusive
        - non-exclusive
        type: string
      alreadyBoundBindFailureCount:
        description: The number of Topic Endpoint bind failures due to being already
          bound.
        format: int64
        type: integer
      averageRxByteRate:
        description: The one minute average of the message rate received by the Topic
          Endpoint, in bytes per second (B/sec).
        format: int64
        type: integer
      averageRxMsgRate:
        description: The one minute average of the message rate received by the Topic
          Endpoint, in messages per second (msg/sec).
        format: int64
        type: integer
      averageTxByteRate:
        description: The one minute average of the message rate transmitted by the
          Topic Endpoint, in bytes per second (B/sec).
        format: int64
        type: integer
      averageTxMsgRate:
        description: The one minute average of the message rate transmitted by the
          Topic Endpoint, in messages per second (msg/sec).
        format: int64
        type: integer
      bindRequestCount:
        description: The number of consumer requests to bind to the Topic Endpoint.
        format: int64
        type: integer
      bindSuccessCount:
        description: The number of successful consumer requests to bind to the Topic
          Endpoint.
        format: int64
        type: integer
      bindTimeForwardingMode:
        description: 'The forwarding mode of the Topic Endpoint at bind time. The
          allowed values and their meaning are:


          <pre>

          "store-and-forward" - Deliver messages using the guaranteed data path.

          "cut-through" - Deliver messages using the direct and guaranteed data paths
          for lower latency.

          </pre>

          '
        type: string
      clientProfileDeniedDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to being denied by the Client Profile.
        format: int64
        type: integer
      consumerAckPropagationEnabled:
        description: Indicates whether the propagation of consumer acknowledgements
          (ACKs) received on the active replication Message VPN to the standby replication
          Message VPN is enabled.
        type: boolean
      createdByManagement:
        description: Indicates whether the Topic Endpoint was created by a management
          API (CLI or SEMP).
        type: boolean
      deadMsgQueue:
        description: The name of the Dead Message Queue (DMQ) used by the Topic Endpoint.
        type: string
      deletedMsgCount:
        description: The number of guaranteed messages deleted from the Topic Endpoint.
        format: int64
        type: integer
      destinationGroupErrorDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to a destination group error.
        format: int64
        type: integer
      destinationTopic:
        description: The destination topic of the Topic Endpoint.
        type: string
      disabledBindFailureCount:
        description: The number of Topic Endpoint bind failures due to being disabled.
        format: int64
        type: integer
      disabledDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to it being disabled.
        format: int64
        type: integer
      durable:
        description: Indicates whether the Topic Endpoint is durable and not temporary.
        type: boolean
      egressEnabled:
        description: Indicates whether the transmission of messages from the Topic
          Endpoint is enabled.
        type: boolean
      eventBindCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventRejectLowPriorityMsgLimitThreshold:
        $ref: '#/definitions/EventThreshold'
      eventSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      highestAckedMsgId:
        description: The highest identifier (ID) of guaranteed messages in the Topic
          Endpoint that were acknowledged.
        format: int64
        type: integer
      highestMsgId:
        description: The highest identifier (ID) of guaranteed messages in the Topic
          Endpoint.
        format: int64
        type: integer
      inProgressAckMsgCount:
        description: The number of acknowledgement messages received by the Topic
          Endpoint that are in the process of updating and deleting associated guaranteed
          messages.
        format: int64
        type: integer
      ingressEnabled:
        description: Indicates whether the reception of messages to the Topic Endpoint
          is enabled.
        type: boolean
      invalidSelectorBindFailureCount:
        description: The number of Topic Endpoint bind failures due to an invalid
          selector.
        format: int64
        type: integer
      lastReplayCompleteTime:
        description: The timestamp of the last completed replay for the Topic Endpoint.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      lastReplayFailureReason:
        description: The reason for the last replay failure for the Topic Endpoint.
        type: string
      lastReplayFailureTime:
        description: The timestamp of the last replay failure for the Topic Endpoint.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      lastReplayStartTime:
        description: The timestamp of the last replay started for the Topic Endpoint.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      lastReplayedMsgTxTime:
        description: The timestamp of the last replayed message transmitted by the
          Topic Endpoint. This value represents the number of seconds since 1970-01-01
          00:00:00 UTC (Unix time).
        format: int32
        type: integer
      lastSelectorExaminedMsgId:
        description: The identifier (ID) of the last message examined by the Topic
          Endpoint selector.
        format: int64
        type: integer
      lastSpooledMsgId:
        description: The identifier (ID) of the last guaranteed message spooled in
          the Topic Endpoint.
        format: int64
        type: integer
      lowPriorityMsgCongestionDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to low priority message congestion control.
        format: int64
        type: integer
      lowPriorityMsgCongestionState:
        description: 'The state of the low priority message congestion in the Topic
          Endpoint. The allowed values and their meaning are:


          <pre>

          "disabled" - Messages are not being checked for priority.

          "not-congested" - Low priority messages are being stored and delivered.

          "congested" - Low priority messages are being discarded.

          </pre>

          '
        type: string
      lowestAckedMsgId:
        description: The lowest identifier (ID) of guaranteed messages in the Topic
          Endpoint that were acknowledged.
        format: int64
        type: integer
      lowestMsgId:
        description: The lowest identifier (ID) of guaranteed messages in the Topic
          Endpoint.
        format: int64
        type: integer
      maxBindCount:
        description: The maximum number of consumer flows that can bind to the Topic
          Endpoint.
        format: int64
        type: integer
      maxBindCountExceededBindFailureCount:
        description: The number of Topic Endpoint bind failures due to the maximum
          bind count being exceeded.
        format: int64
        type: integer
      maxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow for the Topic Endpoint.
        format: int64
        type: integer
      maxEffectiveBindCount:
        description: The effective maximum number of consumer flows that can bind
          to the Topic Endpoint.
        format: int32
        type: integer
      maxMsgSize:
        description: The maximum message size allowed in the Topic Endpoint, in bytes
          (B).
        format: int32
        type: integer
      maxMsgSizeExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum message size being exceeded.
        format: int64
        type: integer
      maxMsgSpoolUsageExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum message spool usage being exceeded.
        format: int64
        type: integer
      maxRedeliveryCount:
        description: The maximum number of times the Topic Endpoint will attempt redelivery
          of a message prior to it being discarded or moved to the DMQ. A value of
          0 means to retry forever.
        format: int64
        type: integer
      maxRedeliveryExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum redelivery attempts being exceeded.
        format: int64
        type: integer
      maxRedeliveryExceededToDmqFailedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum redelivery attempts being exceeded and failing to move
          to the Dead Message Queue (DMQ).
        format: int64
        type: integer
      maxRedeliveryExceededToDmqMsgCount:
        description: The number of guaranteed messages moved to the Dead Message Queue
          (DMQ) by the Topic Endpoint due to the maximum redelivery attempts being
          exceeded.
        format: int64
        type: integer
      maxSpoolUsage:
        description: The maximum message spool usage allowed by the Topic Endpoint,
          in megabytes (MB). A value of 0 only allows spooling of the last message
          received and disables quota checking.
        format: int64
        type: integer
      maxTtl:
        description: The maximum time in seconds a message can stay in the Topic Endpoint
          when `respectTtlEnabled` is `"true"`. A message expires when the lesser
          of the sender assigned time-to-live (TTL) in the message and the `maxTtl`
          configured for the Topic Endpoint, is exceeded. A value of 0 disables expiry.
        format: int64
        type: integer
      maxTtlExceededDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum time-to-live (TTL) in hops being exceeded. The TTL hop
          count is incremented when the message crosses a bridge.
        format: int64
        type: integer
      maxTtlExpiredDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum time-to-live (TTL) timestamp expiring.
        format: int64
        type: integer
      maxTtlExpiredToDmqFailedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to the maximum time-to-live (TTL) timestamp expiring and failing to
          move to the Dead Message Queue (DMQ).
        format: int64
        type: integer
      maxTtlExpiredToDmqMsgCount:
        description: The number of guaranteed messages moved to the Dead Message Queue
          (DMQ) by the Topic Endpoint due to the maximum time-to-live (TTL) timestamp
          expiring.
        format: int64
        type: integer
      msgSpoolPeakUsage:
        description: The message spool peak usage by the Topic Endpoint, in bytes
          (B).
        format: int64
        type: integer
      msgSpoolUsage:
        description: The message spool usage by the Topic Endpoint, in bytes (B).
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      networkTopic:
        description: The name of the network topic for the Topic Endpoint.
        type: string
      noLocalDeliveryDiscardedMsgCount:
        description: The number of guaranteed messages discarded by the Topic Endpoint
          due to no local delivery being requested.
        format: int64
        type: integer
      otherBindFailureCount:
        description: The number of Topic Endpoint bind failures due to other reasons.
        format: int64
        type: integer
      owner:
        description: The Client Username that owns the Topic Endpoint and has permission
          equivalent to `"delete"`.
        type: string
      permission:
        description: 'The permission level for all consumers of the Topic Endpoint,
          excluding the owner. The allowed values and their meaning are:


          <pre>

          "no-access" - Disallows all access.

          "read-only" - Read-only access to the messages.

          "consume" - Consume (read and remove) messages.

          "modify-topic" - Consume messages or modify the topic/selector.

          "delete" - Consume messages, modify the topic/selector or delete the Client
          created endpoint altogether.

          </pre>

          '
        enum:
        - no-access
        - read-only
        - consume
        - modify-topic
        - delete
        type: string
      redeliveredMsgCount:
        description: The number of guaranteed messages transmitted by the Topic Endpoint
          for redelivery.
        format: int64
        type: integer
      rejectLowPriorityMsgEnabled:
        description: Indicates whether the checking of low priority messages against
          the `rejectLowPriorityMsgLimit` is enabled.
        type: boolean
      rejectLowPriorityMsgLimit:
        description: The number of messages of any priority in the Topic Endpoint
          above which low priority messages are not admitted but higher priority messages
          are allowed.
        format: int64
        type: integer
      rejectMsgToSenderOnDiscardBehavior:
        description: 'Determines when to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs cause the message
          to not be delivered to any destination and Transacted Session commits to
          fail. The allowed values and their meaning are:


          <pre>

          "always" - Always return a negative acknowledgment (NACK) to the sending
          client on message discard.

          "when-topic-endpoint-enabled" - Only return a negative acknowledgment (NACK)
          to the sending client on message discard when the Topic Endpoint is enabled.

          "never" - Never return a negative acknowledgment (NACK) to the sending client
          on message discard.

          </pre>

          '
        enum:
        - always
        - when-topic-endpoint-enabled
        - never
        type: string
      replayFailureCount:
        description: The number of replays that failed for the Topic Endpoint.
        format: int64
        type: integer
      replayStartCount:
        description: The number of replays started for the Topic Endpoint.
        format: int64
        type: integer
      replayState:
        description: 'The state of replay for the Topic Endpoint. The allowed values
          and their meaning are:


          <pre>

          "initializing" - All messages are being deleted from the endpoint before
          replay starts.

          "active" - Subscription matching logged messages are being replayed to the
          endpoint.

          "pending-complete" - Replay is complete, but final accounting is in progress.

          "complete" - Replay and all related activities are complete.

          "failed" - Replay has failed and is waiting for an unbind response.

          </pre>

          '
        type: string
      replaySuccessCount:
        description: The number of replays that succeeded for the Topic Endpoint.
        format: int64
        type: integer
      replayedAckedMsgCount:
        description: The number of replayed messages transmitted by the Topic Endpoint
          and acked by all consumers.
        format: int64
        type: integer
      replayedTxMsgCount:
        description: The number of replayed messages transmitted by the Topic Endpoint.
        format: int64
        type: integer
      replicationActiveAckPropTxMsgCount:
        description: The number of acknowledgement messages propagated by the Topic
          Endpoint to the replication standby remote Message VPN.
        format: int64
        type: integer
      replicationStandbyAckPropRxMsgCount:
        description: The number of propagated acknowledgement messages received by
          the Topic Endpoint from the replication active remote Message VPN.
        format: int64
        type: integer
      replicationStandbyAckedByAckPropMsgCount:
        description: The number of messages acknowledged in the Topic Endpoint by
          acknowledgement propagation from the replication active remote Message VPN.
        format: int64
        type: integer
      replicationStandbyRxMsgCount:
        description: The number of messages received by the Topic Endpoint from the
          replication active remote Message VPN.
        format: int64
        type: integer
      respectMsgPriorityEnabled:
        description: Indicates whether message priorities are respected. When enabled,
          messages contained in the Topic Endpoint are delivered in priority order,
          from 9 (highest) to 0 (lowest).
        type: boolean
      respectTtlEnabled:
        description: Indicates whether the time-to-live (TTL) for messages in the
          Topic Endpoint is respected. When enabled, expired messages are discarded
          or moved to the DMQ.
        type: boolean
      rxByteRate:
        description: The current message rate received by the Topic Endpoint, in bytes
          per second (B/sec).
        format: int32
        type: integer
      rxMsgRate:
        description: The current message rate received by the Topic Endpoint, in messages
          per second (msg/sec).
        format: int64
        type: integer
      rxSelector:
        description: Indicates whether the Topic Endpoint has a selector to filter
          received messages.
        type: boolean
      selector:
        description: The value of the receive selector for the Topic Endpoint.
        type: string
      selectorExaminedMsgCount:
        description: The number of guaranteed messages examined by the Topic Endpoint
          selector.
        format: int64
        type: integer
      selectorMatchedMsgCount:
        description: The number of guaranteed messages for which the Topic Endpoint
          selector matched.
        format: int64
        type: integer
      selectorNotMatchedMsgCount:
        description: The number of guaranteed messages for which the Topic Endpoint
          selector did not match.
        format: int64
        type: integer
      spooledByteCount:
        description: The amount of guaranteed messages that were spooled in the Topic
          Endpoint, in bytes (B).
        format: int64
        type: integer
      spooledMsgCount:
        description: The number of guaranteed messages that were spooled in the Topic
          Endpoint.
        format: int64
        type: integer
      topicEndpointName:
        description: The name of the Topic Endpoint.
        type: string
      txByteRate:
        description: The current message rate transmitted by the Topic Endpoint, in
          bytes per second (B/sec).
        format: int64
        type: integer
      txMsgRate:
        description: The current message rate transmitted by the Topic Endpoint, in
          messages per second (msg/sec).
        format: int64
        type: integer
      txUnackedMsgCount:
        description: The number of guaranteed messages in the Topic Endpoint that
          have been transmitted but not acknowledged by all consumers.
        format: int64
        type: integer
      virtualRouter:
        description: 'The virtual router used by the Topic Endpoint. The allowed values
          and their meaning are:


          <pre>

          "primary" - The endpoint belongs to the primary virtual router.

          "backup" - The endpoint belongs to the backup virtual router.

          </pre>

          '
        type: string
    type: object
  MsgVpnTopicEndpointCollections:
    properties:
      msgs:
        $ref: '#/definitions/MsgVpnTopicEndpointCollectionsMsgs'
      priorities:
        $ref: '#/definitions/MsgVpnTopicEndpointCollectionsPriorities'
      txFlows:
        $ref: '#/definitions/MsgVpnTopicEndpointCollectionsTxflows'
    type: object
  MsgVpnTopicEndpointCollectionsMsgs:
    properties:
      count:
        description: The total number of objects in the msgs collection.
        format: int64
        type: integer
    type: object
  MsgVpnTopicEndpointCollectionsPriorities:
    properties:
      count:
        description: The total number of objects in the priorities collection.
        format: int64
        type: integer
    type: object
  MsgVpnTopicEndpointCollectionsTxflows:
    properties:
      count:
        description: The total number of objects in the txFlows collection.
        format: int64
        type: integer
    type: object
  MsgVpnTopicEndpointLinks:
    properties:
      msgsUri:
        description: The URI of this Topic Endpoint's collection of Topic Endpoint
          Message objects.
        type: string
      prioritiesUri:
        description: The URI of this Topic Endpoint's collection of Topic Endpoint
          Priority objects.
        type: string
      txFlowsUri:
        description: The URI of this Topic Endpoint's collection of Topic Endpoint
          Transmit Flow objects.
        type: string
      uri:
        description: The URI of this Topic Endpoint object.
        type: string
    type: object
  MsgVpnTopicEndpointMsg:
    properties:
      attachmentSize:
        description: The size of the Message attachment, in bytes (B).
        format: int64
        type: integer
      contentSize:
        description: The size of the Message content, in bytes (B).
        format: int64
        type: integer
      dmqEligible:
        description: Indicates whether the Message is eligible for the Dead Message
          Queue (DMQ).
        type: boolean
      expiryTime:
        description: The timestamp of when the Message expires. This value represents
          the number of seconds since 1970-01-01 00:00:00 UTC (Unix time).
        format: int32
        type: integer
      msgId:
        description: The identifier (ID) of the Message.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      priority:
        description: The priority level of the Message, from 9 (highest) to 0 (lowest).
        format: int32
        type: integer
      publisherId:
        description: The identifier (ID) of the Message publisher.
        format: int64
        type: integer
      redeliveryCount:
        description: The number of times the Message has been redelivered.
        format: int32
        type: integer
      replicatedMateMsgId:
        description: The Message identifier (ID) on the replication mate. Applicable
          only to replicated messages.
        format: int64
        type: integer
      replicationState:
        description: 'The replication state of the Message. The allowed values and
          their meaning are:


          <pre>

          "replicated" - The Message is replicated to the remote Message VPN.

          "not-replicated" - The Message is not being replicated to the remote Message
          VPN.

          "pending-replication" - The Message is queued for replication to the remote
          Message VPN.

          </pre>

          '
        type: string
      spooledTime:
        description: The timestamp of when the Message was spooled in the Topic Endpoint.
          This value represents the number of seconds since 1970-01-01 00:00:00 UTC
          (Unix time).
        format: int32
        type: integer
      topicEndpointName:
        description: The name of the Topic Endpoint.
        type: string
      undelivered:
        description: Indicates whether delivery of the Message has never been attempted.
        type: boolean
    type: object
  MsgVpnTopicEndpointMsgCollections:
    properties: {}
    type: object
  MsgVpnTopicEndpointMsgLinks:
    properties:
      uri:
        description: The URI of this Topic Endpoint Message object.
        type: string
    type: object
  MsgVpnTopicEndpointMsgResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTopicEndpointMsgCollections'
      data:
        $ref: '#/definitions/MsgVpnTopicEndpointMsg'
      links:
        $ref: '#/definitions/MsgVpnTopicEndpointMsgLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointMsgsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointMsgCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointMsg'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointMsgLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointPrioritiesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointPriorityCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointPriority'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointPriorityLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointPriority:
    properties:
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      priority:
        description: The level of the Priority, from 9 (highest) to 0 (lowest).
        format: int64
        type: integer
      spooledByteCount:
        description: The amount of guaranteed messages at this Priority spooled by
          the Topic Endpoint, in bytes (B).
        format: int64
        type: integer
      spooledMsgCount:
        description: The number of guaranteed messages at this Priority spooled by
          the Topic Endpoint.
        format: int64
        type: integer
      topicEndpointName:
        description: The name of the Topic Endpoint.
        type: string
    type: object
  MsgVpnTopicEndpointPriorityCollections:
    properties: {}
    type: object
  MsgVpnTopicEndpointPriorityLinks:
    properties:
      uri:
        description: The URI of this Topic Endpoint Priority object.
        type: string
    type: object
  MsgVpnTopicEndpointPriorityResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTopicEndpointPriorityCollections'
      data:
        $ref: '#/definitions/MsgVpnTopicEndpointPriority'
      links:
        $ref: '#/definitions/MsgVpnTopicEndpointPriorityLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTopicEndpointCollections'
      data:
        $ref: '#/definitions/MsgVpnTopicEndpoint'
      links:
        $ref: '#/definitions/MsgVpnTopicEndpointLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointTemplate:
    properties:
      accessType:
        description: 'The access type for delivering messages to consumer flows. The
          allowed values and their meaning are:


          <pre>

          "exclusive" - Exclusive delivery of messages to the first bound consumer
          flow.

          "non-exclusive" - Non-exclusive delivery of messages to all bound consumer
          flows in a round-robin fashion.

          </pre>

          '
        enum:
        - exclusive
        - non-exclusive
        type: string
      consumerAckPropagationEnabled:
        description: Indicates whether the propagation of consumer acknowledgements
          (ACKs) received on the active replication Message VPN to the standby replication
          Message VPN is enabled.
        type: boolean
      deadMsgQueue:
        description: The name of the Dead Message Queue (DMQ).
        type: string
      eventBindCountThreshold:
        $ref: '#/definitions/EventThreshold'
      eventMsgSpoolUsageThreshold:
        $ref: '#/definitions/EventThreshold'
      eventRejectLowPriorityMsgLimitThreshold:
        $ref: '#/definitions/EventThreshold'
      maxBindCount:
        description: The maximum number of consumer flows that can bind.
        format: int64
        type: integer
      maxDeliveredUnackedMsgsPerFlow:
        description: The maximum number of messages delivered but not acknowledged
          per flow.
        format: int64
        type: integer
      maxMsgSize:
        description: The maximum message size allowed, in bytes (B).
        format: int32
        type: integer
      maxMsgSpoolUsage:
        description: The maximum message spool usage allowed, in megabytes (MB). A
          value of 0 only allows spooling of the last message received and disables
          quota checking.
        format: int64
        type: integer
      maxRedeliveryCount:
        description: The maximum number of message redelivery attempts that will occur
          prior to the message being discarded or moved to the DMQ. A value of 0 means
          to retry forever.
        format: int64
        type: integer
      maxTtl:
        description: The maximum time in seconds a message can stay in the Topic Endpoint
          when `respectTtlEnabled` is `"true"`. A message expires when the lesser
          of the sender assigned time-to-live (TTL) in the message and the `maxTtl`
          configured for the Topic Endpoint, is exceeded. A value of 0 disables expiry.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      permission:
        description: 'The permission level for all consumers, excluding the owner.
          The allowed values and their meaning are:


          <pre>

          "no-access" - Disallows all access.

          "read-only" - Read-only access to the messages.

          "consume" - Consume (read and remove) messages.

          "modify-topic" - Consume messages or modify the topic/selector.

          "delete" - Consume messages, modify the topic/selector or delete the Client
          created endpoint altogether.

          </pre>

          '
        enum:
        - no-access
        - read-only
        - consume
        - modify-topic
        - delete
        type: string
      rejectLowPriorityMsgEnabled:
        description: Indicates whether the checking of low priority messages against
          the `rejectLowPriorityMsgLimit` is enabled.
        type: boolean
      rejectLowPriorityMsgLimit:
        description: The number of messages that are permitted before low priority
          messages are rejected.
        format: int64
        type: integer
      rejectMsgToSenderOnDiscardBehavior:
        description: 'Determines when to return negative acknowledgements (NACKs)
          to sending clients on message discards. Note that NACKs cause the message
          to not be delivered to any destination and Transacted Session commits to
          fail. The allowed values and their meaning are:


          <pre>

          "always" - Always return a negative acknowledgment (NACK) to the sending
          client on message discard.

          "when-topic-endpoint-enabled" - Only return a negative acknowledgment (NACK)
          to the sending client on message discard when the Topic Endpoint is enabled.

          "never" - Never return a negative acknowledgment (NACK) to the sending client
          on message discard.

          </pre>

          '
        enum:
        - always
        - when-topic-endpoint-enabled
        - never
        type: string
      respectMsgPriorityEnabled:
        description: Indicates whether message priorities are respected. When enabled,
          messages are delivered in priority order, from 9 (highest) to 0 (lowest).
        type: boolean
      respectTtlEnabled:
        description: Indicates whether the time-to-live (TTL) for messages is respected.
          When enabled, expired messages are discarded or moved to the DMQ.
        type: boolean
      topicEndpointNameFilter:
        description: 'A wildcardable pattern used to determine which Topic Endpoints
          use settings from this Template. Two different wildcards are supported:
          * and >. Similar to topic filters or subscription patterns, a > matches
          anything (but only when used at the end), and a * matches zero or more characters
          but never a slash (/). A > is only a wildcard when used at the end, after
          a /. A * is only allowed at the end, after a slash (/).'
        type: string
      topicEndpointTemplateName:
        description: The name of the Topic Endpoint Template.
        type: string
    type: object
  MsgVpnTopicEndpointTemplateCollections:
    properties: {}
    type: object
  MsgVpnTopicEndpointTemplateLinks:
    properties:
      uri:
        description: The URI of this Topic Endpoint Template object.
        type: string
    type: object
  MsgVpnTopicEndpointTemplateResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTopicEndpointTemplateCollections'
      data:
        $ref: '#/definitions/MsgVpnTopicEndpointTemplate'
      links:
        $ref: '#/definitions/MsgVpnTopicEndpointTemplateLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointTemplatesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTemplateCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTemplate'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTemplateLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointTxFlow:
    properties:
      ackedMsgCount:
        description: The number of guaranteed messages delivered and acknowledged
          by the consumer.
        format: int64
        type: integer
      activityState:
        description: 'The activity state of the Flow. The allowed values and their
          meaning are:


          <pre>

          "active-browser" - The Flow is active as a browser.

          "active-consumer" - The Flow is active as a consumer.

          "inactive" - The Flow is inactive.

          </pre>

          '
        type: string
      bindTime:
        description: The timestamp of when the Flow bound to the Topic Endpoint. This
          value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix
          time).
        format: int32
        type: integer
      clientName:
        description: The name of the Client.
        type: string
      consumerRedeliveryRequestAllowed:
        description: Indicates whether redelivery requests can be received as negative
          acknowledgements (NACKs) from the consumer. Applicable only to REST consumers.
        type: boolean
      cutThroughAckedMsgCount:
        description: The number of guaranteed messages that used cut-through delivery
          and are acknowledged by the consumer.
        format: int64
        type: integer
      deliveryState:
        description: 'The delivery state of the Flow. The allowed values and their
          meaning are:


          <pre>

          "closed" - The Flow is unbound.

          "opened" - The Flow is bound but inactive.

          "unbinding" - The Flow received an unbind request.

          "handshaking" - The Flow is handshaking to become active.

          "deliver-cut-through" - The Flow is streaming messages using direct+guaranteed
          delivery.

          "deliver-from-input-stream" - The Flow is streaming messages using guaranteed
          delivery.

          "deliver-from-memory" - The Flow throttled causing message delivery from
          memory (RAM).

          "deliver-from-spool" - The Flow stalled causing message delivery from spool
          (ADB or disk).

          </pre>

          '
        type: string
      flowId:
        description: The identifier (ID) of the Flow.
        format: int64
        type: integer
      highestAckPendingMsgId:
        description: The highest identifier (ID) of message transmitted and waiting
          for acknowledgement.
        format: int64
        type: integer
      lastAckedMsgId:
        description: The identifier (ID) of the last message transmitted and acknowledged
          by the consumer.
        format: int64
        type: integer
      lowestAckPendingMsgId:
        description: The lowest identifier (ID) of message transmitted and waiting
          for acknowledgement.
        format: int64
        type: integer
      maxUnackedMsgsExceededMsgCount:
        description: The number of guaranteed messages that exceeded the maximum number
          of delivered unacknowledged messages.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      noLocalDelivery:
        description: Indicates whether not to deliver messages to a consumer that
          published them.
        type: boolean
      redeliveredMsgCount:
        description: The number of guaranteed messages that were redelivered.
        format: int64
        type: integer
      redeliveryRequestCount:
        description: The number of consumer requests via negative acknowledgements
          (NACKs) to redeliver guaranteed messages.
        format: int64
        type: integer
      sessionName:
        description: The name of the Transacted Session for the Flow.
        type: string
      storeAndForwardAckedMsgCount:
        description: The number of guaranteed messages that used store and forward
          delivery and are acknowledged by the consumer.
        format: int64
        type: integer
      topicEndpointName:
        description: The name of the Topic Endpoint.
        type: string
      unackedMsgCount:
        description: The number of guaranteed messages delivered but not yet acknowledged
          by the consumer.
        format: int64
        type: integer
      usedWindowSize:
        description: The number of guaranteed messages using the available window
          size.
        format: int32
        type: integer
      windowClosedCount:
        description: The number of times the window for guaranteed messages was filled
          and closed before an acknowledgement was received.
        format: int64
        type: integer
      windowSize:
        description: The number of outstanding guaranteed messages that can be transmitted
          over the Flow before an acknowledgement is received.
        format: int64
        type: integer
    type: object
  MsgVpnTopicEndpointTxFlowCollections:
    properties: {}
    type: object
  MsgVpnTopicEndpointTxFlowLinks:
    properties:
      uri:
        description: The URI of this Topic Endpoint Transmit Flow object.
        type: string
    type: object
  MsgVpnTopicEndpointTxFlowResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTopicEndpointTxFlowCollections'
      data:
        $ref: '#/definitions/MsgVpnTopicEndpointTxFlow'
      links:
        $ref: '#/definitions/MsgVpnTopicEndpointTxFlowLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointTxFlowsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTxFlowCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTxFlow'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointTxFlowLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTopicEndpointsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpoint'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTopicEndpointLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransaction:
    properties:
      clientId:
        description: The identifier (ID) of the Client.
        format: int32
        type: integer
      clientName:
        description: The name of the Client.
        type: string
      clientUsername:
        description: The username of the Client.
        type: string
      idleTimeout:
        description: The number of seconds before an idle Transaction may be automatically
          rolled back and freed.
        format: int32
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      replicated:
        description: Indicates whether the Transaction is replicated.
        type: boolean
      sessionName:
        description: The name of the Transacted Session for the Transaction.
        type: string
      state:
        description: 'The state of the Transaction. The allowed values and their meaning
          are:


          <pre>

          "active" - The Transaction was started.

          "suspended" - The Transaction was suspended.

          "idle" - The Transaction was ended.

          "prepared" - The Transaction was prepared.

          "complete" - The Transaction was committed or rolled back.

          </pre>

          '
        type: string
      timeInState:
        description: The number of seconds the Transaction has remained in the current
          state.
        format: int32
        type: integer
      type:
        description: 'The type of Transaction. The allowed values and their meaning
          are:


          <pre>

          "xa" - The Transaction is an XA Transaction.

          "local" - The Transaction is a local Transaction.

          </pre>

          '
        type: string
      xid:
        description: The identifier (ID) of the Transaction.
        type: string
    type: object
  MsgVpnTransactionCollections:
    properties:
      consumerMsgs:
        $ref: '#/definitions/MsgVpnTransactionCollectionsConsumermsgs'
      publisherMsgs:
        $ref: '#/definitions/MsgVpnTransactionCollectionsPublishermsgs'
    type: object
  MsgVpnTransactionCollectionsConsumermsgs:
    properties:
      count:
        description: The total number of objects in the consumerMsgs collection.
        format: int64
        type: integer
    type: object
  MsgVpnTransactionCollectionsPublishermsgs:
    properties:
      count:
        description: The total number of objects in the publisherMsgs collection.
        format: int64
        type: integer
    type: object
  MsgVpnTransactionConsumerMsg:
    properties:
      endpointName:
        description: The name of the Queue or Topic Endpoint source.
        type: string
      endpointType:
        description: 'The type of endpoint source. The allowed values and their meaning
          are:


          <pre>

          "queue" - The Message is from a Queue.

          "topic-endpoint" - The Message is from a Topic Endpoint.

          </pre>

          '
        type: string
      msgId:
        description: The identifier (ID) of the Message.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      xid:
        description: The identifier (ID) of the Transaction.
        type: string
    type: object
  MsgVpnTransactionConsumerMsgCollections:
    properties: {}
    type: object
  MsgVpnTransactionConsumerMsgLinks:
    properties:
      uri:
        description: The URI of this Transaction Consumer Message object.
        type: string
    type: object
  MsgVpnTransactionConsumerMsgResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTransactionConsumerMsgCollections'
      data:
        $ref: '#/definitions/MsgVpnTransactionConsumerMsg'
      links:
        $ref: '#/definitions/MsgVpnTransactionConsumerMsgLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransactionConsumerMsgsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTransactionConsumerMsgCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTransactionConsumerMsg'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTransactionConsumerMsgLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransactionLinks:
    properties:
      consumerMsgsUri:
        description: The URI of this Replicated Local Transaction or XA Transaction's
          collection of Transaction Consumer Message objects.
        type: string
      publisherMsgsUri:
        description: The URI of this Replicated Local Transaction or XA Transaction's
          collection of Transaction Publisher Message objects.
        type: string
      uri:
        description: The URI of this Replicated Local Transaction or XA Transaction
          object.
        type: string
    type: object
  MsgVpnTransactionPublisherMsg:
    properties:
      msgId:
        description: The identifier (ID) of the Message.
        format: int64
        type: integer
      msgVpnName:
        description: The name of the Message VPN.
        type: string
      topic:
        description: The topic destination of the Message.
        type: string
      xid:
        description: The identifier (ID) of the Transaction.
        type: string
    type: object
  MsgVpnTransactionPublisherMsgCollections:
    properties: {}
    type: object
  MsgVpnTransactionPublisherMsgLinks:
    properties:
      uri:
        description: The URI of this Transaction Publisher Message object.
        type: string
    type: object
  MsgVpnTransactionPublisherMsgResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTransactionPublisherMsgCollections'
      data:
        $ref: '#/definitions/MsgVpnTransactionPublisherMsg'
      links:
        $ref: '#/definitions/MsgVpnTransactionPublisherMsgLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransactionPublisherMsgsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTransactionPublisherMsgCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTransactionPublisherMsg'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTransactionPublisherMsgLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransactionResponse:
    properties:
      collections:
        $ref: '#/definitions/MsgVpnTransactionCollections'
      data:
        $ref: '#/definitions/MsgVpnTransaction'
      links:
        $ref: '#/definitions/MsgVpnTransactionLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnTransactionsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnTransactionCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpnTransaction'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnTransactionLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  MsgVpnsResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/MsgVpnCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/MsgVpn'
        type: array
      links:
        items:
          $ref: '#/definitions/MsgVpnLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  SempError:
    properties:
      code:
        description: The error code which uniquely identifies the error that has occurred.
        format: int32
        type: integer
      description:
        description: The verbose description of the problem.
        type: string
      status:
        description: The terse status string associated with `code`.
        type: string
    required:
    - code
    - status
    - description
    type: object
  SempMeta:
    properties:
      count:
        description: The total number of objects requested, irrespective of page size.
          This may be a count of all objects in a collection or a filtered subset.
          It represents a snapshot in time and may change when paging through results.
        format: int64
        type: integer
      error:
        $ref: '#/definitions/SempError'
      paging:
        $ref: '#/definitions/SempPaging'
      request:
        $ref: '#/definitions/SempRequest'
      responseCode:
        description: The HTTP response code, one of 200 (success), 4xx (client error),
          or 5xx (server error).
        format: int32
        type: integer
    required:
    - request
    - responseCode
    type: object
  SempMetaOnlyResponse:
    properties:
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  SempPaging:
    properties:
      cursorQuery:
        description: The cursor, or position, for the next page of objects. Use this
          as the `cursor` query parameter of the next request.
        type: string
      nextPageUri:
        description: The URI of the next page of objects. `cursorQuery` is already
          embedded within this URI.
        type: string
    required:
    - cursorQuery
    - nextPageUri
    type: object
  SempRequest:
    properties:
      method:
        description: The HTTP method of the request which resulted in this response.
        type: string
      uri:
        description: The URI of the request which resulted in this response.
        type: string
    required:
    - uri
    - method
    type: object
  VirtualHostname:
    properties:
      enabled:
        description: Enable or disable Virtual Hostname to Message VPN mapping.
        type: boolean
      msgVpnName:
        description: The message VPN to which this virtual hostname is mapped.
        type: string
      virtualHostname:
        description: The virtual hostname.
        type: string
    type: object
  VirtualHostnameCollections:
    properties: {}
    type: object
  VirtualHostnameLinks:
    properties:
      uri:
        description: The URI of this Virtual Hostname object.
        type: string
    type: object
  VirtualHostnameResponse:
    properties:
      collections:
        $ref: '#/definitions/VirtualHostnameCollections'
      data:
        $ref: '#/definitions/VirtualHostname'
      links:
        $ref: '#/definitions/VirtualHostnameLinks'
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
  VirtualHostnamesResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/VirtualHostnameCollections'
        type: array
      data:
        items:
          $ref: '#/definitions/VirtualHostname'
        type: array
      links:
        items:
          $ref: '#/definitions/VirtualHostnameLinks'
        type: array
      meta:
        $ref: '#/definitions/SempMeta'
    required:
    - meta
    type: object
host: www.solace.com
info:
  contact:
    email: support@solace.com
    name: Solace
    url: http://www.solace.com
  description: 'SEMP (starting in `v2`, see note 1) is a RESTful API for configuring,
    monitoring, and administering a Solace PubSub+ broker.


    SEMP uses URIs to address manageable **resources** of the Solace PubSub+ broker.
    Resources are individual **objects**, **collections** of objects, or (exclusively
    in the action API) **actions**. This document applies to the following API:



    API|Base Path|Purpose|Comments

    :---|:---|:---|:---

    Monitoring|/SEMP/v2/monitor|Querying operational parameters|See note 2




    The following APIs are also available:



    API|Base Path|Purpose|Comments

    :---|:---|:---|:---

    Action|/SEMP/v2/action|Performing actions|See note 2

    Configuration|/SEMP/v2/config|Reading and writing config state|See note 2




    Resources are always nouns, with individual objects being singular and collections
    being plural.


    Objects within a collection are identified by an `obj-id`, which follows the collection
    name with the form `collection-name/obj-id`.


    Actions within an object are identified by an `action-id`, which follows the object
    name with the form `obj-id/action-id`.


    Some examples:


    ```

    /SEMP/v2/config/msgVpns                        ; MsgVpn collection

    /SEMP/v2/config/msgVpns/a                      ; MsgVpn object named "a"

    /SEMP/v2/config/msgVpns/a/queues               ; Queue collection in MsgVpn "a"

    /SEMP/v2/config/msgVpns/a/queues/b             ; Queue object named "b" in MsgVpn
    "a"

    /SEMP/v2/action/msgVpns/a/queues/b/startReplay ; Action that starts a replay on
    Queue "b" in MsgVpn "a"

    /SEMP/v2/monitor/msgVpns/a/clients             ; Client collection in MsgVpn "a"

    /SEMP/v2/monitor/msgVpns/a/clients/c           ; Client object named "c" in MsgVpn
    "a"

    ```


    ## Collection Resources


    Collections are unordered lists of objects (unless described as otherwise), and
    are described by JSON arrays. Each item in the array represents an object in the
    same manner as the individual object would normally be represented. In the configuration
    API, the creation of a new object is done through its collection resource.


    ## Object and Action Resources


    Objects are composed of attributes, actions, collections, and other objects. They
    are described by JSON objects as name/value pairs. The collections and actions
    of an object are not contained directly in the object''s JSON content; rather
    the content includes an attribute containing a URI which points to the collections
    and actions. These contained resources must be managed through this URI. At a
    minimum, every object has one or more identifying attributes, and its own `uri`
    attribute which contains the URI pointing to itself.


    Actions are also composed of attributes, and are described by JSON objects as
    name/value pairs. Unlike objects, however, they are not members of a collection
    and cannot be retrieved, only performed. Actions only exist in the action API.


    Attributes in an object or action may have any combination of the following properties:



    Property|Meaning|Comments

    :---|:---|:---

    Identifying|Attribute is involved in unique identification of the object, and
    appears in its URI|

    Required|Attribute must be provided in the request|

    Read-Only|Attribute can only be read, not written.|See note 3

    Write-Only|Attribute can only be written, not read, unless the attribute is also
    opaque|See the documentation for the opaque property

    Requires-Disable|Attribute can only be changed when object is disabled|

    Deprecated|Attribute is deprecated, and will disappear in the next SEMP version|

    Opaque|Attribute can be set or retrieved in opaque form when the `opaquePassword`
    query parameter is present|See the `opaquePassword` query parameter documentation




    In some requests, certain attributes may only be provided in certain combinations
    with other attributes:



    Relationship|Meaning

    :---|:---

    Requires|Attribute may only be changed by a request if a particular attribute
    or combination of attributes is also provided in the request

    Conflicts|Attribute may only be provided in a request if a particular attribute
    or combination of attributes is not also provided in the request




    In the monitoring API, any non-identifying attribute may not be returned in a
    GET.


    ## HTTP Methods


    The following HTTP methods manipulate resources in accordance with these general
    principles. Note that some methods are only used in certain APIs:



    Method|Resource|Meaning|Request Body|Response Body|Missing Request Attributes

    :---|:---|:---|:---|:---|:---

    POST|Collection|Create object|Initial attribute values|Object attributes and metadata|Set
    to default

    PUT|Object|Create or replace object (see note 5)|New attribute values|Object attributes
    and metadata|Set to default, with certain exceptions (see note 4)

    PUT|Action|Performs action|Action arguments|Action metadata|N/A

    PATCH|Object|Update object|New attribute values|Object attributes and metadata|unchanged

    DELETE|Object|Delete object|Empty|Object metadata|N/A

    GET|Object|Get object|Empty|Object attributes and metadata|N/A

    GET|Collection|Get collection|Empty|Object attributes and collection metadata|N/A




    ## Common Query Parameters


    The following are some common query parameters that are supported by many method/URI
    combinations. Individual URIs may document additional parameters. Note that multiple
    query parameters can be used together in a single URI, separated by the ampersand
    character. For example:


    ```

    ; Request for the MsgVpns collection using two hypothetical query parameters

    ; "q1" and "q2" with values "val1" and "val2" respectively

    /SEMP/v2/monitor/msgVpns?q1=val1&q2=val2

    ```


    ### select


    Include in the response only selected attributes of the object, or exclude from
    the response selected attributes of the object. Use this query parameter to limit
    the size of the returned data for each returned object, return only those fields
    that are desired, or exclude fields that are not desired.


    The value of `select` is a comma-separated list of attribute names. If the list
    contains attribute names that are not prefaced by `-`, only those attributes are
    included in the response. If the list contains attribute names that are prefaced
    by `-`, those attributes are excluded from the response. If the list contains
    both types, then the difference of the first set of attributes and the second
    set of attributes is returned. If the list is empty (i.e. `select=`), no attributes
    are returned.


    All attributes that are prefaced by `-` must follow all attributes that are not
    prefaced by `-`. In addition, each attribute name in the list must match at least
    one attribute in the object.


    Names may include the `*` wildcard (zero or more characters). Nested attribute
    names are supported using periods (e.g. `parentName.childName`).


    Some examples:


    ```

    ; List of all MsgVpn names

    /SEMP/v2/monitor/msgVpns?select=msgVpnName

    ; List of all MsgVpn and their attributes except for their names

    /SEMP/v2/monitor/msgVpns?select=-msgVpnName

    ; Authentication attributes of MsgVpn "finance"

    /SEMP/v2/monitor/msgVpns/finance?select=authentication*

    ; All attributes of MsgVpn "finance" except for authentication attributes

    /SEMP/v2/monitor/msgVpns/finance?select=-authentication*

    ; Access related attributes of Queue "orderQ" of MsgVpn "finance"

    /SEMP/v2/monitor/msgVpns/finance/queues/orderQ?select=owner,permission

    ```


    ### where


    Include in the response only objects where certain conditions are true. Use this
    query parameter to limit which objects are returned to those whose attribute values
    meet the given conditions.


    The value of `where` is a comma-separated list of expressions. All expressions
    must be true for the object to be included in the response. Each expression takes
    the form:


    ```

    expression  = attribute-name OP value

    OP          = ''=='' | ''!='' | ''&lt;'' | ''&gt;'' | ''&lt;='' | ''&gt;=''

    ```


    `value` may be a number, string, `true`, or `false`, as appropriate for the type
    of `attribute-name`. Greater-than and less-than comparisons only work for numbers.
    A `*` in a string `value` is interpreted as a wildcard (zero or more characters).
    Some examples:


    ```

    ; Only enabled MsgVpns

    /SEMP/v2/monitor/msgVpns?where=enabled==true

    ; Only MsgVpns using basic non-LDAP authentication

    /SEMP/v2/monitor/msgVpns?where=authenticationBasicEnabled==true,authenticationBasicType!=ldap

    ; Only MsgVpns that allow more than 100 client connections

    /SEMP/v2/monitor/msgVpns?where=maxConnectionCount>100

    ; Only MsgVpns with msgVpnName starting with "B":

    /SEMP/v2/monitor/msgVpns?where=msgVpnName==B*

    ```


    ### count


    Limit the count of objects in the response. This can be useful to limit the size
    of the response for large collections. The minimum value for `count` is `1` and
    the default is `10`. There is also a per-collection maximum value to limit request
    handling time. For example:


    ```

    ; Up to 25 MsgVpns

    /SEMP/v2/monitor/msgVpns?count=25

    ```


    ### cursor


    The cursor, or position, for the next page of objects. Cursors are opaque data
    that should not be created or interpreted by SEMP clients, and should only be
    used as described below.


    When a request is made for a collection and there may be additional objects available
    for retrieval that are not included in the initial response, the response will
    include a `cursorQuery` field containing a cursor. The value of this field can
    be specified in the `cursor` query parameter of a subsequent request to retrieve
    the next page of objects. For convenience, an appropriate URI is constructed automatically
    by the broker and included in the `nextPageUri` field of the response. This URI
    can be used directly to retrieve the next page of objects.


    ### opaquePassword


    Attributes with the opaque property are also write-only and so cannot normally
    be retrieved in a GET. However, when a password is provided in the `opaquePassword`
    query parameter, attributes with the opaque property are retrieved in a GET in
    opaque form, encrypted with this password. The query parameter can also be used
    on a POST, PATCH, or PUT to set opaque attributes using opaque attribute values
    retrieved in a GET, so long as:


    1. the same password that was used to retrieve the opaque attribute values is
    provided; and


    2. the broker to which the request is being sent has the same major and minor
    SEMP version as the broker that produced the opaque attribute values.


    The password provided in the query parameter must be a minimum of 8 characters
    and a maximum of 128 characters.


    The query parameter can only be used in the configuration API, and only over HTTPS.


    ## Help


    Visit [our website](https://solace.com) to learn more about Solace.


    You can also download the SEMP API specifications by clicking [here](https://solace.com/downloads/).


    If you need additional support, please contact us at [support@solace.com](mailto:support@solace.com).


    ## Notes


    Note|Description

    :---:|:---

    1|This specification defines SEMP starting in "v2", and not the original SEMP
    "v1" interface. Request and response formats between "v1" and "v2" are entirely
    incompatible, although both protocols share a common port configuration on the
    Solace PubSub+ broker. They are differentiated by the initial portion of the URI
    path, one of either "/SEMP/" or "/SEMP/v2/"

    2|This API is partially implemented. Only a subset of all objects are available.

    3|Read-only attributes may appear in POST and PUT/PATCH requests. However, if
    a read-only attribute is not marked as identifying, it will be ignored during
    a PUT/PATCH.

    4|On a PUT, if the SEMP user is not authorized to modify the attribute, its value
    is left unchanged rather than set to default. In addition, the values of write-only
    attributes are not set to their defaults on a PUT, except in the following two
    cases: there is a mutual requires relationship with another non-write-only attribute
    and both attributes are absent from the request; or the attribute is also opaque
    and the `opaquePassword` query parameter is provided in the request.

    5|On a PUT, if the object does not exist, it is created first.


    '
  title: SEMP (Solace Element Management Protocol)
  version: '2.17'
parameters:
  countQuery:
    default: 10
    description: Limit the count of objects in the response. See the documentation
      for the `count` parameter.
    in: query
    minimum: 1
    name: count
    required: false
    type: integer
  cursorQuery:
    description: The cursor, or position, for the next page of objects. See the documentation
      for the `cursor` parameter.
    in: query
    name: cursor
    required: false
    type: string
  selectQuery:
    collectionFormat: csv
    description: Include in the response only selected attributes of the object, or
      exclude from the response selected attributes of the object. See the documentation
      for the `select` parameter.
    in: query
    items:
      type: string
    name: select
    required: false
    type: array
  whereQuery:
    collectionFormat: csv
    description: Include in the response only objects where certain conditions are
      true. See the the documentation for the `where` parameter.
    in: query
    items:
      type: string
    name: where
    required: false
    type: array
paths:
  /:
    get:
      description: 'Get a Broker object.


        This object contains global configuration for the message broker.




        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation. Requests which include the following
        attributes require greater access scope/level:



        Attribute|Access Scope/Level

        :---|:---:

        averageRxByteRate|global/read-only

        averageRxCompressedByteRate|global/read-only

        averageRxMsgRate|global/read-only

        averageRxUncompressedByteRate|global/read-only

        averageTxByteRate|global/read-only

        averageTxCompressedByteRate|global/read-only

        averageTxMsgRate|global/read-only

        averageTxUncompressedByteRate|global/read-only

        cspfVersion|global/read-only

        rxByteCount|global/read-only

        rxByteRate|global/read-only

        rxCompressedByteCount|global/read-only

        rxCompressedByteRate|global/read-only

        rxCompressionRatio|global/read-only

        rxMsgCount|global/read-only

        rxMsgRate|global/read-only

        rxUncompressedByteCount|global/read-only

        rxUncompressedByteRate|global/read-only

        serviceAmqpEnabled|global/read-only

        serviceAmqpTlsListenPort|global/read-only

        serviceEventConnectionCountThreshold.clearPercent|global/read-only

        serviceEventConnectionCountThreshold.clearValue|global/read-only

        serviceEventConnectionCountThreshold.setPercent|global/read-only

        serviceEventConnectionCountThreshold.setValue|global/read-only

        serviceHealthCheckEnabled|global/read-only

        serviceHealthCheckListenPort|global/read-only

        serviceMateLinkEnabled|global/read-only

        serviceMateLinkListenPort|global/read-only

        serviceMqttEnabled|global/read-only

        serviceMsgBackboneEnabled|global/read-only

        serviceRedundancyEnabled|global/read-only

        serviceRedundancyFirstListenPort|global/read-only

        serviceRestEventOutgoingConnectionCountThreshold.clearPercent|global/read-only

        serviceRestEventOutgoingConnectionCountThreshold.clearValue|global/read-only

        serviceRestEventOutgoingConnectionCountThreshold.setPercent|global/read-only

        serviceRestEventOutgoingConnectionCountThreshold.setValue|global/read-only

        serviceRestIncomingEnabled|global/read-only

        serviceRestOutgoingEnabled|global/read-only

        serviceSempPlainTextEnabled|global/read-only

        serviceSempPlainTextListenPort|global/read-only

        serviceSempTlsEnabled|global/read-only

        serviceSempTlsListenPort|global/read-only

        serviceSmfCompressionListenPort|global/read-only

        serviceSmfEnabled|global/read-only

        serviceSmfEventConnectionCountThreshold.clearPercent|global/read-only

        serviceSmfEventConnectionCountThreshold.clearValue|global/read-only

        serviceSmfEventConnectionCountThreshold.setPercent|global/read-only

        serviceSmfEventConnectionCountThreshold.setValue|global/read-only

        serviceSmfPlainTextListenPort|global/read-only

        serviceSmfRoutingControlListenPort|global/read-only

        serviceSmfTlsListenPort|global/read-only

        serviceTlsEventConnectionCountThreshold.clearPercent|global/read-only

        serviceTlsEventConnectionCountThreshold.clearValue|global/read-only

        serviceTlsEventConnectionCountThreshold.setPercent|global/read-only

        serviceTlsEventConnectionCountThreshold.setValue|global/read-only

        serviceWebTransportEnabled|global/read-only

        serviceWebTransportPlainTextListenPort|global/read-only

        serviceWebTransportTlsListenPort|global/read-only

        serviceWebTransportWebUrlSuffix|global/read-only

        tlsBlockVersion11Enabled|global/read-only

        tlsCipherSuiteManagementDefaultList|global/read-only

        tlsCipherSuiteManagementList|global/read-only

        tlsCipherSuiteManagementSupportedList|vpn/read-only

        tlsCipherSuiteMsgBackboneDefaultList|global/read-only

        tlsCipherSuiteMsgBackboneList|global/read-only

        tlsCipherSuiteMsgBackboneSupportedList|vpn/read-only

        tlsCipherSuiteSecureShellDefaultList|global/read-only

        tlsCipherSuiteSecureShellList|global/read-only

        tlsCipherSuiteSecureShellSupportedList|vpn/read-only

        tlsCrimeExploitProtectionEnabled|global/read-only

        tlsTicketLifetime|global/read-only

        tlsVersionSupportedList|vpn/read-only

        txByteCount|global/read-only

        txByteRate|global/read-only

        txCompressedByteCount|global/read-only

        txCompressedByteRate|global/read-only

        txCompressionRatio|global/read-only

        txMsgCount|global/read-only

        txMsgRate|global/read-only

        txUncompressedByteCount|global/read-only

        txUncompressedByteRate|global/read-only




        This has been available since 2.13.'
      operationId: getBroker
      parameters:
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Broker object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/BrokerResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Broker object.
      tags:
      - all
  /about:
    get:
      description: 'Get an About object.


        This provides metadata about the SEMP API, such as the version of the API
        supported by the broker.




        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getAbout
      parameters:
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The About object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/AboutResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an About object.
      tags: &id001
      - all
      - about
  /about/api:
    get:
      description: 'Get an API Description object.

        The API Description object provides metadata about the SEMP API.


        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getAboutApi
      parameters: []
      produces:
      - application/json
      responses:
        '200':
          description: The API Description object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/AboutApiResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an API Description object.
      tags:
      - all
      - about
  /about/user:
    get:
      description: 'Get a User object.


        This provides information about the access level for the username used to
        access the SEMP API.




        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getAboutUser
      parameters:
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The User object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/AboutUserResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a User object.
      tags: *id001
  /about/user/msgVpns:
    get:
      description: 'Get a list of User Message VPN objects.


        This provides information about the Message VPN access level for the username
        used to access the SEMP API.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getAboutUserMsgVpns
      parameters:
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of User Message VPN objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/AboutUserMsgVpnsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of User Message VPN objects.
      tags: *id001
  /about/user/msgVpns/{msgVpnName}:
    get:
      description: 'Get a User Message VPN object.


        This provides information about the Message VPN access level for the username
        used to access the SEMP API.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "global/none"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getAboutUserMsgVpn
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The User Message VPN object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/AboutUserMsgVpnResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a User Message VPN object.
      tags: *id001
  /certAuthorities:
    get:
      description: 'Get a list of Certificate Authority objects.


        Clients can authenticate with the message broker over TLS by presenting a
        valid client certificate. The message broker authenticates the client certificate
        by constructing a full certificate chain (from the client certificate to intermediate
        CAs to a configured root CA). The intermediate CAs in this chain can be provided
        by the client, or configured in the message broker. The root CA must be configured
        on the message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        certAuthorityName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getCertAuthorities
      parameters:
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Certificate Authority objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/CertAuthoritiesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Certificate Authority objects.
      tags: &id002
      - all
      - certAuthority
  /certAuthorities/{certAuthorityName}:
    get:
      description: 'Get a Certificate Authority object.


        Clients can authenticate with the message broker over TLS by presenting a
        valid client certificate. The message broker authenticates the client certificate
        by constructing a full certificate chain (from the client certificate to intermediate
        CAs to a configured root CA). The intermediate CAs in this chain can be provided
        by the client, or configured in the message broker. The root CA must be configured
        on the message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        certAuthorityName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getCertAuthority
      parameters:
      - description: The name of the Certificate Authority.
        in: path
        name: certAuthorityName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Certificate Authority object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/CertAuthorityResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Certificate Authority object.
      tags: *id002
  /certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames:
    get:
      description: 'Get a list of OCSP Responder Trusted Common Name objects.


        When an OCSP override URL is configured, the OCSP responder will be required
        to sign the OCSP responses with certificates issued to these Trusted Common
        Names. A maximum of 8 common names can be configured as valid response signers.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        certAuthorityName|x|

        ocspTlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getCertAuthorityOcspTlsTrustedCommonNames
      parameters:
      - description: The name of the Certificate Authority.
        in: path
        name: certAuthorityName
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of OCSP Responder Trusted Common Name objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of OCSP Responder Trusted Common Name objects.
      tags: *id002
  /certAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames/{ocspTlsTrustedCommonName}:
    get:
      description: 'Get an OCSP Responder Trusted Common Name object.


        When an OCSP override URL is configured, the OCSP responder will be required
        to sign the OCSP responses with certificates issued to these Trusted Common
        Names. A maximum of 8 common names can be configured as valid response signers.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        certAuthorityName|x|

        ocspTlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getCertAuthorityOcspTlsTrustedCommonName
      parameters:
      - description: The name of the Certificate Authority.
        in: path
        name: certAuthorityName
        required: true
        type: string
      - description: The expected Trusted Common Name of the OCSP responder remote
          certificate.
        in: path
        name: ocspTlsTrustedCommonName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The OCSP Responder Trusted Common Name object's attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/CertAuthorityOcspTlsTrustedCommonNameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an OCSP Responder Trusted Common Name object.
      tags: *id002
  /dmrClusters:
    get:
      description: 'Get a list of Cluster objects.


        A Cluster is a provisioned object on a message broker that contains global
        DMR configuration parameters.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusters
      parameters:
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Cluster objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/DmrClustersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Cluster objects.
      tags: &id003
      - all
      - dmrCluster
  /dmrClusters/{dmrClusterName}:
    get:
      description: 'Get a Cluster object.


        A Cluster is a provisioned object on a message broker that contains global
        DMR configuration parameters.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrCluster
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Cluster object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Cluster object.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links:
    get:
      description: 'Get a list of Link objects.


        A Link connects nodes (either within a Cluster or between two different Clusters)
        and allows them to exchange topology information, subscriptions and data.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinks
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Link objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinksResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Link objects.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}:
    get:
      description: 'Get a Link object.


        A Link connects nodes (either within a Cluster or between two different Clusters)
        and allows them to exchange topology information, subscriptions and data.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLink
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Link object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Link object.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/channels:
    get:
      description: 'Get a list of Cluster Link Channels objects.


        A Channel is a connection between this broker and a remote node in the Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkChannels
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Cluster Link Channels objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkChannelsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Cluster Link Channels objects.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/channels/{msgVpnName}:
    get:
      description: 'Get a Cluster Link Channels object.


        A Channel is a connection between this broker and a remote node in the Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkChannel
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Cluster Link Channels object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkChannelResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Cluster Link Channels object.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses:
    get:
      description: 'Get a list of Remote Address objects.


        Each Remote Address, consisting of a FQDN or IP address and optional port,
        is used to connect to the remote node for this Link. Up to 4 addresses may
        be provided for each Link, and will be tried on a round-robin basis.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteAddress|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkRemoteAddresses
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Remote Address objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkRemoteAddressesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Remote Address objects.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/remoteAddresses/{remoteAddress}:
    get:
      description: 'Get a Remote Address object.


        Each Remote Address, consisting of a FQDN or IP address and optional port,
        is used to connect to the remote node for this Link. Up to 4 addresses may
        be provided for each Link, and will be tried on a round-robin basis.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteAddress|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkRemoteAddress
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - description: 'The FQDN or IP address (and optional port) of the remote node.
          If a port is not provided, it will vary based on the transport encoding:
          55555 (plain-text), 55443 (encrypted), or 55003 (compressed).'
        in: path
        name: remoteAddress
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Remote Address object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkRemoteAddressResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Remote Address object.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames:
    get:
      description: 'Get a list of Trusted Common Name objects.


        The Trusted Common Names for the Link are used by encrypted transports to
        verify the name in the certificate presented by the remote node. They must
        include the common name of the remote node''s server certificate or client
        certificate, depending upon the initiator of the connection.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteNodeName|x|

        tlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkTlsTrustedCommonNames
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Trusted Common Name objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Trusted Common Name objects.
      tags: *id003
  /dmrClusters/{dmrClusterName}/links/{remoteNodeName}/tlsTrustedCommonNames/{tlsTrustedCommonName}:
    get:
      description: 'Get a Trusted Common Name object.


        The Trusted Common Names for the Link are used by encrypted transports to
        verify the name in the certificate presented by the remote node. They must
        include the common name of the remote node''s server certificate or client
        certificate, depending upon the initiator of the connection.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        remoteNodeName|x|

        tlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterLinkTlsTrustedCommonName
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The name of the node at the remote end of the Link.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - description: The expected trusted common name of the remote certificate.
        in: path
        name: tlsTrustedCommonName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Trusted Common Name object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/DmrClusterLinkTlsTrustedCommonNameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Trusted Common Name object.
      tags: *id003
  /dmrClusters/{dmrClusterName}/topologyIssues:
    get:
      description: 'Get a list of Cluster Topology Issue objects.


        A Cluster Topology Issue indicates incorrect or inconsistent configuration
        within the DMR network. Such issues will cause messages to be misdelivered
        or lost.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        topologyIssue|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterTopologyIssues
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Cluster Topology Issue objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/DmrClusterTopologyIssuesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Cluster Topology Issue objects.
      tags: *id003
  /dmrClusters/{dmrClusterName}/topologyIssues/{topologyIssue}:
    get:
      description: 'Get a Cluster Topology Issue object.


        A Cluster Topology Issue indicates incorrect or inconsistent configuration
        within the DMR network. Such issues will cause messages to be misdelivered
        or lost.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        dmrClusterName|x|

        topologyIssue|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getDmrClusterTopologyIssue
      parameters:
      - description: The name of the Cluster.
        in: path
        name: dmrClusterName
        required: true
        type: string
      - description: The topology issue discovered in the Cluster. A topology issue
          indicates incorrect or inconsistent configuration within the DMR network.
          Such issues will cause messages to be misdelivered or lost.
        in: path
        name: topologyIssue
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Cluster Topology Issue object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/DmrClusterTopologyIssueResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Cluster Topology Issue object.
      tags: *id003
  /msgVpns:
    get:
      description: 'Get a list of Message VPN objects.


        Message VPNs (Virtual Private Networks) allow for the segregation of topic
        space and clients. They also group clients connecting to a network of message
        brokers, such that messages published within a particular group are only visible
        to that group''s clients.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.controlRxByteCount||x

        counter.controlRxMsgCount||x

        counter.controlTxByteCount||x

        counter.controlTxMsgCount||x

        counter.dataRxByteCount||x

        counter.dataRxMsgCount||x

        counter.dataTxByteCount||x

        counter.dataTxMsgCount||x

        counter.discardedRxMsgCount||x

        counter.discardedTxMsgCount||x

        counter.loginRxMsgCount||x

        counter.loginTxMsgCount||x

        counter.msgSpoolRxMsgCount||x

        counter.msgSpoolTxMsgCount||x

        counter.tlsRxByteCount||x

        counter.tlsTxByteCount||x

        msgVpnName|x|

        rate.averageRxByteRate||x

        rate.averageRxMsgRate||x

        rate.averageTxByteRate||x

        rate.averageTxMsgRate||x

        rate.rxByteRate||x

        rate.rxMsgRate||x

        rate.tlsAverageRxByteRate||x

        rate.tlsAverageTxByteRate||x

        rate.tlsRxByteRate||x

        rate.tlsTxByteRate||x

        rate.txByteRate||x

        rate.txMsgRate||x

        restTlsServerCertEnforceTrustedCommonNameEnabled||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpns
      parameters:
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Message VPN objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Message VPN objects.
      tags: &id004
      - all
      - msgVpn
  /msgVpns/{msgVpnName}:
    get:
      description: 'Get a Message VPN object.


        Message VPNs (Virtual Private Networks) allow for the segregation of topic
        space and clients. They also group clients connecting to a network of message
        brokers, such that messages published within a particular group are only visible
        to that group''s clients.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.controlRxByteCount||x

        counter.controlRxMsgCount||x

        counter.controlTxByteCount||x

        counter.controlTxMsgCount||x

        counter.dataRxByteCount||x

        counter.dataRxMsgCount||x

        counter.dataTxByteCount||x

        counter.dataTxMsgCount||x

        counter.discardedRxMsgCount||x

        counter.discardedTxMsgCount||x

        counter.loginRxMsgCount||x

        counter.loginTxMsgCount||x

        counter.msgSpoolRxMsgCount||x

        counter.msgSpoolTxMsgCount||x

        counter.tlsRxByteCount||x

        counter.tlsTxByteCount||x

        msgVpnName|x|

        rate.averageRxByteRate||x

        rate.averageRxMsgRate||x

        rate.averageTxByteRate||x

        rate.averageTxMsgRate||x

        rate.rxByteRate||x

        rate.rxMsgRate||x

        rate.tlsAverageRxByteRate||x

        rate.tlsAverageTxByteRate||x

        rate.tlsRxByteRate||x

        rate.tlsTxByteRate||x

        rate.txByteRate||x

        rate.txMsgRate||x

        restTlsServerCertEnforceTrustedCommonNameEnabled||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpn
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Message VPN object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Message VPN object.
      tags: *id004
  /msgVpns/{msgVpnName}/aclProfiles:
    get:
      description: 'Get a list of ACL Profile objects.


        An ACL Profile controls whether an authenticated client is permitted to establish
        a connection with the message broker or permitted to publish and subscribe
        to specific topics.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAclProfiles
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of ACL Profile objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfilesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of ACL Profile objects.
      tags: &id005
      - all
      - msgVpn
      - aclProfile
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}:
    get:
      description: 'Get an ACL Profile object.


        An ACL Profile controls whether an authenticated client is permitted to establish
        a connection with the message broker or permitted to publish and subscribe
        to specific topics.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAclProfile
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The ACL Profile object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an ACL Profile object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions:
    get:
      description: 'Get a list of Client Connect Exception objects.


        A Client Connect Exception is an exception to the default action to take when
        a client using the ACL Profile connects to the Message VPN. Exceptions must
        be expressed as an IP address/netmask in CIDR form.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        clientConnectExceptionAddress|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAclProfileClientConnectExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Connect Exception objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Connect Exception objects.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}:
    get:
      description: 'Get a Client Connect Exception object.


        A Client Connect Exception is an exception to the default action to take when
        a client using the ACL Profile connects to the Message VPN. Exceptions must
        be expressed as an IP address/netmask in CIDR form.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        clientConnectExceptionAddress|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAclProfileClientConnectException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The IP address/netmask of the client connect exception in CIDR
          form.
        in: path
        name: clientConnectExceptionAddress
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Connect Exception object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileClientConnectExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Connect Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions:
    get:
      deprecated: true
      description: 'Get a list of Publish Topic Exception objects.


        A Publish Topic Exception is an exception to the default action to take when
        a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions
        must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|x

        msgVpnName|x|x

        publishExceptionTopic|x|x

        topicSyntax|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.14. Replaced by publishTopicExceptions.'
      operationId: getMsgVpnAclProfilePublishExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Publish Topic Exception objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfilePublishExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Publish Topic Exception objects.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishExceptions/{topicSyntax},{publishExceptionTopic}:
    get:
      deprecated: true
      description: 'Get a Publish Topic Exception object.


        A Publish Topic Exception is an exception to the default action to take when
        a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions
        must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|x

        msgVpnName|x|x

        publishExceptionTopic|x|x

        topicSyntax|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.14. Replaced by publishTopicExceptions.'
      operationId: getMsgVpnAclProfilePublishException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The syntax of the topic for the exception to the default action
          taken.
        in: path
        name: topicSyntax
        required: true
        type: string
      - description: The topic for the exception to the default action taken. May
          include wildcard characters.
        in: path
        name: publishExceptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Publish Topic Exception object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfilePublishExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Publish Topic Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions:
    get:
      description: 'Get a list of Publish Topic Exception objects.


        A Publish Topic Exception is an exception to the default action to take when
        a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions
        must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        publishTopicException|x|

        publishTopicExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfilePublishTopicExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Publish Topic Exception objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Publish Topic Exception objects.
      tags: *id005
  ? /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions/{publishTopicExceptionSyntax},{publishTopicException}
  : get:
      description: 'Get a Publish Topic Exception object.


        A Publish Topic Exception is an exception to the default action to take when
        a client using the ACL Profile publishes to a topic in the Message VPN. Exceptions
        must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        publishTopicException|x|

        publishTopicExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfilePublishTopicException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The syntax of the topic for the exception to the default action
          taken.
        in: path
        name: publishTopicExceptionSyntax
        required: true
        type: string
      - description: The topic for the exception to the default action taken. May
          include wildcard characters.
        in: path
        name: publishTopicException
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Publish Topic Exception object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfilePublishTopicExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Publish Topic Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions:
    get:
      deprecated: true
      description: 'Get a list of Subscribe Topic Exception objects.


        A Subscribe Topic Exception is an exception to the default action to take
        when a client using the ACL Profile subscribes to a topic in the Message VPN.
        Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|x

        msgVpnName|x|x

        subscribeExceptionTopic|x|x

        topicSyntax|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.'
      operationId: getMsgVpnAclProfileSubscribeExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Subscribe Topic Exception objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Subscribe Topic Exception objects.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeExceptions/{topicSyntax},{subscribeExceptionTopic}:
    get:
      deprecated: true
      description: 'Get a Subscribe Topic Exception object.


        A Subscribe Topic Exception is an exception to the default action to take
        when a client using the ACL Profile subscribes to a topic in the Message VPN.
        Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|x

        msgVpnName|x|x

        subscribeExceptionTopic|x|x

        topicSyntax|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.14. Replaced by subscribeTopicExceptions.'
      operationId: getMsgVpnAclProfileSubscribeException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The syntax of the topic for the exception to the default action
          taken.
        in: path
        name: topicSyntax
        required: true
        type: string
      - description: The topic for the exception to the default action taken. May
          include wildcard characters.
        in: path
        name: subscribeExceptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Subscribe Topic Exception object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Subscribe Topic Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions:
    get:
      description: 'Get a list of Subscribe Share Name Exception objects.


        A Subscribe Share Name Exception is an exception to the default action to
        take when a client using the ACL Profile subscribes to a share-name subscription
        in the Message VPN. Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        subscribeShareNameException|x|

        subscribeShareNameExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfileSubscribeShareNameExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Subscribe Share Name Exception objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Subscribe Share Name Exception objects.
      tags: *id005
  ? /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeShareNameExceptions/{subscribeShareNameExceptionSyntax},{subscribeShareNameException}
  : get:
      description: 'Get a Subscribe Share Name Exception object.


        A Subscribe Share Name Exception is an exception to the default action to
        take when a client using the ACL Profile subscribes to a share-name subscription
        in the Message VPN. Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        subscribeShareNameException|x|

        subscribeShareNameExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfileSubscribeShareNameException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The syntax of the subscribe share name for the exception to the
          default action taken.
        in: path
        name: subscribeShareNameExceptionSyntax
        required: true
        type: string
      - description: The subscribe share name exception to the default action taken.
          May include wildcard characters.
        in: path
        name: subscribeShareNameException
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Subscribe Share Name Exception object's attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeShareNameExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Subscribe Share Name Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions:
    get:
      description: 'Get a list of Subscribe Topic Exception objects.


        A Subscribe Topic Exception is an exception to the default action to take
        when a client using the ACL Profile subscribes to a topic in the Message VPN.
        Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        subscribeTopicException|x|

        subscribeTopicExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfileSubscribeTopicExceptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Subscribe Topic Exception objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Subscribe Topic Exception objects.
      tags: *id005
  ? /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/subscribeTopicExceptions/{subscribeTopicExceptionSyntax},{subscribeTopicException}
  : get:
      description: 'Get a Subscribe Topic Exception object.


        A Subscribe Topic Exception is an exception to the default action to take
        when a client using the ACL Profile subscribes to a topic in the Message VPN.
        Exceptions must be expressed as a topic.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        aclProfileName|x|

        msgVpnName|x|

        subscribeTopicException|x|

        subscribeTopicExceptionSyntax|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnAclProfileSubscribeTopicException
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the ACL Profile.
        in: path
        name: aclProfileName
        required: true
        type: string
      - description: The syntax of the topic for the exception to the default action
          taken.
        in: path
        name: subscribeTopicExceptionSyntax
        required: true
        type: string
      - description: The topic for the exception to the default action taken. May
          include wildcard characters.
        in: path
        name: subscribeTopicException
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Subscribe Topic Exception object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAclProfileSubscribeTopicExceptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Subscribe Topic Exception object.
      tags: *id005
  /msgVpns/{msgVpnName}/authenticationOauthProviders:
    get:
      description: 'Get a list of OAuth Provider objects.


        OAuth Providers contain information about the issuer of an OAuth token that
        is needed to validate the token and derive a client username from it.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        oauthProviderName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getMsgVpnAuthenticationOauthProviders
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of OAuth Provider objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAuthenticationOauthProvidersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of OAuth Provider objects.
      tags: &id006
      - all
      - msgVpn
      - authenticationOauthProvider
  /msgVpns/{msgVpnName}/authenticationOauthProviders/{oauthProviderName}:
    get:
      description: 'Get an OAuth Provider object.


        OAuth Providers contain information about the issuer of an OAuth token that
        is needed to validate the token and derive a client username from it.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        oauthProviderName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.13.'
      operationId: getMsgVpnAuthenticationOauthProvider
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the OAuth Provider.
        in: path
        name: oauthProviderName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The OAuth Provider object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAuthenticationOauthProviderResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an OAuth Provider object.
      tags: *id006
  /msgVpns/{msgVpnName}/authorizationGroups:
    get:
      description: 'Get a list of LDAP Authorization Group objects.


        To use client authorization groups configured on an external LDAP server to
        provide client authorizations, LDAP Authorization Group objects must be created
        on the Message VPN that match the authorization groups provisioned on the
        LDAP server. These objects must be configured with the client profiles and
        ACL profiles that will be assigned to the clients that belong to those authorization
        groups. A newly created group is placed at the end of the group list which
        is the lowest priority.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        authorizationGroupName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAuthorizationGroups
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of LDAP Authorization Group objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnAuthorizationGroupsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of LDAP Authorization Group objects.
      tags: &id007
      - all
      - msgVpn
      - authorizationGroup
  /msgVpns/{msgVpnName}/authorizationGroups/{authorizationGroupName}:
    get:
      description: 'Get an LDAP Authorization Group object.


        To use client authorization groups configured on an external LDAP server to
        provide client authorizations, LDAP Authorization Group objects must be created
        on the Message VPN that match the authorization groups provisioned on the
        LDAP server. These objects must be configured with the client profiles and
        ACL profiles that will be assigned to the clients that belong to those authorization
        groups. A newly created group is placed at the end of the group list which
        is the lowest priority.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        authorizationGroupName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnAuthorizationGroup
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the LDAP Authorization Group. Special care is needed
          if the group name contains special characters such as '#', '+', ';', '='
          as the value of the group name returned from the LDAP server might prepend
          those characters with '\'. For example a group name called 'test#,lab,com'
          will be returned from the LDAP server as 'test\#,lab,com'.
        in: path
        name: authorizationGroupName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The LDAP Authorization Group object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnAuthorizationGroupResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an LDAP Authorization Group object.
      tags: *id007
  /msgVpns/{msgVpnName}/bridges:
    get:
      description: 'Get a list of Bridge objects.


        Bridges can be used to link two Message VPNs so that messages published to
        one Message VPN that match the topic subscriptions set for the bridge are
        also delivered to the linked Message VPN.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        counter.controlRxByteCount||x

        counter.controlRxMsgCount||x

        counter.controlTxByteCount||x

        counter.controlTxMsgCount||x

        counter.dataRxByteCount||x

        counter.dataRxMsgCount||x

        counter.dataTxByteCount||x

        counter.dataTxMsgCount||x

        counter.discardedRxMsgCount||x

        counter.discardedTxMsgCount||x

        counter.loginRxMsgCount||x

        counter.loginTxMsgCount||x

        counter.msgSpoolRxMsgCount||x

        counter.rxByteCount||x

        counter.rxMsgCount||x

        counter.txByteCount||x

        counter.txMsgCount||x

        msgVpnName|x|

        rate.averageRxByteRate||x

        rate.averageRxMsgRate||x

        rate.averageTxByteRate||x

        rate.averageTxMsgRate||x

        rate.rxByteRate||x

        rate.rxMsgRate||x

        rate.txByteRate||x

        rate.txMsgRate||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridges
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Bridge objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Bridge objects.
      tags: &id008
      - all
      - msgVpn
      - bridge
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}:
    get:
      description: 'Get a Bridge object.


        Bridges can be used to link two Message VPNs so that messages published to
        one Message VPN that match the topic subscriptions set for the bridge are
        also delivered to the linked Message VPN.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        counter.controlRxByteCount||x

        counter.controlRxMsgCount||x

        counter.controlTxByteCount||x

        counter.controlTxMsgCount||x

        counter.dataRxByteCount||x

        counter.dataRxMsgCount||x

        counter.dataTxByteCount||x

        counter.dataTxMsgCount||x

        counter.discardedRxMsgCount||x

        counter.discardedTxMsgCount||x

        counter.loginRxMsgCount||x

        counter.loginTxMsgCount||x

        counter.msgSpoolRxMsgCount||x

        counter.rxByteCount||x

        counter.rxMsgCount||x

        counter.txByteCount||x

        counter.txMsgCount||x

        msgVpnName|x|

        rate.averageRxByteRate||x

        rate.averageRxMsgRate||x

        rate.averageTxByteRate||x

        rate.averageTxMsgRate||x

        rate.rxByteRate||x

        rate.rxMsgRate||x

        rate.txByteRate||x

        rate.txMsgRate||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridge
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Bridge object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Bridge object.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/localSubscriptions:
    get:
      description: 'Get a list of Bridge Local Subscriptions objects.


        A Local Subscription is a topic subscription used by a remote Message VPN
        Bridge to attract messages from this broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        localSubscriptionTopic|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeLocalSubscriptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Bridge Local Subscriptions objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Bridge Local Subscriptions objects.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/localSubscriptions/{localSubscriptionTopic}:
    get:
      description: 'Get a Bridge Local Subscriptions object.


        A Local Subscription is a topic subscription used by a remote Message VPN
        Bridge to attract messages from this broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        localSubscriptionTopic|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeLocalSubscription
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - description: The topic of the Bridge local subscription.
        in: path
        name: localSubscriptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Bridge Local Subscriptions object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeLocalSubscriptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Bridge Local Subscriptions object.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns:
    get:
      description: 'Get a list of Remote Message VPN objects.


        The Remote Message VPN is the Message VPN that the Bridge connects to.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        remoteMsgVpnInterface|x|

        remoteMsgVpnLocation|x|

        remoteMsgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeRemoteMsgVpns
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Remote Message VPN objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Remote Message VPN objects.
      tags: *id008
  ? /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteMsgVpns/{remoteMsgVpnName},{remoteMsgVpnLocation},{remoteMsgVpnInterface}
  : get:
      description: 'Get a Remote Message VPN object.


        The Remote Message VPN is the Message VPN that the Bridge connects to.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        remoteMsgVpnInterface|x|

        remoteMsgVpnLocation|x|

        remoteMsgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeRemoteMsgVpn
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - description: The name of the remote Message VPN.
        in: path
        name: remoteMsgVpnName
        required: true
        type: string
      - description: The location of the remote Message VPN as either an FQDN with
          port, IP address with port, or virtual router name (starting with "v:").
        in: path
        name: remoteMsgVpnLocation
        required: true
        type: string
      - description: The physical interface on the local Message VPN host for connecting
          to the remote Message VPN. By default, an interface is chosen automatically
          (recommended), but if specified, `remoteMsgVpnLocation` must not be a virtual
          router name.
        in: path
        name: remoteMsgVpnInterface
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Remote Message VPN object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeRemoteMsgVpnResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Remote Message VPN object.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions:
    get:
      description: 'Get a list of Remote Subscription objects.


        A Remote Subscription is a topic subscription used by the Message VPN Bridge
        to attract messages from the remote message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        remoteSubscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeRemoteSubscriptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Remote Subscription objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Remote Subscription objects.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/remoteSubscriptions/{remoteSubscriptionTopic}:
    get:
      description: 'Get a Remote Subscription object.


        A Remote Subscription is a topic subscription used by the Message VPN Bridge
        to attract messages from the remote message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        remoteSubscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeRemoteSubscription
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - description: The topic of the Bridge remote subscription.
        in: path
        name: remoteSubscriptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Remote Subscription object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeRemoteSubscriptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Remote Subscription object.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames:
    get:
      description: 'Get a list of Trusted Common Name objects.


        The Trusted Common Names for the Bridge are used by encrypted transports to
        verify the name in the certificate presented by the remote node. They must
        include the common name of the remote node''s server certificate or client
        certificate, depending upon the initiator of the connection.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        tlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeTlsTrustedCommonNames
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Trusted Common Name objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Trusted Common Name objects.
      tags: *id008
  /msgVpns/{msgVpnName}/bridges/{bridgeName},{bridgeVirtualRouter}/tlsTrustedCommonNames/{tlsTrustedCommonName}:
    get:
      description: 'Get a Trusted Common Name object.


        The Trusted Common Names for the Bridge are used by encrypted transports to
        verify the name in the certificate presented by the remote node. They must
        include the common name of the remote node''s server certificate or client
        certificate, depending upon the initiator of the connection.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        bridgeName|x|

        bridgeVirtualRouter|x|

        msgVpnName|x|

        tlsTrustedCommonName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnBridgeTlsTrustedCommonName
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Bridge.
        in: path
        name: bridgeName
        required: true
        type: string
      - description: The virtual router of the Bridge.
        in: path
        name: bridgeVirtualRouter
        required: true
        type: string
      - description: The expected trusted common name of the remote certificate.
        in: path
        name: tlsTrustedCommonName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Trusted Common Name object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnBridgeTlsTrustedCommonNameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Trusted Common Name object.
      tags: *id008
  /msgVpns/{msgVpnName}/clientProfiles:
    get:
      description: 'Get a list of Client Profile objects.


        Client Profiles are used to assign common configuration properties to clients
        that have been successfully authorized.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        apiQueueManagementCopyFromOnCreateName||x

        apiTopicEndpointManagementCopyFromOnCreateName||x

        clientProfileName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnClientProfiles
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Profile objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientProfilesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Profile objects.
      tags: &id009
      - all
      - msgVpn
      - clientProfile
  /msgVpns/{msgVpnName}/clientProfiles/{clientProfileName}:
    get:
      description: 'Get a Client Profile object.


        Client Profiles are used to assign common configuration properties to clients
        that have been successfully authorized.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        apiQueueManagementCopyFromOnCreateName||x

        apiTopicEndpointManagementCopyFromOnCreateName||x

        clientProfileName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnClientProfile
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client Profile.
        in: path
        name: clientProfileName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Profile object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientProfileResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Profile object.
      tags: *id009
  /msgVpns/{msgVpnName}/clientUsernames:
    get:
      description: 'Get a list of Client Username objects.


        A client is only authorized to connect to a Message VPN that is associated
        with a Client Username that the client has been assigned.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientUsername|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnClientUsernames
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Username objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientUsernamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Username objects.
      tags: &id010
      - all
      - msgVpn
      - clientUsername
  /msgVpns/{msgVpnName}/clientUsernames/{clientUsername}:
    get:
      description: 'Get a Client Username object.


        A client is only authorized to connect to a Message VPN that is associated
        with a Client Username that the client has been assigned.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientUsername|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnClientUsername
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client Username.
        in: path
        name: clientUsername
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Username object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientUsernameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Username object.
      tags: *id010
  /msgVpns/{msgVpnName}/clients:
    get:
      description: 'Get a list of Client objects.


        Applications or devices that connect to message brokers to send and/or receive
        messages are represented as Clients.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClients
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client objects.
      tags: &id011
      - all
      - msgVpn
      - client
  /msgVpns/{msgVpnName}/clients/{clientName}:
    get:
      description: 'Get a Client object.


        Applications or devices that connect to message brokers to send and/or receive
        messages are represented as Clients.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClient
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client object.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/connections:
    get:
      description: 'Get a list of Client Connection objects.


        A Client Connection represents the Transmission Control Protocol (TCP) connection
        the Client uses to communicate with the message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientAddress|x|

        clientName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientConnections
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Connection objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientConnectionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Connection objects.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/connections/{clientAddress}:
    get:
      description: 'Get a Client Connection object.


        A Client Connection represents the Transmission Control Protocol (TCP) connection
        the Client uses to communicate with the message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientAddress|x|

        clientName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientConnection
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - description: The IP address and TCP port on the Client side of the Client
          Connection.
        in: path
        name: clientAddress
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Connection object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientConnectionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Connection object.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/rxFlows:
    get:
      description: 'Get a list of Client Receive Flow objects.


        Client Receive Flows are used by clients to publish Guaranteed messages to
        a message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        flowId|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientRxFlows
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Receive Flow objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientRxFlowsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Receive Flow objects.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/rxFlows/{flowId}:
    get:
      description: 'Get a Client Receive Flow object.


        Client Receive Flows are used by clients to publish Guaranteed messages to
        a message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        flowId|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientRxFlow
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - description: The identifier (ID) of the flow.
        in: path
        name: flowId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Receive Flow object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientRxFlowResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Receive Flow object.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/subscriptions:
    get:
      description: 'Get a list of Client Subscription objects.


        Once clients are authenticated on the message broker they can add and remove
        Client Subscriptions for Direct messages published to the Message VPN to which
        they have connected.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientSubscriptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Subscription objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientSubscriptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Subscription objects.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/subscriptions/{subscriptionTopic}:
    get:
      description: 'Get a Client Subscription object.


        Once clients are authenticated on the message broker they can add and remove
        Client Subscriptions for Direct messages published to the Message VPN to which
        they have connected.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientSubscription
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - description: The topic of the Subscription.
        in: path
        name: subscriptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Subscription object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientSubscriptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Subscription object.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/transactedSessions:
    get:
      description: 'Get a list of Client Transacted Session objects.


        Transacted Sessions enable clients to group multiple message send and/or receive
        operations together in single, atomic units known as local transactions.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|

        sessionName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientTransactedSessions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Transacted Session objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientTransactedSessionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Transacted Session objects.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/transactedSessions/{sessionName}:
    get:
      description: 'Get a Client Transacted Session object.


        Transacted Sessions enable clients to group multiple message send and/or receive
        operations together in single, atomic units known as local transactions.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        msgVpnName|x|

        sessionName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientTransactedSession
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - description: The name of the Transacted Session.
        in: path
        name: sessionName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Transacted Session object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientTransactedSessionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Transacted Session object.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/txFlows:
    get:
      description: 'Get a list of Client Transmit Flow objects.


        Client Transmit Flows are used by clients to consume Guaranteed messages from
        a message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        flowId|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientTxFlows
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Client Transmit Flow objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientTxFlowsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Client Transmit Flow objects.
      tags: *id011
  /msgVpns/{msgVpnName}/clients/{clientName}/txFlows/{flowId}:
    get:
      description: 'Get a Client Transmit Flow object.


        Client Transmit Flows are used by clients to consume Guaranteed messages from
        a message broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        clientName|x|

        flowId|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnClientTxFlow
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Client.
        in: path
        name: clientName
        required: true
        type: string
      - description: The identifier (ID) of the flow.
        in: path
        name: flowId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Client Transmit Flow object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnClientTxFlowResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Client Transmit Flow object.
      tags: *id011
  /msgVpns/{msgVpnName}/configSyncRemoteNodes:
    get:
      description: 'Get a list of Config Sync Remote Node objects.


        A Config Sync Remote Node object contains information about the status of
        the table for this Message VPN with respect to a remote node.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnConfigSyncRemoteNodes
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Config Sync Remote Node objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnConfigSyncRemoteNodesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Config Sync Remote Node objects.
      tags: &id012
      - all
      - msgVpn
      - configSyncRemoteNode
  /msgVpns/{msgVpnName}/configSyncRemoteNodes/{remoteNodeName}:
    get:
      description: 'Get a Config Sync Remote Node object.


        A Config Sync Remote Node object contains information about the status of
        the table for this Message VPN with respect to a remote node.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnConfigSyncRemoteNode
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Config Sync Remote Node.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Config Sync Remote Node object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnConfigSyncRemoteNodeResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Config Sync Remote Node object.
      tags: *id012
  /msgVpns/{msgVpnName}/distributedCaches:
    get:
      description: 'Get a list of Distributed Cache objects.


        A Distributed Cache is a collection of one or more Cache Clusters that belong
        to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured
        to subscribe to a different set of topics. This effectively divides up the
        configured topic space, to provide scaling to very large topic spaces or very
        high cached message throughput.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCaches
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Distributed Cache objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCachesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Distributed Cache objects.
      tags: &id013
      - all
      - msgVpn
      - distributedCache
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}:
    get:
      description: 'Get a Distributed Cache object.


        A Distributed Cache is a collection of one or more Cache Clusters that belong
        to the same Message VPN. Each Cache Cluster in a Distributed Cache is configured
        to subscribe to a different set of topics. This effectively divides up the
        configured topic space, to provide scaling to very large topic spaces or very
        high cached message throughput.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCache
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Distributed Cache object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Distributed Cache object.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters:
    get:
      description: 'Get a list of Cache Cluster objects.


        A Cache Cluster is a collection of one or more Cache Instances that subscribe
        to exactly the same topics. Cache Instances are grouped together in a Cache
        Cluster for the purpose of fault tolerance and load balancing. As published
        messages are received, the message broker message bus sends these live data
        messages to the Cache Instances in the Cache Cluster. This enables client
        cache requests to be served by any of Cache Instances in the Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusters
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Cache Cluster objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClustersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Cache Cluster objects.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}:
    get:
      description: 'Get a Cache Cluster object.


        A Cache Cluster is a collection of one or more Cache Instances that subscribe
        to exactly the same topics. Cache Instances are grouped together in a Cache
        Cluster for the purpose of fault tolerance and load balancing. As published
        messages are received, the message broker message bus sends these live data
        messages to the Cache Instances in the Cache Cluster. This enables client
        cache requests to be served by any of Cache Instances in the Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheCluster
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Cache Cluster object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Cache Cluster object.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters:
    get:
      description: 'Get a list of Home Cache Cluster objects.


        A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster
        for a given topic in the context of the Global Caching feature.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterGlobalCachingHomeClusters
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Home Cache Cluster objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClustersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Home Cache Cluster objects.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}:
    get:
      description: 'Get a Home Cache Cluster object.


        A Home Cache Cluster is a Cache Cluster that is the "definitive" Cache Cluster
        for a given topic in the context of the Global Caching feature.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterGlobalCachingHomeCluster
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the remote Home Cache Cluster.
        in: path
        name: homeClusterName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Home Cache Cluster object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Home Cache Cluster object.
      tags: *id013
  ? /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes
  : get:
      description: 'Get a list of Topic Prefix objects.


        A Topic Prefix is a prefix for a global topic that is available from the containing
        Home Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        msgVpnName|x|

        topicPrefix|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixes
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the remote Home Cache Cluster.
        in: path
        name: homeClusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Prefix objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Prefix objects.
      tags: *id013
  ? /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/globalCachingHomeClusters/{homeClusterName}/topicPrefixes/{topicPrefix}
  : get:
      description: 'Get a Topic Prefix object.


        A Topic Prefix is a prefix for a global topic that is available from the containing
        Home Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        msgVpnName|x|

        topicPrefix|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefix
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the remote Home Cache Cluster.
        in: path
        name: homeClusterName
        required: true
        type: string
      - description: A topic prefix for global topics available from the remote Home
          Cache Cluster. A wildcard (/>) is implied at the end of the prefix.
        in: path
        name: topicPrefix
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Prefix object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterGlobalCachingHomeClusterTopicPrefixResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Prefix object.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances:
    get:
      description: 'Get a list of Cache Instance objects.


        A Cache Instance is a single Cache process that belongs to a single Cache
        Cluster. A Cache Instance object provisioned on the broker is used to disseminate
        configuration information to the Cache process. Cache Instances listen for
        and cache live data messages that match the topic subscriptions configured
        for their parent Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        counter.msgCount||x

        counter.msgPeakCount||x

        counter.requestQueueDepthCount||x

        counter.requestQueueDepthPeakCount||x

        counter.topicCount||x

        counter.topicPeakCount||x

        instanceName|x|

        msgVpnName|x|

        rate.averageDataRxBytePeakRate||x

        rate.averageDataRxByteRate||x

        rate.averageDataRxMsgPeakRate||x

        rate.averageDataRxMsgRate||x

        rate.averageDataTxMsgPeakRate||x

        rate.averageDataTxMsgRate||x

        rate.averageRequestRxPeakRate||x

        rate.averageRequestRxRate||x

        rate.dataRxBytePeakRate||x

        rate.dataRxByteRate||x

        rate.dataRxMsgPeakRate||x

        rate.dataRxMsgRate||x

        rate.dataTxMsgPeakRate||x

        rate.dataTxMsgRate||x

        rate.requestRxPeakRate||x

        rate.requestRxRate||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstances
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Cache Instance objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstancesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Cache Instance objects.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}:
    get:
      description: 'Get a Cache Instance object.


        A Cache Instance is a single Cache process that belongs to a single Cache
        Cluster. A Cache Instance object provisioned on the broker is used to disseminate
        configuration information to the Cache process. Cache Instances listen for
        and cache live data messages that match the topic subscriptions configured
        for their parent Cache Cluster.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        counter.msgCount||x

        counter.msgPeakCount||x

        counter.requestQueueDepthCount||x

        counter.requestQueueDepthPeakCount||x

        counter.topicCount||x

        counter.topicPeakCount||x

        instanceName|x|

        msgVpnName|x|

        rate.averageDataRxBytePeakRate||x

        rate.averageDataRxByteRate||x

        rate.averageDataRxMsgPeakRate||x

        rate.averageDataRxMsgRate||x

        rate.averageDataTxMsgPeakRate||x

        rate.averageDataTxMsgRate||x

        rate.averageRequestRxPeakRate||x

        rate.averageRequestRxRate||x

        rate.dataRxBytePeakRate||x

        rate.dataRxByteRate||x

        rate.dataRxMsgPeakRate||x

        rate.dataRxMsgRate||x

        rate.dataTxMsgPeakRate||x

        rate.dataTxMsgRate||x

        rate.requestRxPeakRate||x

        rate.requestRxRate||x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstance
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the Cache Instance.
        in: path
        name: instanceName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Cache Instance object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Cache Instance object.
      tags: *id013
  ? /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}/remoteGlobalCachingHomeClusters
  : get:
      description: 'Get a list of Remote Home Cache Cluster objects.


        A Remote Home Cache Cluster is a Home Cache Cluster that the Cache Instance
        is communicating with in the context of the Global Caching feature.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        instanceName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusters
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the Cache Instance.
        in: path
        name: instanceName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Remote Home Cache Cluster objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClustersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Remote Home Cache Cluster objects.
      tags: *id013
  ? /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}/remoteGlobalCachingHomeClusters/{homeClusterName}
  : get:
      description: 'Get a Remote Home Cache Cluster object.


        A Remote Home Cache Cluster is a Home Cache Cluster that the Cache Instance
        is communicating with in the context of the Global Caching feature.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        homeClusterName|x|

        instanceName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeCluster
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the Cache Instance.
        in: path
        name: instanceName
        required: true
        type: string
      - description: The name of the remote Home Cache Cluster.
        in: path
        name: homeClusterName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Remote Home Cache Cluster object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteGlobalCachingHomeClusterResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Remote Home Cache Cluster object.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}/remoteTopics:
    get:
      description: 'Get a list of Remote Topic objects.


        A Remote Topic is a topic for which the Cache Instance has cached messages.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        instanceName|x|

        msgVpnName|x|

        topic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstanceRemoteTopics
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the Cache Instance.
        in: path
        name: instanceName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Remote Topic objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Remote Topic objects.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/instances/{instanceName}/remoteTopics/{topic}:
    get:
      description: 'Get a Remote Topic object.


        A Remote Topic is a topic for which the Cache Instance has cached messages.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        instanceName|x|

        msgVpnName|x|

        topic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterInstanceRemoteTopic
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The name of the Cache Instance.
        in: path
        name: instanceName
        required: true
        type: string
      - description: The value of the remote Topic.
        in: path
        name: topic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Remote Topic object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterInstanceRemoteTopicResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Remote Topic object.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics:
    get:
      description: 'Get a list of Topic objects.


        The Cache Instances that belong to the containing Cache Cluster will cache
        any messages published to topics that match a Topic Subscription.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        msgVpnName|x|

        topic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterTopics
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic objects.
      tags: *id013
  /msgVpns/{msgVpnName}/distributedCaches/{cacheName}/clusters/{clusterName}/topics/{topic}:
    get:
      description: 'Get a Topic object.


        The Cache Instances that belong to the containing Cache Cluster will cache
        any messages published to topics that match a Topic Subscription.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        clusterName|x|

        msgVpnName|x|

        topic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDistributedCacheClusterTopic
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Distributed Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - description: The name of the Cache Cluster.
        in: path
        name: clusterName
        required: true
        type: string
      - description: The value of the Topic in the form a/b/c.
        in: path
        name: topic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDistributedCacheClusterTopicResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic object.
      tags: *id013
  /msgVpns/{msgVpnName}/dmrBridges:
    get:
      description: 'Get a list of DMR Bridge objects.


        A DMR Bridge is required to establish a data channel over a corresponding
        external link to the remote node for a given Message VPN. Each DMR Bridge
        identifies which external link the Message VPN should use, and what the name
        of the equivalent Message VPN at the remote node is.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDmrBridges
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of DMR Bridge objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnDmrBridgesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of DMR Bridge objects.
      tags: &id014
      - all
      - msgVpn
      - dmrBridge
  /msgVpns/{msgVpnName}/dmrBridges/{remoteNodeName}:
    get:
      description: 'Get a DMR Bridge object.


        A DMR Bridge is required to establish a data channel over a corresponding
        external link to the remote node for a given Message VPN. Each DMR Bridge
        identifies which external link the Message VPN should use, and what the name
        of the equivalent Message VPN at the remote node is.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        remoteNodeName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnDmrBridge
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the node at the remote end of the DMR Bridge.
        in: path
        name: remoteNodeName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The DMR Bridge object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnDmrBridgeResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a DMR Bridge object.
      tags: *id014
  /msgVpns/{msgVpnName}/jndiConnectionFactories:
    get:
      description: 'Get a list of JNDI Connection Factory objects.


        The message broker provides an internal JNDI store for provisioned Connection
        Factory objects that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        connectionFactoryName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiConnectionFactories
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of JNDI Connection Factory objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiConnectionFactoriesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of JNDI Connection Factory objects.
      tags: &id015
      - all
      - msgVpn
      - jndi
  /msgVpns/{msgVpnName}/jndiConnectionFactories/{connectionFactoryName}:
    get:
      description: 'Get a JNDI Connection Factory object.


        The message broker provides an internal JNDI store for provisioned Connection
        Factory objects that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        connectionFactoryName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiConnectionFactory
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the JMS Connection Factory.
        in: path
        name: connectionFactoryName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The JNDI Connection Factory object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiConnectionFactoryResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a JNDI Connection Factory object.
      tags: *id015
  /msgVpns/{msgVpnName}/jndiQueues:
    get:
      description: 'Get a list of JNDI Queue objects.


        The message broker provides an internal JNDI store for provisioned Queue objects
        that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiQueues
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of JNDI Queue objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiQueuesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of JNDI Queue objects.
      tags: &id016
      - all
      - msgVpn
      - jndi
  /msgVpns/{msgVpnName}/jndiQueues/{queueName}:
    get:
      description: 'Get a JNDI Queue object.


        The message broker provides an internal JNDI store for provisioned Queue objects
        that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiQueue
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The JNDI name of the JMS Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The JNDI Queue object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiQueueResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a JNDI Queue object.
      tags: *id016
  /msgVpns/{msgVpnName}/jndiTopics:
    get:
      description: 'Get a list of JNDI Topic objects.


        The message broker provides an internal JNDI store for provisioned Topic objects
        that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiTopics
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of JNDI Topic objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiTopicsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of JNDI Topic objects.
      tags: &id017
      - all
      - msgVpn
      - jndi
  /msgVpns/{msgVpnName}/jndiTopics/{topicName}:
    get:
      description: 'Get a JNDI Topic object.


        The message broker provides an internal JNDI store for provisioned Topic objects
        that clients can access through JNDI lookups.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnJndiTopic
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The JNDI name of the JMS Topic.
        in: path
        name: topicName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The JNDI Topic object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnJndiTopicResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a JNDI Topic object.
      tags: *id017
  /msgVpns/{msgVpnName}/mqttRetainCaches:
    get:
      description: 'Get a list of MQTT Retain Cache objects.


        Using MQTT retained messages allows publishing MQTT clients to indicate that
        a message must be stored for later delivery to subscribing clients when those
        subscribing clients add subscriptions matching the retained message''s topic.
        An MQTT Retain Cache processes all retained messages for a Message VPN.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttRetainCaches
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of MQTT Retain Cache objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttRetainCachesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of MQTT Retain Cache objects.
      tags: &id018
      - all
      - msgVpn
      - mqttRetainCache
  /msgVpns/{msgVpnName}/mqttRetainCaches/{cacheName}:
    get:
      description: 'Get an MQTT Retain Cache object.


        Using MQTT retained messages allows publishing MQTT clients to indicate that
        a message must be stored for later delivery to subscribing clients when those
        subscribing clients add subscriptions matching the retained message''s topic.
        An MQTT Retain Cache processes all retained messages for a Message VPN.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        cacheName|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttRetainCache
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the MQTT Retain Cache.
        in: path
        name: cacheName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The MQTT Retain Cache object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttRetainCacheResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an MQTT Retain Cache object.
      tags: *id018
  /msgVpns/{msgVpnName}/mqttSessions:
    get:
      description: 'Get a list of MQTT Session objects.


        An MQTT Session object is a virtual representation of an MQTT client connection.
        An MQTT session holds the state of an MQTT client (that is, it is used to
        contain a client''s QoS 0 and QoS 1 subscription sets and any undelivered
        QoS 1 messages).



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.mqttConnackErrorTxCount||x

        counter.mqttConnackTxCount||x

        counter.mqttConnectRxCount||x

        counter.mqttDisconnectRxCount||x

        counter.mqttPubcompTxCount||x

        counter.mqttPublishQos0RxCount||x

        counter.mqttPublishQos0TxCount||x

        counter.mqttPublishQos1RxCount||x

        counter.mqttPublishQos1TxCount||x

        counter.mqttPublishQos2RxCount||x

        counter.mqttPubrecTxCount||x

        counter.mqttPubrelRxCount||x

        mqttSessionClientId|x|

        mqttSessionVirtualRouter|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttSessions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of MQTT Session objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttSessionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of MQTT Session objects.
      tags: &id019
      - all
      - msgVpn
      - mqttSession
  /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}:
    get:
      description: 'Get an MQTT Session object.


        An MQTT Session object is a virtual representation of an MQTT client connection.
        An MQTT session holds the state of an MQTT client (that is, it is used to
        contain a client''s QoS 0 and QoS 1 subscription sets and any undelivered
        QoS 1 messages).



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.mqttConnackErrorTxCount||x

        counter.mqttConnackTxCount||x

        counter.mqttConnectRxCount||x

        counter.mqttDisconnectRxCount||x

        counter.mqttPubcompTxCount||x

        counter.mqttPublishQos0RxCount||x

        counter.mqttPublishQos0TxCount||x

        counter.mqttPublishQos1RxCount||x

        counter.mqttPublishQos1TxCount||x

        counter.mqttPublishQos2RxCount||x

        counter.mqttPubrecTxCount||x

        counter.mqttPubrelRxCount||x

        mqttSessionClientId|x|

        mqttSessionVirtualRouter|x|

        msgVpnName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttSession
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The Client ID of the MQTT Session, which corresponds to the ClientId
          provided in the MQTT CONNECT packet.
        in: path
        name: mqttSessionClientId
        required: true
        type: string
      - description: The virtual router of the MQTT Session.
        in: path
        name: mqttSessionVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The MQTT Session object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttSessionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get an MQTT Session object.
      tags: *id019
  /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions:
    get:
      description: 'Get a list of Subscription objects.


        An MQTT session contains a client''s QoS 0 and QoS 1 subscription sets. On
        creation, a subscription defaults to QoS 0.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        mqttSessionClientId|x|

        mqttSessionVirtualRouter|x|

        msgVpnName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttSessionSubscriptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The Client ID of the MQTT Session, which corresponds to the ClientId
          provided in the MQTT CONNECT packet.
        in: path
        name: mqttSessionClientId
        required: true
        type: string
      - description: The virtual router of the MQTT Session.
        in: path
        name: mqttSessionVirtualRouter
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Subscription objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttSessionSubscriptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Subscription objects.
      tags: *id019
  /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}:
    get:
      description: 'Get a Subscription object.


        An MQTT session contains a client''s QoS 0 and QoS 1 subscription sets. On
        creation, a subscription defaults to QoS 0.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        mqttSessionClientId|x|

        mqttSessionVirtualRouter|x|

        msgVpnName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnMqttSessionSubscription
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The Client ID of the MQTT Session, which corresponds to the ClientId
          provided in the MQTT CONNECT packet.
        in: path
        name: mqttSessionClientId
        required: true
        type: string
      - description: The virtual router of the MQTT Session.
        in: path
        name: mqttSessionVirtualRouter
        required: true
        type: string
      - description: The MQTT subscription topic.
        in: path
        name: subscriptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Subscription object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnMqttSessionSubscriptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Subscription object.
      tags: *id019
  /msgVpns/{msgVpnName}/queueTemplates:
    get:
      description: 'Get a list of Queue Template objects.


        A Queue Template provides a mechanism for specifying the initial state for
        client created queues.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueTemplateName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnQueueTemplates
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Template objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueTemplatesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Template objects.
      tags: &id020
      - all
      - msgVpn
      - queueTemplate
  /msgVpns/{msgVpnName}/queueTemplates/{queueTemplateName}:
    get:
      description: 'Get a Queue Template object.


        A Queue Template provides a mechanism for specifying the initial state for
        client created queues.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueTemplateName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnQueueTemplate
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue Template.
        in: path
        name: queueTemplateName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Template object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueTemplateResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Template object.
      tags: *id020
  /msgVpns/{msgVpnName}/queues:
    get:
      description: 'Get a list of Queue objects.


        A Queue acts as both a destination that clients can publish messages to, and
        as an endpoint that clients can bind consumers to and consume messages from.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueues
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueuesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue objects.
      tags: &id021
      - all
      - msgVpn
      - queue
  /msgVpns/{msgVpnName}/queues/{queueName}:
    get:
      description: 'Get a Queue object.


        A Queue acts as both a destination that clients can publish messages to, and
        as an endpoint that clients can bind consumers to and consume messages from.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueue
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue object.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/msgs:
    get:
      description: 'Get a list of Queue Message objects.


        A Queue Message is a packet of information sent from producers to consumers
        using the Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueMsgs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Message objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueMsgsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Message objects.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/msgs/{msgId}:
    get:
      description: 'Get a Queue Message object.


        A Queue Message is a packet of information sent from producers to consumers
        using the Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueMsg
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - description: The identifier (ID) of the Message.
        in: path
        name: msgId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Message object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueMsgResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Message object.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/priorities:
    get:
      description: 'Get a list of Queue Priority objects.


        Queues can optionally support priority message delivery; all messages of a
        higher priority are delivered before any messages of a lower priority. A Priority
        object contains information about the number and size of the messages with
        a particular priority in the Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        priority|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueuePriorities
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Priority objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueuePrioritiesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Priority objects.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/priorities/{priority}:
    get:
      description: 'Get a Queue Priority object.


        Queues can optionally support priority message delivery; all messages of a
        higher priority are delivered before any messages of a lower priority. A Priority
        object contains information about the number and size of the messages with
        a particular priority in the Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        priority|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueuePriority
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - description: The level of the Priority, from 9 (highest) to 0 (lowest).
        in: path
        name: priority
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Priority object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueuePriorityResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Priority object.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/subscriptions:
    get:
      description: 'Get a list of Queue Subscription objects.


        One or more Queue Subscriptions can be added to a durable queue so that Guaranteed
        messages published to matching topics are also delivered to and spooled by
        the queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueSubscriptions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Subscription objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueSubscriptionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Subscription objects.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/subscriptions/{subscriptionTopic}:
    get:
      description: 'Get a Queue Subscription object.


        One or more Queue Subscriptions can be added to a durable queue so that Guaranteed
        messages published to matching topics are also delivered to and spooled by
        the queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueName|x|

        subscriptionTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueSubscription
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - description: The topic of the Subscription.
        in: path
        name: subscriptionTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Subscription object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueSubscriptionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Subscription object.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/txFlows:
    get:
      description: 'Get a list of Queue Transmit Flow objects.


        Queue Transmit Flows are used by clients to consume Guaranteed messages from
        a Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        flowId|x|

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueTxFlows
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Transmit Flow objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueTxFlowsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Transmit Flow objects.
      tags: *id021
  /msgVpns/{msgVpnName}/queues/{queueName}/txFlows/{flowId}:
    get:
      description: 'Get a Queue Transmit Flow object.


        Queue Transmit Flows are used by clients to consume Guaranteed messages from
        a Queue.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        flowId|x|

        msgVpnName|x|

        queueName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnQueueTxFlow
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Queue.
        in: path
        name: queueName
        required: true
        type: string
      - description: The identifier (ID) of the Flow.
        in: path
        name: flowId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Transmit Flow object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnQueueTxFlowResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Transmit Flow object.
      tags: *id021
  /msgVpns/{msgVpnName}/replayLogs:
    get:
      description: 'Get a list of Replay Log objects.


        When the Message Replay feature is enabled, message brokers store persistent
        messages in a Replay Log. These messages are kept until the log is full, after
        which the oldest messages are removed to free up space for new messages.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        replayLogName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnReplayLogs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Replay Log objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplayLogsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Replay Log objects.
      tags: &id022
      - all
      - msgVpn
      - replayLog
  /msgVpns/{msgVpnName}/replayLogs/{replayLogName}:
    get:
      description: 'Get a Replay Log object.


        When the Message Replay feature is enabled, message brokers store persistent
        messages in a Replay Log. These messages are kept until the log is full, after
        which the oldest messages are removed to free up space for new messages.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        replayLogName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnReplayLog
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Replay Log.
        in: path
        name: replayLogName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Replay Log object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplayLogResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Replay Log object.
      tags: *id022
  /msgVpns/{msgVpnName}/replayLogs/{replayLogName}/msgs:
    get:
      description: 'Get a list of Message objects.


        A Message is a packet of information sent from producers to consumers. Messages
        are the central units of information that clients exchange using the message
        broker and which are cached in the Replay Log.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        replayLogName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnReplayLogMsgs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Replay Log.
        in: path
        name: replayLogName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Message objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplayLogMsgsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Message objects.
      tags: *id022
  /msgVpns/{msgVpnName}/replayLogs/{replayLogName}/msgs/{msgId}:
    get:
      description: 'Get a Message object.


        A Message is a packet of information sent from producers to consumers. Messages
        are the central units of information that clients exchange using the message
        broker and which are cached in the Replay Log.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        replayLogName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnReplayLogMsg
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Replay Log.
        in: path
        name: replayLogName
        required: true
        type: string
      - description: The identifier (ID) of the message.
        in: path
        name: msgId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Message object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplayLogMsgResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Message object.
      tags: *id022
  /msgVpns/{msgVpnName}/replicatedTopics:
    get:
      description: 'Get a list of Replicated Topic objects.


        To indicate which messages should be replicated between the active and standby
        site, a Replicated Topic subscription must be configured on a Message VPN.
        If a published message matches both a replicated topic and an endpoint on
        the active site, then the message is replicated to the standby site.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        replicatedTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnReplicatedTopics
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Replicated Topic objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplicatedTopicsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Replicated Topic objects.
      tags: &id023
      - all
      - msgVpn
      - replicatedTopic
  /msgVpns/{msgVpnName}/replicatedTopics/{replicatedTopic}:
    get:
      description: 'Get a Replicated Topic object.


        To indicate which messages should be replicated between the active and standby
        site, a Replicated Topic subscription must be configured on a Message VPN.
        If a published message matches both a replicated topic and an endpoint on
        the active site, then the message is replicated to the standby site.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        replicatedTopic|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnReplicatedTopic
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The topic for applying replication. Published messages matching
          this topic will be replicated to the standby site.
        in: path
        name: replicatedTopic
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Replicated Topic object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnReplicatedTopicResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Replicated Topic object.
      tags: *id023
  /msgVpns/{msgVpnName}/restDeliveryPoints:
    get:
      description: 'Get a list of REST Delivery Point objects.


        A REST Delivery Point manages delivery of messages from queues to a named
        list of REST Consumers.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPoints
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of REST Delivery Point objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of REST Delivery Point objects.
      tags: &id024
      - all
      - msgVpn
      - restDeliveryPoint
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}:
    get:
      description: 'Get a REST Delivery Point object.


        A REST Delivery Point manages delivery of messages from queues to a named
        list of REST Consumers.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPoint
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The REST Delivery Point object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a REST Delivery Point object.
      tags: *id024
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings:
    get:
      description: 'Get a list of Queue Binding objects.


        A Queue Binding for a REST Delivery Point attracts messages to be delivered
        to REST consumers. If the queue does not exist it can be created subsequently,
        and once the queue is operational the broker performs the queue binding. Removing
        the queue binding does not delete the queue itself. Similarly, removing the
        queue does not remove the queue binding, which fails until the queue is recreated
        or the queue binding is deleted.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueBindingName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPointQueueBindings
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Queue Binding objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Queue Binding objects.
      tags: *id024
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/queueBindings/{queueBindingName}:
    get:
      description: 'Get a Queue Binding object.


        A Queue Binding for a REST Delivery Point attracts messages to be delivered
        to REST consumers. If the queue does not exist it can be created subsequently,
        and once the queue is operational the broker performs the queue binding. Removing
        the queue binding does not delete the queue itself. Similarly, removing the
        queue does not remove the queue binding, which fails until the queue is recreated
        or the queue binding is deleted.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        queueBindingName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPointQueueBinding
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - description: The name of a queue in the Message VPN.
        in: path
        name: queueBindingName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Queue Binding object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointQueueBindingResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Queue Binding object.
      tags: *id024
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers:
    get:
      description: 'Get a list of REST Consumer objects.


        REST Consumer objects establish HTTP connectivity to REST consumer applications
        who wish to receive messages from a broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.httpRequestConnectionCloseTxMsgCount||x

        counter.httpRequestOutstandingTxMsgCount||x

        counter.httpRequestTimedOutTxMsgCount||x

        counter.httpRequestTxByteCount||x

        counter.httpRequestTxMsgCount||x

        counter.httpResponseErrorRxMsgCount||x

        counter.httpResponseRxByteCount||x

        counter.httpResponseRxMsgCount||x

        counter.httpResponseSuccessRxMsgCount||x

        msgVpnName|x|

        restConsumerName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPointRestConsumers
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of REST Consumer objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumersResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of REST Consumer objects.
      tags: *id024
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}:
    get:
      description: 'Get a REST Consumer object.


        REST Consumer objects establish HTTP connectivity to REST consumer applications
        who wish to receive messages from a broker.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        counter.httpRequestConnectionCloseTxMsgCount||x

        counter.httpRequestOutstandingTxMsgCount||x

        counter.httpRequestTimedOutTxMsgCount||x

        counter.httpRequestTxByteCount||x

        counter.httpRequestTxMsgCount||x

        counter.httpResponseErrorRxMsgCount||x

        counter.httpResponseRxByteCount||x

        counter.httpResponseRxMsgCount||x

        counter.httpResponseSuccessRxMsgCount||x

        msgVpnName|x|

        restConsumerName|x|

        restDeliveryPointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.11.'
      operationId: getMsgVpnRestDeliveryPointRestConsumer
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - description: The name of the REST Consumer.
        in: path
        name: restConsumerName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The REST Consumer object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a REST Consumer object.
      tags: *id024
  /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames:
    get:
      deprecated: true
      description: 'Get a list of Trusted Common Name objects.


        The Trusted Common Names for the REST Consumer are used by encrypted transports
        to verify the name in the certificate presented by the remote REST consumer.
        They must include the common name of the remote REST consumer''s server certificate.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|x

        restConsumerName|x|x

        restDeliveryPointName|x|x

        tlsTrustedCommonName|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.17. Common Name validation has been replaced
        by Server Certificate Name validation.'
      operationId: getMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNames
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - description: The name of the REST Consumer.
        in: path
        name: restConsumerName
        required: true
        type: string
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Trusted Common Name objects' attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Trusted Common Name objects.
      tags: *id024
  ? /msgVpns/{msgVpnName}/restDeliveryPoints/{restDeliveryPointName}/restConsumers/{restConsumerName}/tlsTrustedCommonNames/{tlsTrustedCommonName}
  : get:
      deprecated: true
      description: 'Get a Trusted Common Name object.


        The Trusted Common Names for the REST Consumer are used by encrypted transports
        to verify the name in the certificate presented by the remote REST consumer.
        They must include the common name of the remote REST consumer''s server certificate.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|x

        restConsumerName|x|x

        restDeliveryPointName|x|x

        tlsTrustedCommonName|x|x




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been deprecated since 2.17. Common Name validation has been replaced
        by Server Certificate Name validation.'
      operationId: getMsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonName
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the REST Delivery Point.
        in: path
        name: restDeliveryPointName
        required: true
        type: string
      - description: The name of the REST Consumer.
        in: path
        name: restConsumerName
        required: true
        type: string
      - description: The expected trusted common name of the remote certificate.
        in: path
        name: tlsTrustedCommonName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Trusted Common Name object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnRestDeliveryPointRestConsumerTlsTrustedCommonNameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Trusted Common Name object.
      tags: *id024
  /msgVpns/{msgVpnName}/topicEndpointTemplates:
    get:
      description: 'Get a list of Topic Endpoint Template objects.


        A Topic Endpoint Template provides a mechanism for specifying the initial
        state for client created topic endpoints.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicEndpointTemplateName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnTopicEndpointTemplates
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Endpoint Template objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointTemplatesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Endpoint Template objects.
      tags: &id025
      - all
      - msgVpn
      - topicEndpointTemplate
  /msgVpns/{msgVpnName}/topicEndpointTemplates/{topicEndpointTemplateName}:
    get:
      description: 'Get a Topic Endpoint Template object.


        A Topic Endpoint Template provides a mechanism for specifying the initial
        state for client created topic endpoints.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicEndpointTemplateName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.14.'
      operationId: getMsgVpnTopicEndpointTemplate
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint Template.
        in: path
        name: topicEndpointTemplateName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Endpoint Template object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointTemplateResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Endpoint Template object.
      tags: *id025
  /msgVpns/{msgVpnName}/topicEndpoints:
    get:
      description: 'Get a list of Topic Endpoint objects.


        A Topic Endpoint attracts messages published to a topic for which the Topic
        Endpoint has a matching topic subscription. The topic subscription for the
        Topic Endpoint is specified in the client request to bind a Flow to that Topic
        Endpoint. Queues are significantly more flexible than Topic Endpoints and
        are the recommended approach for most applications. The use of Topic Endpoints
        should be restricted to JMS applications.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpoints
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Endpoint objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Endpoint objects.
      tags: &id026
      - all
      - msgVpn
      - topicEndpoint
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}:
    get:
      description: 'Get a Topic Endpoint object.


        A Topic Endpoint attracts messages published to a topic for which the Topic
        Endpoint has a matching topic subscription. The topic subscription for the
        Topic Endpoint is specified in the client request to bind a Flow to that Topic
        Endpoint. Queues are significantly more flexible than Topic Endpoints and
        are the recommended approach for most applications. The use of Topic Endpoints
        should be restricted to JMS applications.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpoint
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Endpoint object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Endpoint object.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/msgs:
    get:
      description: 'Get a list of Topic Endpoint Message objects.


        A Topic Endpoint Message is a packet of information sent from producers to
        consumers using the Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointMsgs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Endpoint Message objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointMsgsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Endpoint Message objects.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/msgs/{msgId}:
    get:
      description: 'Get a Topic Endpoint Message object.


        A Topic Endpoint Message is a packet of information sent from producers to
        consumers using the Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointMsg
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - description: The identifier (ID) of the Message.
        in: path
        name: msgId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Endpoint Message object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointMsgResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Endpoint Message object.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/priorities:
    get:
      description: 'Get a list of Topic Endpoint Priority objects.


        Topic Endpoints can optionally support priority message delivery; all messages
        of a higher priority are delivered before any messages of a lower priority.
        A Priority object contains information about the number and size of the messages
        with a particular priority in the Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        priority|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointPriorities
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Endpoint Priority objects' attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointPrioritiesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Endpoint Priority objects.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/priorities/{priority}:
    get:
      description: 'Get a Topic Endpoint Priority object.


        Topic Endpoints can optionally support priority message delivery; all messages
        of a higher priority are delivered before any messages of a lower priority.
        A Priority object contains information about the number and size of the messages
        with a particular priority in the Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        priority|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointPriority
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - description: The level of the Priority, from 9 (highest) to 0 (lowest).
        in: path
        name: priority
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Endpoint Priority object's attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointPriorityResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Endpoint Priority object.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/txFlows:
    get:
      description: 'Get a list of Topic Endpoint Transmit Flow objects.


        Topic Endpoint Transmit Flows are used by clients to consume Guaranteed messages
        from a Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        flowId|x|

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointTxFlows
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Topic Endpoint Transmit Flow objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointTxFlowsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Topic Endpoint Transmit Flow objects.
      tags: *id026
  /msgVpns/{msgVpnName}/topicEndpoints/{topicEndpointName}/txFlows/{flowId}:
    get:
      description: 'Get a Topic Endpoint Transmit Flow object.


        Topic Endpoint Transmit Flows are used by clients to consume Guaranteed messages
        from a Topic Endpoint.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        flowId|x|

        msgVpnName|x|

        topicEndpointName|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTopicEndpointTxFlow
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The name of the Topic Endpoint.
        in: path
        name: topicEndpointName
        required: true
        type: string
      - description: The identifier (ID) of the Flow.
        in: path
        name: flowId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Topic Endpoint Transmit Flow object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTopicEndpointTxFlowResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Topic Endpoint Transmit Flow object.
      tags: *id026
  /msgVpns/{msgVpnName}/transactions:
    get:
      description: 'Get a list of Replicated Local Transaction or XA Transaction objects.


        Transactions can be used to group a set of Guaranteed messages to be published
        or consumed or both as an atomic unit of work.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransactions
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Replicated Local Transaction or XA Transaction
            objects' attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Replicated Local Transaction or XA Transaction objects.
      tags: &id027
      - all
      - msgVpn
      - transaction
  /msgVpns/{msgVpnName}/transactions/{xid}:
    get:
      description: 'Get a Replicated Local Transaction or XA Transaction object.


        Transactions can be used to group a set of Guaranteed messages to be published
        or consumed or both as an atomic unit of work.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransaction
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The identifier (ID) of the Transaction.
        in: path
        name: xid
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Replicated Local Transaction or XA Transaction object's
            attributes, and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Replicated Local Transaction or XA Transaction object.
      tags: *id027
  /msgVpns/{msgVpnName}/transactions/{xid}/consumerMsgs:
    get:
      description: 'Get a list of Transaction Consumer Message objects.


        A Transaction Consumer Message is a message that will be consumed as part
        of this Transaction once the Transaction is committed.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransactionConsumerMsgs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The identifier (ID) of the Transaction.
        in: path
        name: xid
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Transaction Consumer Message objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionConsumerMsgsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Transaction Consumer Message objects.
      tags: *id027
  /msgVpns/{msgVpnName}/transactions/{xid}/consumerMsgs/{msgId}:
    get:
      description: 'Get a Transaction Consumer Message object.


        A Transaction Consumer Message is a message that will be consumed as part
        of this Transaction once the Transaction is committed.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransactionConsumerMsg
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The identifier (ID) of the Transaction.
        in: path
        name: xid
        required: true
        type: string
      - description: The identifier (ID) of the Message.
        in: path
        name: msgId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Transaction Consumer Message object's attributes, and the
            request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionConsumerMsgResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Transaction Consumer Message object.
      tags: *id027
  /msgVpns/{msgVpnName}/transactions/{xid}/publisherMsgs:
    get:
      description: 'Get a list of Transaction Publisher Message objects.


        A Transaction Publisher Message is a message that will be published as part
        of this Transaction once the Transaction is committed.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransactionPublisherMsgs
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The identifier (ID) of the Transaction.
        in: path
        name: xid
        required: true
        type: string
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Transaction Publisher Message objects' attributes,
            and the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionPublisherMsgsResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Transaction Publisher Message objects.
      tags: *id027
  /msgVpns/{msgVpnName}/transactions/{xid}/publisherMsgs/{msgId}:
    get:
      description: 'Get a Transaction Publisher Message object.


        A Transaction Publisher Message is a message that will be published as part
        of this Transaction once the Transaction is committed.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        msgId|x|

        msgVpnName|x|

        xid|x|




        A SEMP client authorized with a minimum access scope/level of "vpn/read-only"
        is required to perform this operation.


        This has been available since 2.12.'
      operationId: getMsgVpnTransactionPublisherMsg
      parameters:
      - description: The name of the Message VPN.
        in: path
        name: msgVpnName
        required: true
        type: string
      - description: The identifier (ID) of the Transaction.
        in: path
        name: xid
        required: true
        type: string
      - description: The identifier (ID) of the Message.
        in: path
        name: msgId
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Transaction Publisher Message object's attributes, and
            the request metadata.
          schema:
            $ref: '#/definitions/MsgVpnTransactionPublisherMsgResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Transaction Publisher Message object.
      tags: *id027
  /virtualHostnames:
    get:
      description: 'Get a list of Virtual Hostname objects.


        A Virtual Hostname is a provisioned object on a message broker that contains
        a Virtual Hostname to Message VPN mapping.


        Clients which connect to a global (as opposed to per Message VPN) port and
        provides this hostname will be directed to its corresponding Message VPN.
        A case-insentive match is performed on the full client-provided hostname against
        the configured virtual-hostname.


        This mechanism is only supported for AMQP, and only for hostnames provided
        through the Server Name Indication (SNI) extension of TLS.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        virtualHostname|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.17.'
      operationId: getVirtualHostnames
      parameters:
      - $ref: '#/parameters/countQuery'
      - $ref: '#/parameters/cursorQuery'
      - $ref: '#/parameters/whereQuery'
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The list of Virtual Hostname objects' attributes, and the request
            metadata.
          schema:
            $ref: '#/definitions/VirtualHostnamesResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a list of Virtual Hostname objects.
      tags: &id028
      - all
      - virtualHostname
  /virtualHostnames/{virtualHostname}:
    get:
      description: 'Get a Virtual Hostname object.


        A Virtual Hostname is a provisioned object on a message broker that contains
        a Virtual Hostname to Message VPN mapping.


        Clients which connect to a global (as opposed to per Message VPN) port and
        provides this hostname will be directed to its corresponding Message VPN.
        A case-insentive match is performed on the full client-provided hostname against
        the configured virtual-hostname.


        This mechanism is only supported for AMQP, and only for hostnames provided
        through the Server Name Indication (SNI) extension of TLS.



        Attribute|Identifying|Deprecated

        :---|:---:|:---:

        virtualHostname|x|




        A SEMP client authorized with a minimum access scope/level of "global/read-only"
        is required to perform this operation.


        This has been available since 2.17.'
      operationId: getVirtualHostname
      parameters:
      - description: The virtual hostname.
        in: path
        name: virtualHostname
        required: true
        type: string
      - $ref: '#/parameters/selectQuery'
      produces:
      - application/json
      responses:
        '200':
          description: The Virtual Hostname object's attributes, and the request metadata.
          schema:
            $ref: '#/definitions/VirtualHostnameResponse'
        default:
          description: The error response.
          schema:
            $ref: '#/definitions/SempMetaOnlyResponse'
      security:
      - basicAuth: []
      summary: Get a Virtual Hostname object.
      tags: *id028
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  basicAuth:
    description: basic authentication
    type: basic
swagger: '2.0'
tags: []
